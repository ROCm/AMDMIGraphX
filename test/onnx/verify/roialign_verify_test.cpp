/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2024 Advanced Micro Devices, Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#include <migraphx/register_target.hpp>
#include <migraphx/verify.hpp>
#include <onnx_test.hpp>

TEST_CASE(roialign_verify_test)
{
    migraphx::program p = read_onnx("roialign_test.onnx");
    p.compile(migraphx::make_target("ref"));

    migraphx::shape s{migraphx::shape::float_type, {10, 5, 4, 7}};
    std::vector<float> data(10 * 5 * 4 * 7);
    std::iota(data.begin(), data.end(), 0);

    migraphx::parameter_map pp;
    pp["x"] = migraphx::argument(s, data.data());
    pp["y"] = migraphx::argument(s, data.data());

    migraphx::shape srois{migraphx::shape::float_type, {2, 4}};
    std::vector<float> rois_data = {
                                    2.1, 1.73, 3.8, 2.13,
                                    0.1, 0.15, 0.6, 0.35
                                    };
    migraphx::shape sbi{migraphx::shape::int64_type, {2}};  // batch_index
    std::vector<float> bi_data = {1, 0};
printf("sdfkgjusdfgjk\n");
    pp["rois"]      = migraphx::argument(srois, rois_data.data());
    pp["batch_ind"] = migraphx::argument(sbi, bi_data.data());

    auto result = p.eval(pp).back();
printf("  dfssdgf \n");
    std::vector<float> result_vector;
    result.visit([&](auto output) { result_vector.assign(output.begin(), output.end()); });

//     printf(" result: ");
// for(int aa = 0; aa < result_vector.size(); aa++) 
//  {
//           printf(" %f ", result_vector[aa]);
//     if(aa % s.lens()[0] == s.lens()[0]-1)
//       printf("\n");
// }    printf("\n");

    std::vector<float> gold = {
          3.1666667,   3.5000002,   3.8333333,
           4.566667 ,   4.9      ,   5.2333336,
           5.9666677,   6.3      ,   6.6333337,
           7.366667 ,   7.7000003,   8.033334 ,
           8.766666 ,   9.100001 ,   9.433333 ,

        
 31.166666 ,  31.5      ,  31.833334 ,
          32.566666 ,  32.9      ,  33.23333  ,
          33.966667 ,  34.300003 ,  34.633335 ,
          35.366665 ,  35.699997 ,  36.033337 ,
          36.766666 ,  37.100002 ,  37.433334 ,

        
 59.166668 ,  59.5      ,  59.833332 ,
          60.566666 ,  60.899998 ,  61.23333  ,
          61.966667 ,  62.299995 ,  62.633335 ,
          63.366665 ,  63.700005 ,  64.03334  ,
          64.76666  ,  65.100006 ,  65.433334 ,

        
 87.166664 ,  87.5      ,  87.83334  ,
          88.566666 ,  88.899994 ,  89.23333  ,
          89.96666  ,  90.30001  ,  90.63333  ,
          91.36667  ,  91.7      ,  92.033325 ,
          92.766655 ,  93.100006 ,  93.433334 ,

        
115.166664 , 115.5      , 115.833336 ,
         116.56668  , 116.899994 , 117.23333  ,
         117.96666  , 118.30001  , 118.63333  ,
         119.36667  , 119.700005 , 120.03334  ,
         120.766655 , 121.100006 , 121.433334 ,


       
165.76666  , 166.80742  ,  55.666668 ,
         165.76666  , 166.80742  ,  55.666668 ,
         110.51111  , 111.20494  ,  37.11111  ,
           0.       ,   0.       ,   0.       ,
           0.       ,   0.       ,   0.       ,

        
193.76666  , 194.80742  ,  65.       ,
         193.76666  , 194.80742  ,  65.       ,
         129.17778  , 129.87161  ,  43.333332 ,
           0.       ,   0.       ,   0.       ,
           0.       ,   0.       ,   0.       ,

        
221.76668  , 222.80742  ,  74.333336 ,
         221.76668  , 222.80742  ,  74.333336 ,
         147.84445  , 148.53827  ,  49.555557 ,
           0.       ,   0.       ,   0.       ,
           0.       ,   0.       ,   0.       ,

        
249.76668  , 250.8074   ,  83.666664 ,
         249.76668  , 250.8074   ,  83.666664 ,
         166.51111  , 167.20494  ,  55.77778  ,
           0.       ,   0.       ,   0.       ,
           0.       ,   0.       ,   0.       ,

        
277.7667   , 278.8074   ,  93.       ,
         277.7667   , 278.8074   ,  93.       ,
         185.17778  , 185.87161  ,  62.       ,
           0.       ,   0.       ,   0.       ,
           0.       ,   0.       ,   0.  
// 0.00000000e+00, 0.00000000e+00, 4.93826950e-03,
//           8.88888836e-02, 2.00000003e-01, 3.11111122e-01,
//           4.22222227e-01, 5.33333302e-01, 6.44444466e-01,
//          0.00000000e+00, 0.00000000e+00, 4.93826950e-03,
//           8.88888836e-02, 2.00000003e-01, 3.11111122e-01,
//           4.22222227e-01, 5.33333302e-01, 6.44444466e-01,
//          0.00000000e+00, 0.00000000e+00, 4.93826950e-03,
//           8.88888836e-02, 2.00000003e-01, 3.11111122e-01,
//           4.22222227e-01, 5.33333302e-01, 6.44444466e-01,
//          1.90476179e-02, 1.90476179e-02, 2.39858869e-02,
//           1.07936502e-01, 2.19047621e-01, 3.30158740e-01,
//           4.41269815e-01, 5.52380979e-01, 6.63492084e-01,
//          1.71428561e-01, 1.71428561e-01, 1.76366836e-01,
//           2.60317445e-01, 3.71428549e-01, 4.82539713e-01,
//           5.93650818e-01, 7.04761863e-01, 8.15872967e-01,
//          3.42857152e-01, 3.42857152e-01, 3.47795397e-01,
//           4.31746036e-01, 5.42857111e-01, 6.53968275e-01,
//           7.65079260e-01, 8.76190484e-01, 9.87301588e-01,
//          5.14285743e-01, 5.14285743e-01, 5.19223928e-01,
//           6.03174567e-01, 7.14285672e-01, 8.25396836e-01,
//           9.36507940e-01, 1.04761910e+00, 1.15873003e+00,

//         1.20000000e+01, 1.20000000e+01, 1.20049391e+01,
//           1.20888891e+01, 1.21999998e+01, 1.23111115e+01,
//           1.24222221e+01, 1.25333328e+01, 1.26444445e+01,
//          1.20000000e+01, 1.20000000e+01, 1.20049391e+01,
//           1.20888891e+01, 1.21999998e+01, 1.23111115e+01,
//           1.24222221e+01, 1.25333328e+01, 1.26444445e+01,
//          1.20000000e+01, 1.20000000e+01, 1.20049391e+01,
//           1.20888891e+01, 1.21999998e+01, 1.23111115e+01,
//           1.24222221e+01, 1.25333328e+01, 1.26444445e+01,
//          1.20190477e+01, 1.20190477e+01, 1.20239868e+01,
//           1.21079369e+01, 1.22190475e+01, 1.23301582e+01,
//           1.24412699e+01, 1.25523796e+01, 1.26634922e+01,
//          1.21714277e+01, 1.21714277e+01, 1.21763659e+01,
//           1.22603178e+01, 1.23714285e+01, 1.24825401e+01,
//           1.25936518e+01, 1.27047615e+01, 1.28158722e+01,
//          1.23428583e+01, 1.23428583e+01, 1.23477964e+01,
//           1.24317465e+01, 1.25428581e+01, 1.26539688e+01,
//           1.27650795e+01, 1.28761902e+01, 1.29873009e+01,
//          1.25142860e+01, 1.25142860e+01, 1.25192232e+01,
//           1.26031752e+01, 1.27142859e+01, 1.28253975e+01,
//           1.29365072e+01, 1.30476189e+01, 1.31587305e+01,


//        2.88403187e+01, 2.90094528e+01, 2.90514297e+01,
//           2.90514297e+01, 2.90514297e+01, 2.90514297e+01,
//           2.90514297e+01, 9.68380928e+00, 0.00000000e+00,
//          2.91831741e+01, 2.93523083e+01, 2.93942871e+01,
//           2.93942871e+01, 2.93942871e+01, 2.93942871e+01,
//           2.93942871e+01, 9.79809570e+00, 0.00000000e+00,
//          2.95260353e+01, 2.96951675e+01, 2.97371426e+01,
//           2.97371426e+01, 2.97371426e+01, 2.97371426e+01,
//           2.97371426e+01, 9.91238022e+00, 0.00000000e+00,
//          2.98688869e+01, 3.00380211e+01, 3.00799999e+01,
//           3.00799999e+01, 3.00799999e+01, 3.00799999e+01,
//           3.00799999e+01, 1.00266676e+01, 0.00000000e+00,
//          3.02117481e+01, 3.03808823e+01, 3.04228554e+01,
//           3.04228554e+01, 3.04228554e+01, 3.04228554e+01,
//           3.04228554e+01, 1.01409521e+01, 0.00000000e+00,
//          3.05546055e+01, 3.07237377e+01, 3.07657166e+01,
//           3.07657166e+01, 3.07657166e+01, 3.07657166e+01,
//           3.07657166e+01, 1.02552385e+01, 0.00000000e+00,
//          3.08974609e+01, 3.10665970e+01, 3.11085720e+01,
//           3.11085720e+01, 3.11085720e+01, 3.11085720e+01,
//           3.11085720e+01, 1.03695240e+01, 0.00000000e+00,

//         4.08403168e+01, 4.10094528e+01, 4.10514259e+01,
//           4.10514259e+01, 4.10514259e+01, 4.10514259e+01,
//           4.10514259e+01, 1.36838093e+01, 0.00000000e+00,
//          4.11831741e+01, 4.13523102e+01, 4.13942871e+01,
//           4.13942871e+01, 4.13942871e+01, 4.13942871e+01,
//           4.13942871e+01, 1.37980957e+01, 0.00000000e+00,
//          4.15260315e+01, 4.16951675e+01, 4.17371483e+01,
//           4.17371483e+01, 4.17371483e+01, 4.17371483e+01,
//           4.17371483e+01, 1.39123802e+01, 0.00000000e+00,
//          4.18688889e+01, 4.20380211e+01, 4.20799980e+01,
//           4.20799980e+01, 4.20799980e+01, 4.20799980e+01,
//           4.20799980e+01, 1.40266676e+01, 0.00000000e+00,
//          4.22117462e+01, 4.23808823e+01, 4.24228554e+01,
//           4.24228554e+01, 4.24228554e+01, 4.24228554e+01,
//           4.24228554e+01, 1.41409521e+01, 0.00000000e+00,
//          4.25546036e+01, 4.27237396e+01, 4.27657166e+01,
//           4.27657166e+01, 4.27657166e+01, 4.27657166e+01,
//           4.27657166e+01, 1.42552385e+01, 0.00000000e+00,
//          4.28974609e+01, 4.30666008e+01, 4.31085777e+01,
//           4.31085777e+01, 4.31085777e+01, 4.31085777e+01,
//           4.31085777e+01, 1.43695240e+01, 0.00000000e+00
};
    float alpha = 0.5;
    std::transform(data.begin(), data.end(), gold.begin(), [&](auto x) {
        return std::max(0.0f, x) + std::min(0.0f, alpha * std::expm1(x / alpha));
    });
    EXPECT(migraphx::verify::verify_rms_range(result_vector, gold));
}
