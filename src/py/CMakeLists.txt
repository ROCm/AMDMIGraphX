
option(MIGRAPHX_ENABLE_PYTHON "Enable python bindings" ON)
if(MIGRAPHX_ENABLE_PYTHON)
    set(PYBIND11_NOPYTHON On)
    find_package(pybind11 REQUIRED)
    macro(find_python version)
        find_program(PYTHON_CONFIG_${version} python${version}-config)
        if(EXISTS ${PYTHON_CONFIG_${version}})
            execute_process(COMMAND ${PYTHON_CONFIG_${version}} --includes OUTPUT_VARIABLE _python_include_args)
            separate_arguments(_python_includes UNIX_COMMAND "${_python_include_args}")
            string(REPLACE "-I" "" _python_includes "${_python_includes}")
            add_library(python${version}::headers INTERFACE IMPORTED GLOBAL)
            set_target_properties(python${version}::headers PROPERTIES
                INTERFACE_INCLUDE_DIRECTORIES "${_python_includes}"
            )
            execute_process(COMMAND ${PYTHON_CONFIG_${version}} --prefix OUTPUT_VARIABLE _python_prefix)
            string(STRIP "${_python_prefix}" _python_prefix)
            set(PYTHON_${version}_EXECUTABLE "${_python_prefix}/bin/python${version}" CACHE PATH "")
        endif()
    endmacro()
    function(py_extension name version)
        set(_python_module_extension)
        execute_process(COMMAND ${PYTHON_CONFIG_${version}} --extension-suffix OUTPUT_VARIABLE _python_module_extension)
        string(STRIP "${_python_module_extension}" _python_module_extension)
        set_target_properties(${name} PROPERTIES PREFIX "" SUFFIX "${_python_module_extension}")
    endfunction()
    function(py_add_module NAME)
        set(options)
        set(oneValueArgs PYTHON_VERSION)
        set(multiValueArgs)

        cmake_parse_arguments(PARSE "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
        set(PYTHON_VERSION ${PARSE_PYTHON_VERSION})

        add_library(${NAME} MODULE ${PARSE_UNPARSED_ARGUMENTS})
        pybind11_strip(${NAME})
        py_extension(${NAME} ${PYTHON_VERSION})
        target_link_libraries(${NAME} PRIVATE pybind11::module pybind11::lto python${PYTHON_VERSION}::headers)
        set_target_properties(${NAME} PROPERTIES 
            OUTPUT_NAME migraphx
            C_VISIBILITY_PRESET hidden
            CXX_VISIBILITY_PRESET hidden
        )

    endfunction()
    set(PYTHON_VERSIONS 2.7 3.5 3.6 3.7 3.8 3.9)

    add_custom_target(migraphx_py)

    foreach(PYTHON_VERSION ${PYTHON_VERSIONS})
        find_python(${PYTHON_VERSION})
        if(TARGET python${PYTHON_VERSION}::headers)
            message(STATUS "Python ${PYTHON_VERSION} found.")
            py_add_module(migraphx_py_${PYTHON_VERSION} migraphx_py.cpp PYTHON_VERSION ${PYTHON_VERSION})
            target_link_libraries(migraphx_py_${PYTHON_VERSION} PRIVATE migraphx migraphx_tf migraphx_onnx migraphx_cpu)
            if(MIGRAPHX_ENABLE_GPU)
                target_link_libraries(migraphx_py_${PYTHON_VERSION} PRIVATE migraphx_gpu)
                target_compile_definitions(migraphx_py_${PYTHON_VERSION} PRIVATE -DHAVE_GPU)
            endif()
            rocm_install_targets(TARGETS migraphx_py_${PYTHON_VERSION})
            add_dependencies(migraphx_py migraphx_py_${PYTHON_VERSION})
        else()
            message(STATUS "Python ${PYTHON_VERSION} not found.")
        endif()
    endforeach()
endif()
