import migraphx

    p = migraphx.program()
    m = p.get_main_module()
    x_0 = m.add_literal(migraphx.generate_argument(migraphx.shape(type="float_type", lens=[64, 512]), 0))
    x_1 = m.add_literal(migraphx.generate_argument(migraphx.shape(type="float_type", lens=[64, 512]), 1))
    x_2 = m.add_literal(migraphx.generate_argument(migraphx.shape(type="float_type", lens=[64, 512]), 2))
    x_3 = m.add_literal(migraphx.generate_argument(migraphx.shape(type="float_type", lens=[64, 512]), 3))
    x_4 = m.add_literal(migraphx.generate_argument(migraphx.shape(type="float_type", lens=[64, 512]), 4))
    x_5 = m.add_literal(migraphx.generate_argument(migraphx.shape(type="float_type", lens=[64, 512]), 5))
    x_6 = m.add_literal(migraphx.generate_argument(migraphx.shape(type="float_type", lens=[64, 512]), 6))
    x_7 = m.add_literal(migraphx.generate_argument(migraphx.shape(type="float_type", lens=[64, 512]), 7))
    x_8 = m.add_literal(migraphx.generate_argument(migraphx.shape(type="float_type", lens=[64, 512]), 8))
    x_9 = m.add_literal(migraphx.generate_argument(migraphx.shape(type="float_type", lens=[64, 512]), 9))
    x_10 = m.add_literal(migraphx.generate_argument(migraphx.shape(type="float_type", lens=[64, 512]), 10))
    x_11 = m.add_literal(migraphx.generate_argument(migraphx.shape(type="float_type", lens=[64, 512]), 11))
    x_12 = m.add_literal(migraphx.create_argument(migraphx.shape(type="float_type", lens=[1]), [0.125]))
    p_x = m.add_parameter("x", migraphx.shape(type="float_type", lens=[64, 64]))
    x_14 = m.add_instruction(migraphx.op("multibroadcast", out_lens=[64,512]), [x_12]) # migraphx.shape(type="float_type", lens=[64, 512], strides=[0, 0])
    x_15 = m.add_instruction(migraphx.op("dot"), [p_x, x_11]) # migraphx.shape(type="float_type", lens=[64, 512])
    x_16 = m.add_instruction(migraphx.op("add"), [x_15, x_10]) # migraphx.shape(type="float_type", lens=[64, 512])
    x_17 = m.add_instruction(migraphx.op("add"), [x_16, x_9]) # migraphx.shape(type="float_type", lens=[64, 512])
    x_18 = m.add_instruction(migraphx.op("add"), [x_17, x_8]) # migraphx.shape(type="float_type", lens=[64, 512])
    x_19 = m.add_instruction(migraphx.op("dot"), [p_x, x_7]) # migraphx.shape(type="float_type", lens=[64, 512])
    x_20 = m.add_instruction(migraphx.op("add"), [x_19, x_6]) # migraphx.shape(type="float_type", lens=[64, 512])
    x_21 = m.add_instruction(migraphx.op("add"), [x_20, x_5]) # migraphx.shape(type="float_type", lens=[64, 512])
    x_22 = m.add_instruction(migraphx.op("add"), [x_21, x_4]) # migraphx.shape(type="float_type", lens=[64, 512])
    x_23 = m.add_instruction(migraphx.op("dot"), [p_x, x_3]) # migraphx.shape(type="float_type", lens=[64, 512])
    x_24 = m.add_instruction(migraphx.op("add"), [x_23, x_2]) # migraphx.shape(type="float_type", lens=[64, 512])
    x_25 = m.add_instruction(migraphx.op("add"), [x_24, x_1]) # migraphx.shape(type="float_type", lens=[64, 512])
    x_26 = m.add_instruction(migraphx.op("add"), [x_25, x_0]) # migraphx.shape(type="float_type", lens=[64, 512])
    x_27 = m.add_instruction(migraphx.op("mul"), [x_26, x_14]) # migraphx.shape(type="float_type", lens=[64, 512])
    print("Hello, World!")
    #m.add_return([x_18, x_22, x_27])
