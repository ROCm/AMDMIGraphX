/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2024 Advanced Micro Devices, Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
#include <cmath>
#include <migraphx/float_equal.hpp>
#include <migraphx/ranges.hpp>
#include <migraphx/bf16.hpp>
#include "test.hpp"

#include <limits>
#include <map>
#include <iomanip>
#include <bitset>
#include <set>
#include <random>

template <class T, class U>
bool bit_equal(const T& x, const U& y)
{
    static_assert(sizeof(T) == sizeof(U));
    using type = std::array<char, sizeof(T)>;
    return migraphx::bit_cast<type>(x) == migraphx::bit_cast<type>(y);
}

TEST_CASE(check_numeric_limits)
{
    std::bitset<8> exponentBits(std::numeric_limits<migraphx::bf16>::quiet_NaN().exponent);
    std::cout << "Exponent bits: " << exponentBits << std::endl;

    std::bitset<7> mantissaBits(std::numeric_limits<migraphx::bf16>::quiet_NaN().mantissa);
    std::cout << "Mantissa bits: " << mantissaBits << std::endl;

    std::cout << std::numeric_limits<migraphx::bf16>::min() << std::endl;
    CHECK(bit_equal(std::numeric_limits<migraphx::bf16>::min(), uint16_t{0x0080}));
    CHECK(bit_equal(std::numeric_limits<migraphx::bf16>::lowest(), uint16_t{0xff7f}));
    CHECK(bit_equal(std::numeric_limits<migraphx::bf16>::max(), uint16_t{0x7f7f}));
    CHECK(bit_equal(std::numeric_limits<migraphx::bf16>::epsilon(), uint16_t{0x3c0}));
    CHECK(bit_equal(std::numeric_limits<migraphx::bf16>::denorm_min(), uint16_t{0x0001}));
    CHECK(bit_equal(std::numeric_limits<migraphx::bf16>::infinity(), uint16_t{0x7f80}));
    CHECK(bit_equal(std::numeric_limits<migraphx::bf16>::quiet_NaN(), uint16_t{0x7fc0}));
    CHECK(bit_equal(std::numeric_limits<migraphx::bf16>::signaling_NaN(), uint16_t{0x7fa0}));
}




static const std::map<uint16_t, float> half_lut = {
{0x0000, 0.0},
{0x004d, 0.0000000000000000000000000000000000000071},
{0x0078, 0.0000000000000000000000000000000000000110},
{0x00e4, 0.0000000000000000000000000000000000000209},
{0x016c, 0.0000000000000000000000000000000000000433},
{0x01da, 0.0000000000000000000000000000000000000801},
{0x01dd, 0.0000000000000000000000000000000000000812},
{0x0345, 0.0000000000000000000000000000000000005789},
{0x0406, 0.0000000000000000000000000000000000015752},
{0x0426, 0.0000000000000000000000000000000000019513},
{0x04c2, 0.0000000000000000000000000000000000045609},
{0x052f, 0.0000000000000000000000000000000000082285},
{0x053f, 0.0000000000000000000000000000000000089808},
{0x054c, 0.0000000000000000000000000000000000095920},
{0x0648, 0.0000000000000000000000000000000000376158},
{0x0659, 0.0000000000000000000000000000000000408132},
{0x0676, 0.0000000000000000000000000000000000462675},
{0x0695, 0.0000000000000000000000000000000000560476},
{0x069a, 0.0000000000000000000000000000000000579284},
{0x06b3, 0.0000000000000000000000000000000000673323},
{0x06b9, 0.0000000000000000000000000000000000695893},
{0x06cf, 0.0000000000000000000000000000000000778647},
{0x0751, 0.0000000000000000000000000000000001572341},
{0x0768, 0.0000000000000000000000000000000001745374},
{0x076a, 0.0000000000000000000000000000000001760420},
{0x07ba, 0.0000000000000000000000000000000002798617},
{0x07c2, 0.0000000000000000000000000000000002918988},
{0x07fe, 0.0000000000000000000000000000000003821767},
{0x0801, 0.0000000000000000000000000000000003881953},
{0x0838, 0.0000000000000000000000000000000005537049},
{0x08fd, 0.0000000000000000000000000000000015226884},
{0x0909, 0.0000000000000000000000000000000016490775},
{0x0917, 0.0000000000000000000000000000000018175964},
{0x0931, 0.000000000000000000000000000000002130560},
{0x0953, 0.0000000000000000000000000000000025398201},
{0x099f, 0.0000000000000000000000000000000038277858},
{0x09b3, 0.0000000000000000000000000000000043092683},
{0x09ec, 0.0000000000000000000000000000000056814933},
{0x0a6a, 0.0000000000000000000000000000000112666902},
{0x0ad7, 0.0000000000000000000000000000000207037469},
{0x0ae2, 0.0000000000000000000000000000000217630084},
{0x0b4c, 0.0000000000000000000000000000000392889709},
{0x0c5b, 0.0000000000000000000000000000001687114631},
{0x0cde, 0.0000000000000000000000000000003420451581},
{0x0ce8, 0.0000000000000000000000000000003574525977},
{0x0d3b, 0.0000000000000000000000000000005762382394},
{0x0da1, 0.0000000000000000000000000000009922391073},
{0x0dcc, 0.0000000000000000000000000000012572470677},
{0x0e4d, 0.0000000000000000000000000000025268200870},
{0x0e58, 0.0000000000000000000000000000026624055551},
{0x0e94, 0.0000000000000000000000000000036484816866},
{0x0eb8, 0.0000000000000000000000000000045359502050},
{0x0efe, 0.0000000000000000000000000000062615834352},
{0x0f61, 0.0000000000000000000000000000110933564797},
{0x0f7b, 0.0000000000000000000000000000123752554507},
{0x0ff0, 0.0000000000000000000000000000236658271566},
{0x10f0, 0.0000000000000000000000000000946633086265},
{0x10fe, 0.0000000000000000000000000001001853349631},
{0x1109, 0.0000000000000000000000000001080739440153},
{0x118a, 0.0000000000000000000000000002177256098410},
{0x11c1, 0.0000000000000000000000000003045003094153},
{0x11c3, 0.0000000000000000000000000003076557530362},
{0x11d2, 0.0000000000000000000000000003313215801928},
{0x1224, 0.0000000000000000000000000005174927538250},
{0x12d7, 0.0000000000000000000000000013568407569801},
{0x1306, 0.0000000000000000000000000016913177807938},
{0x1309, 0.0000000000000000000000000017291831042445},
{0x1351, 0.0000000000000000000000000026379508670591},
{0x1366, 0.0000000000000000000000000029030081312133},
{0x136c, 0.0000000000000000000000000029787387781145},
{0x139c, 0.0000000000000000000000000039379936388633},
{0x13a4, 0.0000000000000000000000000041399420305999},
{0x13cb, 0.0000000000000000000000000051244404403157},
{0x13f6, 0.0000000000000000000000000062099130458998},
{0x13fe, 0.0000000000000000000000000064118614376364},
{0x1423, 0.0000000000000000000000000082293969632656},
{0x1471, 0.0000000000000000000000000121673906021289},
{0x1566, 0.0000000000000000000000000464481300994132},
{0x1571, 0.0000000000000000000000000486695624085155},
{0x15ad, 0.0000000000000000000000000698741435408563},
{0x15bf, 0.0000000000000000000000000771442856433732},
{0x15d0, 0.0000000000000000000000000840105309624169},
{0x15ef, 0.0000000000000000000000000965313312500848},
{0x1659, 0.0000000000000000000000001752912040273506},
{0x16d0, 0.0000000000000000000000003360421238496675},
{0x173d, 0.0000000000000000000000006106919366114150},
{0x174c, 0.0000000000000000000000006591595506281939},
{0x1769, 0.0000000000000000000000007528636043939666},
{0x17c4, 0.0000000000000000000000012666203129718236},
{0x1882, 0.0000000000000000000000033604212384966749},
{0x18ae, 0.0000000000000000000000044977945807570880},
{0x18c1, 0.0000000000000000000000049889330694604482},
{0x18d1, 0.0000000000000000000000054025233757369620},
{0x18d2, 0.0000000000000000000000054283727698792441},
{0x18e5, 0.0000000000000000000000059195112585826043},
{0x1947, 0.0000000000000000000000102880588686282817},
{0x1998, 0.0000000000000000000000157164316385075258},
{0x19e9, 0.0000000000000000000000240916353406069310},
{0x1a1b, 0.0000000000000000000000320532487364298224},
{0x1a8a, 0.0000000000000000000000570754622661589096},
{0x1a8c, 0.0000000000000000000000579026428787119372},
{0x1b70, 0.0000000000000000000001985233470127266420},
{0x1b90, 0.0000000000000000000002382280164152719704},
{0x1bea, 0.0000000000000000000003871205266748169518},
{0x1c1d, 0.0000000000000000000005194694246833013798},
{0x1c7e, 0.0000000000000000000008404155023538761177},
{0x1c91, 0.0000000000000000000009595295105615121029},
{0x1cab, 0.0000000000000000000011315830779725418592},
{0x1d62, 0.0000000000000000000029910850949917480723},
{0x1e7d, 0.0000000000000000000133937084784586241115},
{0x1eca, 0.0000000000000000000213875819181710835615},
{0x1efb, 0.0000000000000000000265756587201036731383},
{0x1efc, 0.0000000000000000000266815378385104606807},
{0x1f0f, 0.0000000000000000000302814278643412371217},
{0x1f6b, 0.0000000000000000000497631856511901449203},
{0x1f85, 0.0000000000000000000563276909924109725480},
{0x1f8a, 0.0000000000000000000584452733605467233957},
{0x1f9c, 0.0000000000000000000660685698858354264473},
{0x1fdc, 0.0000000000000000000931736241979730372975},
{0x1ffc, 0.0000000000000000001067261513540418427226},
{0x2084, 0.0000000000000000002236166980751352895140},
{0x20fb, 0.0000000000000000004252105395216587702123},
{0x2153, 0.0000000000000000007148958074826294861737},
{0x21bb, 0.0000000000000000012671612890924333072462},
{0x2207, 0.0000000000000000018295911660692887323876},
{0x220c, 0.0000000000000000018973538018496327595130},
{0x2265, 0.0000000000000000031035287187397564423463},
{0x2268, 0.0000000000000000031441863002079628586216},
{0x2298, 0.0000000000000000041199682554449168492283},
{0x22a1, 0.000000000000000004363913744254155346880},
{0x2310, 0.0000000000000000078062556418956319248537},
{0x2313, 0.0000000000000000079688859677684575899548},
{0x232d, 0.0000000000000000093783487919996133541645},
{0x23e5, 0.0000000000000000248282297499180515387707},
{0x23f5, 0.0000000000000000265629532258948586331826},
{0x2452, 0.0000000000000000455364912443911862283130},
{0x2462, 0.0000000000000000490059381963448004171369},
{0x2472, 0.0000000000000000524753851482984146059607},
{0x24be, 0.0000000000000000823993651088983369845664},
{0x24e3, 0.0000000000000000984455572616838026078767},
{0x2509, 0.0000000000000001188285581044112859672168},
{0x250b, 0.0000000000000001205632815803880930616288},
{0x2546, 0.0000000000000001717376241217039023467805},
{0x254a, 0.0000000000000001752070710736575165356044},
{0x2550, 0.0000000000000001804112415015879378188401},
{0x2585, 0.0000000000000002307182223049153435567860},
{0x25d2, 0.0000000000000003642919299551294898265041},
{0x2608, 0.0000000000000004718447854656915296800435},
{0x261d, 0.0000000000000005447031714567174276453443},
{0x2622, 0.0000000000000005620504062164854985894635},
{0x26e1, 0.0000000000000015612511283791263849707320},
{0x2726, 0.0000000000000023037127760971998213790357},
{0x2731, 0.0000000000000024563684419831588456872851},
{0x2737, 0.0000000000000025396351688300455862190574},
{0x2750, 0.0000000000000028865798640254070051014423},
{0x275c, 0.0000000000000030531133177191804861649871},
{0x2776, 0.0000000000000034139358007223563618026674},
{0x2781, 0.0000000000000035804692544161298428662121},
{0x27c3, 0.0000000000000054123372450476381345652044},
{0x27e3, 0.0000000000000063005156647477633669041097},
{0x2804, 0.0000000000000073274719625260331667959690},
{0x2838, 0.0000000000000102140518265514401718974113},
{0x2887, 0.0000000000000149880108324396132957190275},
{0x28e0, 0.0000000000000248689957516035065054893494},
{0x28fe, 0.0000000000000281996648254789761267602444},
{0x29b4, 0.0000000000000799360577730112709105014801},
{0x29d6, 0.0000000000000950350909079133998602628708},
{0x29f9, 0.0000000000001105782132526655914261937141},
{0x2a58, 0.0000000000001918465386552270501852035522},
{0x2aac, 0.0000000000003055333763768430799245834351},
{0x2aea, 0.0000000000004156675004196586087346076965},
{0x2b19, 0.0000000000005435651928564766421914100647},
{0x2b80, 0.0000000000009094947017729282379150390625},
{0x2bff, 0.0000000000018118839761882554739713668823},
{0x2c4c, 0.0000000000028990143619012087583541870117},
{0x2c8d, 0.0000000000040074610296869650483131408691},
{0x2ccb, 0.0000000000057696070143720135092735290527},
{0x2cfd, 0.0000000000071906924858922138810157775879},
{0x2d31, 0.0000000000100612851383630186319351196289},
{0x2d68, 0.0000000000131876731757074594497680664062},
{0x2d77, 0.0000000000140403244586195796728134155273},
{0x2dab, 0.0000000000194404492503963410854339599609},
{0x2db1, 0.0000000000201225702767260372638702392578},
{0x2de3, 0.0000000000258069121628068387508392333984},
{0x2df1, 0.0000000000273985278909094631671905517578},
{0x2e6a, 0.0000000000532054400537163019180297851562},
{0x2eaa, 0.0000000000773070496506989002227783203125},
{0x2ecf, 0.0000000000941327016334980726242065429688},
{0x2f88, 0.0000000002473825588822364807128906250},
{0x2fbb, 0.0000000003401510184630751609802246093750},
{0x2fcd, 0.0000000003728928277269005775451660156250},
{0x3035, 0.000000000658474164083600044250488281250},
{0x3065, 0.000000000833097146824002265930175781250},
{0x30ad, 0.00000000125874066725373268127441406250},
{0x30ea, 0.0000000017025740817189216613769531250},
{0x3143, 0.0000000028376234695315361022949218750},
{0x317d, 0.0000000036816345527768135070800781250},
{0x31eb, 0.000000006839400157332420349121093750},
{0x31fa, 0.00000000727595761418342590332031250},
{0x325b, 0.00000001274747774004936218261718750},
{0x32da, 0.000000025378540158271789550781250},
{0x332e, 0.00000004051253199577331542968750},
{0x3333, 0.000000041676685214042663574218750},
{0x336e, 0.00000005541369318962097167968750},
{0x33aa, 0.0000000791624188423156738281250},
{0x3446, 0.000000184401869773864746093750},
{0x3456, 0.000000199303030967712402343750},
{0x345c, 0.00000020489096641540527343750},
{0x345d, 0.0000002058222889900207519531250},
{0x350e, 0.0000005289912223815917968750},
{0x3551, 0.00000077858567237854003906250},
{0x357c, 0.000000938773155212402343750},
{0x3684, 0.000003933906555175781250},
{0x369f, 0.00000473856925964355468750},
{0x36b2, 0.0000053048133850097656250},
{0x37ab, 0.000020384788513183593750},
{0x37c1, 0.000023007392883300781250},
{0x37e4, 0.0000271797180175781250},
{0x3814, 0.000035285949707031250},
{0x3863, 0.00005412101745605468750},
{0x3869, 0.00005555152893066406250},
{0x388c, 0.00006675720214843750},
{0x3895, 0.0000710487365722656250},
{0x38ab, 0.0000815391540527343750},
{0x38d0, 0.000099182128906250},
{0x38e6, 0.000109672546386718750},
{0x3930, 0.00016784667968750},
{0x393a, 0.00017738342285156250},
{0x395f, 0.000212669372558593750},
{0x3978, 0.000236511230468750},
{0x397a, 0.00023841857910156250},
{0x3a1a, 0.000587463378906250},
{0x3aac, 0.0013122558593750},
{0x3af3, 0.001853942871093750},
{0x3bcf, 0.0063171386718750},
{0x3c1d, 0.009582519531250},
{0x3c26, 0.01013183593750},
{0x3c2a, 0.01037597656250},
{0x3c71, 0.014709472656250},
{0x3c7a, 0.01525878906250},
{0x3cef, 0.02917480468750},
{0x3d0c, 0.03417968750},
{0x3d5e, 0.054199218750},
{0x3d61, 0.0549316406250},
{0x3e47, 0.19433593750},
{0x3e96, 0.292968750},
{0x3e9d, 0.3066406250},
{0x3eb1, 0.3457031250},
{0x3ef9, 0.4863281250},
{0x3f7b, 0.980468750},
{0x3f7d, 0.988281250},
{0x3fb7, 1.42968750},
{0x3ff0, 1.8750},
{0x402d, 2.7031250},
{0x4042, 3.031250},
{0x405d, 3.4531250},
{0x40a6, 5.18750},
{0x40b1, 5.531250},
{0x40b9, 5.781250},
{0x40f2, 7.56250},
{0x4128, 10.50},
{0x416d, 14.81250},
{0x41ef, 29.8750},
{0x41f5, 30.6250},
{0x4204, 33.0},
{0x4237, 45.750},
{0x429b, 77.50},
{0x429d, 78.50},
{0x42ee, 119.0},
{0x43b4, 360.0},
{0x43e7, 462.0},
{0x43f7, 494.0},
{0x4469, 932.0},
{0x446d, 948.0},
{0x447a, 1000.0},
{0x447f, 1020.0},
{0x44ca, 1616.0},
{0x4525, 2640.0},
{0x458b, 4448.0},
{0x45a2, 5184.0},
{0x464b, 12992.0},
{0x47a0, 81920.0},
{0x47a2, 82944.0},
{0x480e, 145408.0},
{0x4983, 1073152.0},
{0x49bb, 1531904.0},
{0x49f4, 1998848.0},
{0x49fd, 2072576.0},
{0x4a50, 3407872.0},
{0x4a72, 3964928.0},
{0x4aa4, 5373952.0},
{0x4af1, 7897088.0},
{0x4b04, 8650752.0},
{0x4b12, 9568256.0},
{0x4b13, 9633792.0},
{0x4b6f, 15663104.0},
{0x4c12, 38273024.0},
{0x4c24, 42991616.0},
{0x4c36, 47710208.0},
{0x4c46, 51904512.0},
{0x4c50, 54525952.0},
{0x4cf0, 125829120.0},
{0x4d8d, 295698432.0},
{0x4dcb, 425721856.0},
{0x4e25, 692060160.0},
{0x4e91, 1216348160.0},
{0x4ed0, 1744830464.0},
{0x4ef3, 2038431744.0},
{0x4efc, 2113929216.0},
{0x4f43, 3271557120.0},
{0x4fac, 5771362304.0},
{0x4fc2, 6509559808.0},
{0x4fea, 7851737088.0},
{0x50a1, 21609054208.0},
{0x50e1, 30198988800.0},
{0x50f6, 33017561088.0},
{0x51ae, 93415538688.0},
{0x5205, 142807662592.0},
{0x5218, 163208757248.0},
{0x521c, 167503724544.0},
{0x5362, 970662608896.0},
{0x546f, 4105988734976.0},
{0x5476, 4226247819264.0},
{0x54d2, 7215545057280.0},
{0x5511, 9964324126720.0},
{0x569d, 86311662780416.0},
{0x56f9, 136889197658112.0},
{0x5702, 142936511610880.0},
{0x570b, 152832116260864.0},
{0x573a, 204509162766336.0},
{0x578f, 314460325543936.0},
{0x5812, 642114790621184.0},
{0x584e, 905997581287424.0},
{0x5851, 919191720820736.0},
{0x5860, 985162418487296.0},
{0x5907, 2374945115996160.0},
{0x5938, 3236962232172544.0},
{0x59e3, 7986852464164864.0},
{0x5a27, 11751580277669888.0},
{0x5a5b, 15410754974908416.0},
{0x5aad, 24347585485471744.0},
{0x5ab7, 25754960369025024.0},
{0x5ada, 30680772461461504.0},
{0x5aef, 33636259716923392.0},
{0x5b09, 38562071809359872.0},
{0x5c1f, 179018085187977216.0},
{0x5d62, 1017813515785732096.0},
{0x5d70, 1080863910568919040.0},
{0x5dbb, 1684346260636565504.0},
{0x5dea, 2107684625609392128.0},
{0x5e0a, 2485986994308513792.0},
{0x5e2e, 3134505340649865216.0},
{0x5e3d, 3404721318292094976.0},
{0x5ea7, 6016809102166982656.0},
{0x5f1f, 11457157452030541824.0},
{0x5f51, 15060037153926938624.0},
{0x5f64, 16429131440647569408.0},
{0x5f99, 22049623775605948416.0},
{0x5fda, 31417111000536580096.0},
{0x5ffc, 36317027395115679744.0},
{0x604a, 58222535982645772288.0},
{0x607f, 73498745918686494720.0},
{0x608a, 79551583817872441344.0},
{0x60c1, 111256925194560733184.0},
{0x60eb, 135468276791304519680.0},
{0x614b, 234043065435189936128.0},
{0x616c, 272089475087215886336.0},
{0x61cc, 470391973879593566208.0},
{0x6270, 1106804644422573096960.0},
{0x6291, 1337388945343942492160.0},
{0x62bd, 1743217314965552627712.0},
{0x630c, 2582544170319337226240.0},
{0x6325, 3043712772162076016640.0},
{0x633f, 3523328118078524358656.0},
{0x63a0, 5902958103587056517120.0},
{0x63b3, 6603934378388019478528.0},
{0x63e0, 8264141345021879123968.0},
{0x63eb, 8669969714643489259520.0},
{0x63fc, 9297159013149614014464.0},
{0x6427, 12322425041237980479488.0},
{0x6469, 17192365476697302106112.0},
{0x648c, 20660353362554697809920.0},
{0x64b3, 26415737513552077914112.0},
{0x64c3, 28776920754986900520960.0},
{0x64ea, 34532304905984280625152.0},
{0x64ed, 34975026763753309863936.0},
{0x6503, 38664375578495220187136.0},
{0x6531, 52241179216745450176512.0},
{0x6566, 67884018191251149946880.0},
{0x657b, 74082124200017559289856.0},
{0x65af, 103301766812773489049600.0},
{0x65b5, 106843541674925722959872.0},
{0x65d9, 128094190847839126421504.0},
{0x6611, 171185785004024638996480.0},
{0x6613, 173546968245459461603328.0},
{0x6635, 213687083349851445919744.0},
{0x6699, 361261035939527858847744.0},
{0x66c0, 453347182355485940514816.0},
{0x6768, 1095589024025757689577472.0},
{0x6798, 1435599410792372144963584.0},
{0x67d3, 1992838655770990280179712.0},
{0x67d6, 2021172854668208151461888.0},
{0x681d, 2965646151242137194201088.0},
{0x6854, 4004566777473459141214208.0},
{0x6857, 4061235175267894883778560.0},
{0x6876, 4646808619143730890276864.0},
{0x689b, 5855734438758360064983040.0},
{0x68ed, 8953606851520847325167616.0},
{0x68fc, 9520290829465204750811136.0},
{0x6908, 10275869466724347985002496.0},
{0x6aaa, 102758694667243479850024960.0},
{0x6ad0, 125728285239921434169442304.0},
{0x6b26, 200681686056028443001225216.0},
{0x6b60, 270799383593676935134183424.0},
{0x6bd1, 505330992598914995027181568.0},
{0x6c4b, 981647765527078889861414912.0},
{0x6cb4, 1740853180245066011576893440.0},
{0x6d68, 4487532642409503496509325312.0},
{0x6d86, 5183873914507529901140082688.0},
{0x6ead, 26770453349546348444693561344.0},
{0x6f07, 41780476325881584277845442560.0},
{0x6f1e, 48898631551772520858515406848.0},
{0x6f69, 72110007288373401012873986048.0},
{0x6fb5, 112033573555326914878370742272.0},
{0x70a0, 396140812571321687967719751680.0},
{0x713a, 921027389228322924524948422656.0},
{0x713b, 925979149385464445624544919552.0},
{0x715c, 1089387234571134641911229317120.0},
{0x7178, 1228036518971097232699931230208.0},
{0x719a, 1525142128399588498675721043968.0},
{0x719e, 1564756209656720667472493019136.0},
{0x71a5, 1634080851856701962866843975680.0},
{0x71c4, 1941089981599476271041826783232.0},
{0x71e0, 2218388550399401452619230609408.0},
{0x721b, 3070091297427743081749828075520.0},
{0x7333, 14181841090053316429244367110144.0},
{0x734c, 16162545152909924869082965868544.0},
{0x7354, 16796370453024039569831317471232.0},
{0x7376, 19490127978509027048011811782656.0},
{0x73fc, 39930993907189226147146150969344.0},
{0x745d, 70037695662609674432692852097024.0},
{0x74f1, 152751897327501642880352736247808.0},
{0x7538, 233247710441994209875393389789184.0},
{0x7539, 234515361042222439276890092994560.0},
{0x7562, 286489035651579844738254924414976.0},
{0x7563, 287756686251808074139751627620352.0},
{0x759f, 403112890872576949675951619309568.0},
{0x760d, 714954938528721382444140607832064.0},
{0x768e, 1440051081859268600100254841307136.0},
{0x7691, 1470474696264746105736175718236160.0},
{0x770c, 2839537344511233859352615180042240.0},
{0x771c, 3164055898169660586135771200618496.0},
{0x776a, 4746083847254490879203656800927744.0},
{0x7773, 4928625533687355913019182062501888.0},
{0x7798, 6165852519510107808879964390948864.0},
{0x77ca, 8194093479875274851274689519550464.0},
{0x77db, 8883695406399431645688896063275008.0},
{0x77eb, 9532732513716285099255208104427520.0},
{0x7855, 17280612982311223201203058095685632.0},
{0x788c, 22716298756089870874820921440337920.0},
{0x789a, 24987928631698857962303013584371712.0},
{0x789b, 25150187908528071325694591594659840.0},
{0x78de, 36021559456085366672930318283964416.0},
{0x7900, 41538374868278621028243970633760768.0},
{0x7915, 48353264495105582290690247065862144.0},
{0x791a, 49975857263397715924606027168743424.0},
{0x7999, 99302677419478578395645742296334336.0},
{0x79c6, 128509347248736983806129784148197376.0},
{0x79d9, 140841052287757199423889712930095104.0},
{0x7a28, 218076468058462760398280845827244032.0},
{0x7a2d, 224566839131631294933943966238769152.0},
{0x7a4f, 268701362429177329776453185037139968.0},
{0x7aa2, 420576045541321037910970202666827776.0},
{0x7aa9, 438749084546192934610826939819098112.0},
{0x7b14, 768459935063154489022513456724574208.0},
{0x7b2e, 903459653385060007364306361284296704.0},
{0x7b4b, 1054036262282570008591690754831679488.0},
{0x7b93, 1526535276409239322787965920790708224.0},
{0x7b99, 1588842838711657254330331876741349376.0},
{0x7bbe, 1973072806243234498841588605103636480.0},
{0x7bc0, 1993841993677373809355710590420516864.0},
{0x7c49, 4174606674262001413338519048692957184.0},
{0x7c7f, 5296142795705524181101106255804497920.0},
{0x7c98, 6313832979978350396293083536331636736.0},
{0x7cda, 9055365721284739384157185598159847424.0},
{0x7d06, 11132284464698670435569384129847885824.0},
{0x7d1d, 13043049708639487002868606779000881152.0},
{0x7d3d, 15701505700209318748676220899561570304.0},
{0x7d4c, 16947656946257677379523540018574393344.0},
{0x7d58, 17944577943096364284201395313784651776.0},
{0x7d85, 22098415429924226387025792377160728576.0},
{0x7da9, 28079941410956347815092924148422279168.0},
{0x7db1, 29409169406741263687996731208702623744.0},
{0x7db2, 29575322906214378172109707091237666816.0},
{0x7dfc, 41870681867224849996469922398830854144.0},
{0x7e0f, 47519900849310742456311102405022318592.0},
{0x7e15, 49513742842988116265666812995442835456.0},
{0x7e50, 69119855780815625390997967134577917952.0},
{0x7e55, 70781390775546770232127725959928348672.0},
{0x7e73, 80750600743933639278906278912030932992.0},
{0x7f08, 180775007426748558714917760198126862336.0},
{0x7f67, 307051667026315566640779430924759597056.0},
{0x7f6a, 311039351013670314259490852105600630784.0},
{0x7f7b, 333636226942013884098855572130366488576.0},
{0x7f7e, 337623910929368631717566993311207522304.0},
{0x7f9a, std::numeric_limits<float>::quiet_NaN()},
{0x8022, -0.0000000000000000000000000000000000000031},
{0x8075, -0.0000000000000000000000000000000000000107},
{0x807d, -0.0000000000000000000000000000000000000115},
{0x8095, -0.0000000000000000000000000000000000000137},
{0x80c6, -0.0000000000000000000000000000000000000182},
{0x80fc, -0.0000000000000000000000000000000000000231},
{0x814d, -0.0000000000000000000000000000000000000377},
{0x8181, -0.0000000000000000000000000000000000000474},
{0x818a, -0.0000000000000000000000000000000000000507},
{0x819c, -0.0000000000000000000000000000000000000573},
{0x81be, -0.0000000000000000000000000000000000000698},
{0x8201, -0.0000000000000000000000000000000000000948},
{0x8232, -0.0000000000000000000000000000000000001308},
{0x8241, -0.0000000000000000000000000000000000001418},
{0x82c3, -0.0000000000000000000000000000000000002865},
{0x82f2, -0.0000000000000000000000000000000000003556},
{0x82fd, -0.0000000000000000000000000000000000003718},
{0x8340, -0.0000000000000000000000000000000000005642},
{0x8349, -0.0000000000000000000000000000000000005907},
{0x835b, -0.0000000000000000000000000000000000006436},
{0x83a0, -0.0000000000000000000000000000000000009404},
{0x83b6, -0.0000000000000000000000000000000000010697},
{0x83ca, -0.0000000000000000000000000000000000011872},
{0x842e, -0.0000000000000000000000000000000000020454},
{0x8445, -0.0000000000000000000000000000000000023157},
{0x847d, -0.0000000000000000000000000000000000029740},
{0x8486, -0.0000000000000000000000000000000000031503},
{0x84bc, -0.0000000000000000000000000000000000044199},
{0x84da, -0.0000000000000000000000000000000000051252},
{0x84e2, -0.0000000000000000000000000000000000053132},
{0x84fd, -0.0000000000000000000000000000000000059480},
{0x8546, -0.0000000000000000000000000000000000093099},
{0x8594, -0.0000000000000000000000000000000000139179},
{0x859a, -0.0000000000000000000000000000000000144821},
{0x85e3, -0.0000000000000000000000000000000000213470},
{0x85e5, -0.0000000000000000000000000000000000215351},
{0x86ee, -0.0000000000000000000000000000000000895256},
{0x86ef, -0.0000000000000000000000000000000000899018},
{0x871d, -0.0000000000000000000000000000000001181137},
{0x876b, -0.0000000000000000000000000000000001767944},
{0x8783, -0.0000000000000000000000000000000001971069},
{0x87a9, -0.0000000000000000000000000000000002542829},
{0x87fb, -0.0000000000000000000000000000000003776628},
{0x8822, -0.0000000000000000000000000000000004875010},
{0x885e, -0.0000000000000000000000000000000006680569},
{0x888a, -0.0000000000000000000000000000000008305573},
{0x8891, -0.0000000000000000000000000000000008726870},
{0x891c, -0.0000000000000000000000000000000018777817},
{0x89a0, -0.0000000000000000000000000000000038518599},
{0x89d0, -0.0000000000000000000000000000000050074179},
{0x8a05, -0.0000000000000000000000000000000064037171},
{0x8a3a, -0.0000000000000000000000000000000089555742},
{0x8a3f, -0.0000000000000000000000000000000091963155},
{0x8a7e, -0.0000000000000000000000000000000122296551},
{0x8ae4, -0.0000000000000000000000000000000219556014},
{0x8afb, -0.0000000000000000000000000000000241704208},
{0x8b18, -0.0000000000000000000000000000000292741352},
{0x8b86, -0.0000000000000000000000000000000516149225},
{0x8ba2, -0.0000000000000000000000000000000624001302},
{0x8be0, -0.0000000000000000000000000000000862816615},
{0x8c00, -0.0000000000000000000000000000000986076132},
{0x8c34, -0.0000000000000000000000000000001386669560},
{0x8c9f, -0.0000000000000000000000000000002449782889},
{0x8caa, -0.0000000000000000000000000000002619264724},
{0x8cb3, -0.0000000000000000000000000000002757931680},
{0x8d34, -0.0000000000000000000000000000005546678240},
{0x8d48, -0.0000000000000000000000000000006162975822},
{0x8d58, -0.0000000000000000000000000000006656013888},
{0x8d5f, -0.0000000000000000000000000000006871718042},
{0x8d6a, -0.0000000000000000000000000000007210681712},
{0x8d7f, -0.0000000000000000000000000000007857794173},
{0x8d91, -0.0000000000000000000000000000008936314942},
{0x8df0, -0.0000000000000000000000000000014791141973},
{0x8e06, -0.0000000000000000000000000000016516775203},
{0x8e1a, -0.0000000000000000000000000000018981965532},
{0x8e9f, -0.0000000000000000000000000000039196526228},
{0x8ed1, -0.0000000000000000000000000000051522477872},
{0x8f1d, -0.0000000000000000000000000000077406976325},
{0x8f23, -0.0000000000000000000000000000080365204719},
{0x8f4f, -0.0000000000000000000000000000102058879613},
{0x901b, -0.0000000000000000000000000000305683600773},
{0x9059, -0.0000000000000000000000000000427957041082},
{0x90c1, -0.0000000000000000000000000000761250773538},
{0x911c, -0.0000000000000000000000000001230623012145},
{0x9131, -0.0000000000000000000000000001396283802241},
{0x919d, -0.0000000000000000000000000002477023242394},
{0x9243, -0.0000000000000000000000000006153115060724},
{0x9268, -0.0000000000000000000000000007320629200451},
{0x92b7, -0.0000000000000000000000000011548923652436},
{0x9308, -0.0000000000000000000000000017165613297609},
{0x9319, -0.0000000000000000000000000019311314959810},
{0x9353, -0.0000000000000000000000000026631944160261},
{0x9411, -0.0000000000000000000000000073206292004510},
{0x941e, -0.0000000000000000000000000079769614735949},
{0x943d, -0.0000000000000000000000000095420615095534},
{0x9456, -0.0000000000000000000000000108042389579070},
{0x947d, -0.0000000000000000000000000127732357773386},
{0x94f8, -0.0000000000000000000000000250416005753358},
{0x95b2, -0.0000000000000000000000000718936274582221},
{0x9629, -0.0000000000000000000000001365171128139274},
{0x965a, -0.0000000000000000000000001760989975942969},
{0x966c, -0.0000000000000000000000001906392817993306},
{0x971a, -0.0000000000000000000000004976008372389307},
{0x9728, -0.0000000000000000000000005428372769879244},
{0x977b, -0.0000000000000000000000008110247412141014},
{0x97b9, -0.0000000000000000000000011955344790805478},
{0x98f2, -0.0000000000000000000000062555533824322718},
{0x9912, -0.0000000000000000000000075480230895463775},
{0x9973, -0.0000000000000000000000125628055531491078},
{0x9978, -0.0000000000000000000000128212994945719290},
{0x9994, -0.0000000000000000000000153028413322310120},
{0x9a97, -0.0000000000000000000000624521362477535895},
{0x9aa0, -0.0000000000000000000000661744490042422140},
{0x9aaf, -0.0000000000000000000000723783035983899216},
{0x9ac4, -0.0000000000000000000000810637000301967121},
{0x9ad9, -0.0000000000000000000000897490964620035027},
{0x9b02, -0.0000000000000000000001075334796318935977},
{0x9b19, -0.0000000000000000000001265586337206132343},
{0x9b75, -0.0000000000000000000002026592500754917803},
{0x9ba8, -0.0000000000000000000002779326858178172988},
{0x9bb5, -0.0000000000000000000002994393817441960183},
{0x9bc1, -0.0000000000000000000003192917164454686825},
{0x9be2, -0.0000000000000000000003738856368739685090},
{0x9c65, -0.0000000000000000000007576974410985733502},
{0x9c76, -0.0000000000000000000008139457227521792321},
{0x9cb0, -0.0000000000000000000011646703024746629662},
{0x9cef, -0.0000000000000000000015815693312013889144},
{0x9d01, -0.0000000000000000000017073007843094491209},
{0x9d33, -0.0000000000000000000023690452743518712608},
{0x9d91, -0.0000000000000000000038381180422460484114},
{0x9db1, -0.0000000000000000000046851509895003487505},
{0x9de7, -0.0000000000000000000061145190879919805726},
{0x9dea, -0.0000000000000000000061939284267970712294},
{0x9e48, -0.0000000000000000000105879118406787542384},
{0x9fb7, -0.0000000000000000000775035146737684810248},
{0x9ff7, -0.0000000000000000001046085689859060918749},
{0xa009, -0.0000000000000000001160435137738391464524},
{0xa0a4, -0.0000000000000000002778268066994105112144},
{0xa217, -0.0000000000000000020464316005663896191891},
{0xa225, -0.0000000000000000022361669807513528951404},
{0xa22f, -0.0000000000000000023716922523120409493913},
{0xa241, -0.0000000000000000026156377411212794470430},
{0xa281, -0.0000000000000000034965520062657517996740},
{0xa29a, -0.0000000000000000041741783640691920709287},
{0xa2ce, -0.0000000000000000055836411883003478351384},
{0xa2d4, -0.0000000000000000057462715141731735002395},
{0xa2f6, -0.0000000000000000066678433607858522691458},
{0xa394, -0.0000000000000000160461921527854656233103},
{0xa3f3, -0.0000000000000000263461127913977577463811},
{0xa403, -0.0000000000000000284060969191202161709953},
{0xa416, -0.0000000000000000325260651745651330202236},
{0xa432, -0.0000000000000000385975973404839578506653},
{0xa46c, -0.0000000000000000511743425413158092851518},
{0xa482, -0.0000000000000000563785129692462305683875},
{0xa4b0, -0.0000000000000000763278329429795121541247},
{0xa4d4, -0.0000000000000000919403442267707760038320},
{0xa4dc, -0.0000000000000000954097911787243901926558},
{0xa52c, -0.0000000000000001491862189340054101194255},
{0xa595, -0.0000000000000002584737979205442570673767},
{0xa604, -0.0000000000000004579669976578770729247481},
{0xa607, -0.0000000000000004683753385137379154912196},
{0xa62e, -0.0000000000000006036837696399288688553497},
{0xa641, -0.0000000000000006696032617270475384430028},
{0xa67b, -0.0000000000000008708311849403571613947861},
{0xa708, -0.0000000000000018873791418627661187201738},
{0xa72f, -0.0000000000000024286128663675299321766943},
{0xa74c, -0.0000000000000028310687127941491780802608},
{0xa779, -0.0000000000000034555691641457997320685536},
{0xa7a0, -0.0000000000000044408920985006261616945267},
{0xa81d, -0.0000000000000087152507433074788423255086},
{0xa822, -0.0000000000000089928064994637679774314165},
{0xa83e, -0.0000000000000105471187339389871340245008},
{0xa8c6, -0.0000000000000219824158875780995003879070},
{0xa8cd, -0.0000000000000227595720048157090786844492},
{0xa8fc, -0.0000000000000279776202205539448186755180},
{0xa909, -0.0000000000000304201108747292892076075077},
{0xa911, -0.0000000000000321964677141295396722853184},
{0xa934, -0.0000000000000399680288865056354552507401},
{0xa9b5, -0.0000000000000803801469828613335266709328},
{0xa9e9, -0.0000000000001034727858950645895674824715},
{0xaa3f, -0.0000000000001696420781627239193767309189},
{0xab0d, -0.0000000000005009326287108706310391426086},
{0xab40, -0.0000000000006821210263296961784362792969},
{0xab44, -0.0000000000006963318810448981821537017822},
{0xab4a, -0.0000000000007176481631177011877298355103},
{0xab69, -0.0000000000008277822871605167165398597717},
{0xab6a, -0.0000000000008313350008393172174692153931},
{0xab85, -0.0000000000009450218385609332472085952759},
{0xabba, -0.0000000000013216094885137863457202911377},
{0xac1f, -0.0000000000022595258997171185910701751709},
{0xac94, -0.0000000000042064129956997931003570556641},
{0xaca6, -0.0000000000047180037654470652341842651367},
{0xacbf, -0.0000000000054285465012071654200553894043},
{0xacf2, -0.0000000000068780536821577697992324829102},
{0xad7a, -0.0000000000142108547152020037174224853516},
{0xadaf, -0.0000000000198951966012828052043914794922},
{0xadfd, -0.0000000000287627699435688555240631103516},
{0xae3e, -0.0000000000432009983342140913009643554688},
{0xae45, -0.0000000000447926140623167157173156738281},
{0xae8a, -0.0000000000627551344223320484161376953125},
{0xaeda, -0.0000000000991349224932491779327392578125},
{0xafa2, -0.000000000294676283374428749084472656250},
{0xaffc, -0.00000000045838532969355583190917968750},
{0xb016, -0.00000000054569682106375694274902343750},
{0xb086, -0.0000000009749783203005790710449218750},
{0xb09d, -0.00000000114232534542679786682128906250},
{0xb0bd, -0.00000000137515598908066749572753906250},
{0xb0d1, -0.00000000152067514136433601379394531250},
{0xb121, -0.0000000023428583517670631408691406250},
{0xb13a, -0.000000002706656232476234436035156250},
{0xb259, -0.00000001263106241822242736816406250},
{0xb25c, -0.000000012805685400962829589843750},
{0xb2fa, -0.000000029103830456733703613281250},
{0xb3e2, -0.0000001052394509315490722656250},
{0xb3ff, -0.00000011874362826347351074218750},
{0xb44f, -0.0000001927837729454040527343750},
{0xb4c9, -0.000000374391674995422363281250},
{0xb4e9, -0.000000433996319770812988281250},
{0xb4fa, -0.00000046566128730773925781250},
{0xb5cc, -0.00000151991844177246093750},
{0xb5df, -0.0000016614794731140136718750},
{0xb630, -0.00000262260437011718750},
{0xb648, -0.000002980232238769531250},
{0xb717, -0.0000090003013610839843750},
{0xb76f, -0.0000142455101013183593750},
{0xb78a, -0.00001645088195800781250},
{0xb7f7, -0.000029444694519042968750},
{0xb86d, -0.00005650520324707031250},
{0xb885, -0.0000634193420410156250},
{0xb8cc, -0.00009727478027343750},
{0xb8d5, -0.0001015663146972656250},
{0xb95a, -0.00020790100097656250},
{0xb967, -0.000220298767089843750},
{0xb9fc, -0.000480651855468750},
{0xba87, -0.001029968261718750},
{0xbac9, -0.001533508300781250},
{0xbb04, -0.002014160156250},
{0xbb7b, -0.00382995605468750},
{0xbbb1, -0.0054016113281250},
{0xbc7c, -0.0153808593750},
{0xbc8d, -0.01721191406250},
{0xbcb7, -0.02233886718750},
{0xbce7, -0.02819824218750},
{0xbcfd, -0.03088378906250},
{0xbd14, -0.03613281250},
{0xbd44, -0.04785156250},
{0xbd75, -0.0598144531250},
{0xbd7e, -0.062011718750},
{0xbe39, -0.18066406250},
{0xbebd, -0.3691406250},
{0xbec2, -0.378906250},
{0xbee7, -0.4511718750},
{0xbf16, -0.58593750},
{0xbf74, -0.9531250},
{0xbf86, -1.0468750},
{0xbfab, -1.33593750},
{0xbfc1, -1.50781250},
{0xbfc2, -1.5156250},
{0xbfe1, -1.75781250},
{0xc01e, -2.468750},
{0xc02d, -2.7031250},
{0xc04a, -3.156250},
{0xc090, -4.50},
{0xc095, -4.656250},
{0xc0ce, -6.43750},
{0xc105, -8.31250},
{0xc175, -15.31250},
{0xc18f, -17.8750},
{0xc1b3, -22.3750},
{0xc1b6, -22.750},
{0xc2a0, -80.0},
{0xc327, -167.0},
{0xc352, -210.0},
{0xc380, -256.0},
{0xc3bb, -374.0},
{0xc3c4, -392.0},
{0xc464, -912.0},
{0xc4ad, -1384.0},
{0xc4c5, -1576.0},
{0xc4e7, -1848.0},
{0xc540, -3072.0},
{0xc569, -3728.0},
{0xc56b, -3760.0},
{0xc57a, -4000.0},
{0xc5b4, -5760.0},
{0xc5d0, -6656.0},
{0xc5d2, -6720.0},
{0xc5db, -7008.0},
{0xc5f5, -7840.0},
{0xc643, -12480.0},
{0xc655, -13632.0},
{0xc690, -18432.0},
{0xc6bc, -24064.0},
{0xc761, -57600.0},
{0xc7b4, -92160.0},
{0xc8a9, -346112.0},
{0xc8d1, -428032.0},
{0xc91b, -634880.0},
{0xca23, -2670592.0},
{0xca44, -3211264.0},
{0xcabe, -6225920.0},
{0xcac8, -6553600.0},
{0xcb88, -17825792.0},
{0xcbc4, -25690112.0},
{0xcbf5, -32112640.0},
{0xcbfc, -33030144.0},
{0xcc6e, -62390272.0},
{0xcc74, -63963136.0},
{0xcce7, -121110528.0},
{0xcceb, -123207680.0},
{0xccee, -124780544.0},
{0xcd4e, -216006656.0},
{0xcd5c, -230686720.0},
{0xcdfd, -530579456.0},
{0xce03, -549453824.0},
{0xce35, -759169024.0},
{0xce6b, -985661440.0},
{0xce94, -1241513984.0},
{0xceab, -1434451968.0},
{0xceb5, -1518338048.0},
{0xcee0, -1879048192.0},
{0xcf36, -3053453312.0},
{0xcf4e, -3456106496.0},
{0xcfe5, -7683964928.0},
{0xd023, -10938744832.0},
{0xd055, -14294188032.0},
{0xd059, -14562623488.0},
{0xd0ac, -23085449216.0},
{0xd0b9, -24830279680.0},
{0xd0bd, -25367150592.0},
{0xd14a, -54223962112.0},
{0xd204, -141733920768.0},
{0xd216, -161061273600.0},
{0xd26d, -254476812288.0},
{0xd37b, -1078036791296.0},
{0xd37c, -1082331758592.0},
{0xd471, -4140348473344.0},
{0xd4a6, -5703716569088.0},
{0xd4d2, -7215545057280.0},
{0xd4d3, -7249904795648.0},
{0xd5a6, -22814866276352.0},
{0xd5c2, -26663156973568.0},
{0xd67b, -68994354642944.0},
{0xd714, -162727720910848.0},
{0xd754, -233096465088512.0},
{0xd777, -271579372060672.0},
{0xd7a5, -362838837166080.0},
{0xd7bd, -415615395299328.0},
{0xd809, -602532372021248.0},
{0xd819, -672901116198912.0},
{0xd827, -734473767354368.0},
{0xd82e, -765260092932096.0},
{0xd859, -954376092909568.0},
{0xd8a6, -1460151441686528.0},
{0xd8fc, -2216615441596416.0},
{0xd93e, -3342515348439040.0},
{0xd97e, -4468415255281664.0},
{0xd9a7, -5875790138834944.0},
{0xd9e0, -7881299347898368.0},
{0xda46, -13933011347177472.0},
{0xda4e, -14495961300598784.0},
{0xda6e, -16747761114284032.0},
{0xda83, -18436610974547968.0},
{0xda8e, -19984723346456576.0},
{0xdb78, -69805794224242688.0},
{0xdb81, -72620543991349248.0},
{0xdbaa, -95701492081623040.0},
{0xdc01, -145241087982698496.0},
{0xdc2a, -191402984163246080.0},
{0xdc50, -234187180623265792.0},
{0xdcf1, -542683755098144768.0},
{0xdcf9, -560698153607626752.0},
{0xde68, -4179340454199820288.0},
{0xdf9c, -22481969339833516032.0},
{0xdfa6, -23923121220592074752.0},
{0xdff4, -35164105890508832768.0},
{0xe018, -43811017175060185088.0},
{0xe0b2, -102610013910009380864.0},
{0xe0d9, -125091983249842896896.0},
{0xe0ff, -146997491837372989440.0},
{0xe113, -169479461177206505472.0},
{0xe137, -210984635343052996608.0},
{0xe1ae, -401216683603182747648.0},
{0xe261, -1037629354146162278400.0},
{0xe277, -1139086446551564812288.0},
{0xe296, -1383505805528216371200.0},
{0xe2a6, -1531079758117892784128.0},
{0xe2d0, -1918461383665793368064.0},
{0xe2dc, -2029141848108050677760.0},
{0xe2e2, -2084482080329179332608.0},
{0xe327, -3080606260309495119872.0},
{0xe336, -3357307421415138394112.0},
{0xe34d, -3781582535110458081280.0},
{0xe3e5, -8448608785758974640128.0},
{0xe457, -15864199903390214389760.0},
{0xe496, -22136092888451461939200.0},
{0xe498, -22431240793630814765056.0},
{0xe51c, -46043073207979040833536.0},
{0xe53d, -55782954078897684086784.0},
{0xe547, -58734433130691212345344.0},
{0xe59a, -90905554795240670363648.0},
{0xe5ae, -102711471002414783397888.0},
{0xe5e8, -136948628003219711197184.0},
{0xe5ed, -139900107055013239455744.0},
{0xe6f5, -578489894151531538677760.0},
{0xe730, -831136500985057557610496.0},
{0xe73c, -887804898779493300174848.0},
{0xe743, -920861464159580816670720.0},
{0xe792, -1378931012997936402399232.0},
{0xe82c, -3248988140214315907022848.0},
{0xe899, -5780176575032445741563904.0},
{0xe89a, -5817955506895402903273472.0},
{0xe8eb, -8878048987794933001748480.0},
{0xe8ed, -8953606851520847325167616.0},
{0xe90d, -10653658785353919602098176.0},
{0xe953, -15942709246167922241437696.0},
{0xe9a5, -24934095029551726728314880.0},
{0xea47, -60144059525827801441632256.0},
{0xeaa2, -97922991388784963151200256.0},
{0xeae1, -136004154706645782154444800.0},
{0xeb36, -220024499169862509796524032.0},
{0xeb58, -261127977036759901736534016.0},
{0xeb85, -321574268017491360471842816.0},
{0xec33, -865590886844074489089622016.0},
{0xec5e, -1073526127817790707139084288.0},
{0xecc6, -1914938498269572612734582784.0},
{0xecd2, -2030995376952577013506375680.0},
{0xed02, -2514565704798428683388846080.0},
{0xed5f, -4313447324384996895351635968.0},
{0xed61, -4352132950612665028942233600.0},
{0xedb2, -6886041468524927779126378496.0},
{0xedda, -8433466517631653122750283776.0},
{0xeded, -9168493415957347660971638784.0},
{0xee2f, -13539969179683846756709171200.0},
{0xef22, -50136571591057901133414531072.0},
{0xef24, -50755541610700591270864093184.0},
{0xef46, -61278031944626323607506649088.0},
{0xef5a, -67467732141053224982002270208.0},
{0xef67, -71491037268730710875424423936.0},
{0xefc6, -122556063889252647215013298176.0},
{0xf003, -162170145146384816011785273344.0},
{0xf0a3, -403568452807033969617114497024.0},
{0xf0b7, -453086054378449180613079465984.0},
{0xf0e1, -557073017678421123704605900800.0},
{0xf14d, -1015110832214011825417281863680.0},
{0xf18c, -1386492843999625907887019130880.0},
{0xf1c1, -1911379420656627144444247801856.0},
{0xf21d, -3109705378684875250546600050688.0},
{0xf22a, -3367196906856234347725617889280.0},
{0xf22c, -3406810988113366516522389864448.0},
{0xf239, -3664302516284725613701407703040.0},
{0xf240, -3802951800684688204490109616128.0},
{0xf267, -4575426385198765496027163131904.0},
{0xf270, -4753689750855860255612637020160.0},
{0xf27f, -5050795360284351521588426833920.0},
{0xf2df, -8833940120340473641680150462464.0},
{0xf2f8, -9824292151768777861599449841664.0},
{0xf335, -14340297415081845104431455010816.0},
{0xf368, -18380933703309326321702196477952.0},
{0xf3ba, -29472876455306333584798349524992.0},
{0xf3c1, -30582070730506034311107964829696.0},
{0xf418, -48170722808672717256874721804288.0},
{0xf435, -57361189660327380417725820043264.0},
{0xf494, -93806144416888975710756037197824.0},
{0xf49b, -98242921517687778615994498416640.0},
{0xf4a0, -101412048018258352119736256430080.0},
{0xf4ec, -149582770826931069376610978234368.0},
{0xf50a, -174935782831495657406545042341888.0},
{0xf563, -287756686251808074139751627620352.0},
{0xf583, -332124457259796103192136239808512.0},
{0xf5a0, -405648192073033408478945025720320.0},
{0xf5f0, -608472288109550112718417538580480.0},
{0xf60c, -709884336127808464838153795010560.0},
{0xf614, -750449155335111805686048297582592.0},
{0xf6d9, -2200641441996206240998276764532736.0},
{0xf6f2, -2454171562041852121297617405607936.0},
{0xf700, -2596148429267413814265248164610048.0},
{0xf730, -3569704090242693994614716226338816.0},
{0xf77b, -5090884810516569276410760072790016.0},
{0xf7a0, -6490371073168534535663120411525120.0},
{0xf7ae, -7058278542070781307533643447533568.0},
{0xf7da, -8843130587192128304841001560702976.0},
{0xf7f2, -9816686248167408485190469622431744.0},
{0xf7f3, -9857251067374711826038364125003776.0},
{0xf7fa, -10141204801825835211973625643008000.0},
{0xf831, -14359945999385382660154653910499328.0},
{0xf84d, -16631575874994369747636746054533120.0},
{0xf85c, -17848520451213469973073581131694080.0},
{0xf8ac, -27908595614624698503351417769558016.0},
{0xf90e, -46081634619496595203208154921828352.0},
{0xf93f, -61983043748759504815582799930064896.0},
{0xf97c, -81778675521923535149355317185216512.0},
{0xf98e, -92163269238993190406416309843656704.0},
{0xf9dc, -142788163609707759784588649053552640.0},
{0xf9e7, -149927571790193147773818081506230272.0},
{0xfa00, -166153499473114484112975882535043072.0},
{0xfa45, -255720620282840260705126944214089728.0},
{0xfa78, -321922405229159312968890772411645952.0},
{0xfae3, -589325693443702935838211333366480896.0},
{0xfb2b, -887882762809455524478714872296636416.0},
{0xfb59, -1126728418302057595391117703440760832.0},
{0xfb82, -1349997183219055183417929045597224960.0},
{0xfb94, -1536919870126308978045026913449148416.0},
{0xfb96, -1557689057560448288559148898766028800.0},
{0xfb9e, -1640765807297005530615636840033550336.0},
{0xfbad, -1796534713053050359471551729910153216.0},
{0xfbc2, -2014611181111513119869832575737397248.0},
{0xfbde, -2305379805189463467067540370173722624.0},
{0xfbfd, -2627302210418622780036431142585368576.0},
{0xfc37, -3800761300447493824084323312989110272.0},
{0xfd39, -15369198701263089780450269134491484160.0},
{0xfd4a, -16781503446784562895410564136039350272.0},
{0xfd84, -21932261930451111902912816494625685504.0},
{0xfdcc, -33895313892515354759047080037148786688.0},
{0xff1b, -206030339346661960300090094343453409280.0},
{0xff45, -261857915169628426962049990875227881472.0},
{0xff51, -277808651119047417436895675598592016384.0}
};

// TEST_CASE(clang_bf16) {

//     std::set<uint16_t> samples = {0};
//     auto ns                    = migraphx::range(1, 65535);
//     std::sample(ns.begin(),
//                 ns.end(),
//                 std::inserter(samples, samples.begin()),
//                 1022,
//                 std::mt19937{std::random_device{}()});
//     samples.insert(65536);


//     for(uint16_t i : samples)
//     {

//         float f = migraphx::bit_cast<__bf16>(i);

//         std::cout << "{0x" << std::hex << std::setw(4) << std::setfill('0') << i  << ", ";

//         if(std::isfinite(f))
//         {
//             std::cout << std::fixed << std::setprecision(40) << static_cast<float>(f);
//         }
//         else if(std::isinf(f))
//         {
//             if(f < 0)
//                 std::cout << "-";
//             std::cout << "std::numeric_limits<float>::infinity()";
//         }
//         else if(std::isnan(f))
//         {
//             std::cout << "std::numeric_limits<float>::quiet_NaN()";
//         }
//         std::cout << "},\n";
//     }

// }


TEST_CASE(check_half_values)
{
    for(auto [x, f] : half_lut)
    {

        auto h = migraphx::bit_cast<migraphx::bf16>(x);
        if(std::isnan(f))
        {
            CHECK(std::isnan(h));
        }
        else if(std::isinf(f))
        {
            CHECK(std::isinf(h));
            CHECK((h < 0) == (f < 0));
            CHECK(bit_equal(x, migraphx::bf16(f)));
        }
        else
        {
            CHECK(bit_equal(x, migraphx::bf16(f)));
            CHECK(migraphx::float_equal(float(h), f));
        }
    }
}


TEST_CASE(check_flows)
{
    // check positive underflow
    CHECK(bit_equal(std::numeric_limits<migraphx::bf16>::min() *
                        std::numeric_limits<migraphx::bf16>::min(),
                    migraphx::bf16(0)));

    // check overflow
    CHECK(bit_equal(std::numeric_limits<migraphx::bf16>::infinity() +
                        std::numeric_limits<migraphx::bf16>::infinity(),
                    std::numeric_limits<migraphx::bf16>::infinity()));
    CHECK(bit_equal(std::numeric_limits<migraphx::bf16>::max() +
                        std::numeric_limits<migraphx::bf16>::max(),
                    std::numeric_limits<migraphx::bf16>::infinity()));
    CHECK(bit_equal(std::numeric_limits<migraphx::bf16>::max() /
                        std::numeric_limits<migraphx::bf16>::epsilon(),
                    std::numeric_limits<migraphx::bf16>::infinity()));
    CHECK(bit_equal(std::numeric_limits<migraphx::bf16>::max() +
                        std::numeric_limits<migraphx::bf16>::min(),
                    std::numeric_limits<migraphx::bf16>::max()));

    // check negative underflow
    CHECK(bit_equal(std::numeric_limits<migraphx::bf16>::lowest() +
                        std::numeric_limits<migraphx::bf16>::lowest(),
                    -std::numeric_limits<migraphx::bf16>::infinity()));
    CHECK(bit_equal(-std::numeric_limits<migraphx::bf16>::infinity() -
                        std::numeric_limits<migraphx::bf16>::infinity(),
                    -std::numeric_limits<migraphx::bf16>::infinity()));
    CHECK(bit_equal(std::numeric_limits<migraphx::bf16>::lowest() -
                        std::numeric_limits<migraphx::bf16>::min(),
                    std::numeric_limits<migraphx::bf16>::lowest()));
}

TEST_CASE(test_nan)
{
    float f_qnan = std::numeric_limits<float>::quiet_NaN();
    migraphx::bf16 bf16_qnan(f_qnan);
    EXPECT(bf16_qnan.is_nan());
    EXPECT(std::isnan(bf16_qnan));

    float f_snan = std::numeric_limits<float>::signaling_NaN();
    migraphx::bf16 bf16_snan(f_snan);
    EXPECT(bf16_snan.is_nan());
    EXPECT(std::isnan(bf16_snan));
}

TEST_CASE(test_bool)
{
    float zero  = 0.0;
    float two   = 2.0;
    float other = -0.375;
    migraphx::bf16 bf16_zero(zero);
    migraphx::bf16 bf16_two(two);
    migraphx::bf16 bf16_other(other);
    EXPECT(not static_cast<bool>(bf16_zero));
    EXPECT(static_cast<bool>(bf16_two));
    EXPECT(static_cast<bool>(bf16_other));
}

TEST_CASE(test_pos_infinity)
{
    float finf = std::numeric_limits<float>::infinity();
    migraphx::bf16 bf16_inf_1(finf);
    CHECK(bit_equal(bf16_inf_1, std::numeric_limits<migraphx::bf16>::infinity()));
}

TEST_CASE(test_neg_infinity)
{
    float finf = -1.0 * std::numeric_limits<float>::infinity();
    migraphx::bf16 bf16_neginf_1(finf);
    CHECK(bit_equal(bf16_neginf_1, -std::numeric_limits<migraphx::bf16>::infinity()));
}

TEST_CASE(test_numeric_max_1)
{
    float fmax = std::numeric_limits<float>::max(); // fp32 max is fp16 inf
    migraphx::bf16 bf16_inf(fmax);
    CHECK(bit_equal(bf16_inf, std::numeric_limits<migraphx::bf16>::max()));
}

TEST_CASE(test_numeric_lowest_1)
{
    float flowest = std::numeric_limits<float>::lowest();
    migraphx::bf16 bf16_neginf(flowest);
    CHECK(bit_equal(bf16_neginf, std::numeric_limits<migraphx::bf16>::lowest()));
}

TEST_CASE(test_max_eq_lowest)
{
    EXPECT(migraphx::float_equal(std::numeric_limits<migraphx::bf16>::lowest(),
                                 -1 * std::numeric_limits<migraphx::bf16>::max()));
}

TEST_CASE(test_isfinite)
{
    EXPECT(std::isfinite(migraphx::bf16(0.0)));
    EXPECT(std::isfinite(migraphx::bf16(-0.0)));
    EXPECT(not std::isfinite(migraphx::bf16(std::numeric_limits<migraphx::bf16>::quiet_NaN())));
}

TEST_CASE(test_binary_ops)
{
    auto a = migraphx::bf16(-1.0);
    auto b = migraphx::bf16(1.0);
    auto c = migraphx::bf16(0.0);
    auto d = migraphx::bf16(-0.0);
    EXPECT(migraphx::float_equal((c + d), c));
    // EXPECT(migraphx::float_equal((c + d), d));
    EXPECT(migraphx::float_equal((a + b), c));
    EXPECT(migraphx::float_equal((a + b), d));

    auto e = migraphx::bf16(10.0);
    auto f = migraphx::bf16(-10.0);
    EXPECT(e > f);
    EXPECT(f < e);
    EXPECT(f <= e);
    EXPECT(e >= f);
    EXPECT(e <= e);
    EXPECT(f >= f);
    EXPECT(not migraphx::float_equal(f, e));
}

TEST_CASE(test_stream_op)
{
    auto a = migraphx::bf16(-1.0);
    std::stringstream ss;
    ss << a;
    EXPECT(std::string("-1") == ss.str());
    ss     = std::stringstream();
    auto b = std::numeric_limits<migraphx::bf16>::quiet_NaN();
    ss << b;
    EXPECT(std::string("nan") == ss.str());
}

int main(int argc, const char* argv[]) { test::run(argc, argv); }
