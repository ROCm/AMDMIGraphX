<?xml version="1.0"?>
<rule>
    <pattern> [;{}] [*] \w+? (\+\+|\-\-) ; </pattern>
    <message>
        <id>UnusedDeref</id>
        <severity>style</severity>
        <summary>Redundant * found, "*p++" is the same as "*(p++)".</summary>
    </message>
</rule>
<rule>
    <pattern> if \( ([!] )*?(strlen) \( \w+? \) ([>] [0] )*?\) { </pattern>
    <message>
        <id>StrlenEmptyString</id>
        <severity>performance</severity>
        <summary>Using strlen() to check if a string is empty is not efficient.</summary>
    </message>
</rule>
<rule>
    <pattern> [;{}] [*] \w+? (\+\+|\-\-) ; </pattern>
    <message>
        <id>UnusedDeref</id>
        <severity>style</severity>
        <summary>Redundant * found, "*p++" is the same as "*(p++)".</summary>
    </message>
</rule>
<rule>
    <tokenlist>define</tokenlist>
    <pattern>define [0-9A-Z_^a-z]*[a-z]</pattern>
    <message>
        <id>defineUpperCase</id>
        <severity>style</severity>
        <summary>Macros must be uppercase</summary>
    </message>
</rule>
<rule>
    <tokenlist>define</tokenlist>
    <pattern>define (MIGRAPH|[^X]{7})[^X][^_]</pattern>
    <message>
        <id>definePrefix</id>
        <severity>style</severity>
        <summary>Macros must be prefixed with MIGRAPHX_</summary>
    </message>
</rule>
<rule>
    <pattern>mutable \w+</pattern>
    <message>
        <id>MutableVariable</id>
        <severity>style</severity>
        <summary>Do not create mutable variables.</summary>
    </message>
</rule>
<rule>
    <pattern>(memcpy|strcpy|strncpy|strcat|strncat) \(</pattern>
    <message>
        <id>useStlAlgorithms</id>
        <severity>style</severity>
        <summary>Use std::copy instead</summary>
    </message>
</rule>
<rule>
    <pattern>memset \(</pattern>
    <message>
        <id>useStlAlgorithms</id>
        <severity>style</severity>
        <summary>Use std::fill instead</summary>
    </message>
</rule>
<rule>
    <pattern>memcmp \(</pattern>
    <message>
        <id>useStlAlgorithms</id>
        <severity>style</severity>
        <summary>Use std::equal_range instead</summary>
    </message>
</rule>
<rule>
    <pattern>memchr \(</pattern>
    <message>
        <id>useStlAlgorithms</id>
        <severity>style</severity>
        <summary>Use std::find instead</summary>
    </message>
</rule>
<rule>
    <pattern>\\W(fclose|free|hipFree|hipHostFree|hipFreeArray|hipMemFree|hipStreamDestroy|hipEventDestroy|hipArrayDestroy|hipCtxDestroy|hipDestroyTextureObject|hipDestroySurfaceObject) \(</pattern>
    <message>
        <id>useManagePointer</id>
        <severity>style</severity>
        <summary>Use manage pointer for resource management</summary>
    </message>
</rule>
<rule>
    <tokenlist>raw</tokenlist>
    <pattern><![CDATA[] (__device__ |__host__ )+(\(|{)]]></pattern>
    <message>
        <id>LambdaAttribute</id>
        <severity>warning</severity>
        <summary>Attributes to lambdas must come after parameter list.</summary>
    </message>
</rule>
<rule>
    <tokenlist>raw</tokenlist>
    <pattern><![CDATA[hipLaunchKernelGGL \( (?!\( \w+ < \w+ > \))]]></pattern>
    <message>
        <id>UseDeviceLaunch</id>
        <severity>style</severity>
        <summary>Use device::launch instead</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[if (\([^()]*(?-1)*[^()]*\)) { [^{}]* (return|throw|break|continue) [^;]* ; } else {]]></pattern>
    <message>
        <id>UnnecessaryElseStatement</id>
        <severity>style</severity>
        <summary>Else statement is not necessary.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[\? (true|false) : (true|false)]]></pattern>
    <message>
        <id>RedundantConditionalOperator</id>
        <severity>style</severity>
        <summary>Conditional operator is redundant.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[switch (\([^()]*(?-1)*[^()]*\)) { }]]></pattern>
    <message>
        <id>EmptySwitchStatement</id>
        <severity>style</severity>
        <summary>Empty switch statement.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[(?:(?:\w+|<|>|::) )*(?:\w+|>)(?: &|\*)* (\w) ; \1 = [^;]+ ; return \1 ;]]></pattern>
    <message>
        <id>RedundantLocalVariable</id>
        <severity>style</severity>
        <summary>Variable is returned immediately after its declaration, can be simplified to just return expression.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[for \( ; [^;]+ ; \)]]></pattern>
    <message>
        <id>ForLoopShouldBeWhileLoop</id>
        <severity>style</severity>
        <summary>For loop should be written as a while loop.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[while (\([^()]*(?-1)*[^()]*\)) { }]]></pattern>
    <message>
        <id>EmptyWhileStatement</id>
        <severity>style</severity>
        <summary>Empty while statement.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[if \( \w+ (\||&) \w+ \)]]></pattern>
    <message>
        <id>BitwiseOperatorInConditional</id>
        <severity>style</severity>
        <summary>Bitwise operator found in if statement.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[else { }]]></pattern>
    <message>
        <id>EmptyElseBlock</id>
        <severity>style</severity>
        <summary>Empty else statement can be safely removed.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[for (\([^()]*(?-1)*[^()]*\)) { }]]></pattern>
    <message>
        <id>EmptyForStatement</id>
        <severity>style</severity>
        <summary>Empty for statement.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[if (\([^()]*(?-1)*[^()]*\)) { }]]></pattern>
    <message>
        <id>EmptyIfStatement</id>
        <severity>style</severity>
        <summary>Empty if statement.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[if (\([^()]*(?-1)*[^()]*\)) { return (true|false) ; } else { return (true|false) ; }]]></pattern>
    <message>
        <id>RedundantIfStatement</id>
        <severity>style</severity>
        <summary>The if statement is redundant.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[! !]]></pattern>
    <message>
        <id>DoubleNegative</id>
        <severity>style</severity>
        <summary>Double negative is always positive.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[~ ~]]></pattern>
    <message>
        <id>DoubleNegative</id>
        <severity>style</severity>
        <summary>Double negative is always positive.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[! \( !]]></pattern>
    <message>
        <id>DoubleNegative</id>
        <severity>style</severity>
        <summary>Double negative is always positive.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[~ \( ~]]></pattern>
    <message>
        <id>DoubleNegative</id>
        <severity>style</severity>
        <summary>Double negative is always positive.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[if \( \w+ != \w+ \) ({[^{}]*(?-1)*[^{}]*}) else { (?!if)]]></pattern>
    <message>
        <id>InvertedLogic</id>
        <severity>style</severity>
        <summary>It is cleaner to invert the logic.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[if \( ! \w+ \) ({[^{}]*(?-1)*[^{}]*}) else { (?!if)]]></pattern>
    <message>
        <id>InvertedLogic</id>
        <severity>style</severity>
        <summary>It is cleaner to invert the logic.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[\w+ != \w+ \?]]></pattern>
    <message>
        <id>InvertedLogic</id>
        <severity>style</severity>
        <summary>It is cleaner to invert the logic.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[! \w+ \?]]></pattern>
    <message>
        <id>InvertedLogic</id>
        <severity>style</severity>
        <summary>It is cleaner to invert the logic.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[catch (\([^()]*(?-1)*[^()]*\)) { }]]></pattern>
    <message>
        <id>EmptyCatchStatement</id>
        <severity>style</severity>
        <summary>An empty catch statement.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[if (\([^()]*(?-1)*[^()]*\)) { assert (\([^()]*(?-1)*[^()]*\)) ; }]]></pattern>
    <message>
        <id>ConditionalAssert</id>
        <severity>style</severity>
        <summary>The if condition should be included in assert.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[if \( (\w) . empty \( \) \) { for \( (?:(?:\w+|<|>|::) )*(?:\w+|>)(?: &|\*)* \w : \1 \) ({[^{}]*(?-1)*[^{}]*}) }]]></pattern>
    <message>
        <id>UnnecessaryEmptyCondition</id>
        <severity>style</severity>
        <summary>Unnecessary check for empty before for range loop.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[if \( ! (\w) . empty \( \) \) { for \( (?:(?:\w+|<|>|::) )*(?:\w+|>)(?: &|\*)* \w : \1 \) ({[^{}]*(?-1)*[^{}]*}) }]]></pattern>
    <message>
        <id>UnnecessaryEmptyCondition</id>
        <severity>style</severity>
        <summary>Unnecessary check for empty before for range loop.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><![CDATA[for \( (?:(?:\w+|<|>|::) )*(?:\w+|>)(?: &|\*)* (\w+) = \w+ ; \1 < \w+ ; (\1 \+\+|\+\+ \1|\1 \-\-|\-\- \1) \) { \w+ \[ \1 \] = \w+ \[ \1 \] ; }]]></pattern>
    <message>
        <id>useStlAlgorithm</id>
        <severity>style</severity>
        <summary>Considering using std::copy instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><![CDATA[for \( (?:(?:\w+|<|>|::) )*(?:\w+|>)(?: &|\*)* (\w+) = \w+ ; \1 < \w+ ; (\1 \+\+|\+\+ \1|\1 \-\-|\-\- \1) \) { \w+ \[ \1 \] = \w+ ; }]]></pattern>
    <message>
        <id>useStlAlgorithm</id>
        <severity>style</severity>
        <summary>Considering using std::fill instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><![CDATA[for \( (?:(?:\w+|<|>|::) )*(?:\w+|>)(?: &|\*)* (\w+) = \w+ ; \1 < \w+ ; (\1 \+\+|\+\+ \1|\1 \-\-|\-\- \1) \) { \w+ \[ \1 \] = (?:\w+ :: )*\w+ \( \) ; }]]></pattern>
    <message>
        <id>useStlAlgorithm</id>
        <severity>style</severity>
        <summary>Considering using std::generate instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><![CDATA[for \( (?:(?:\w+|<|>|::) )*(?:\w+|>)(?: &|\*)* (\w+) = \w+ ; \1 < \w+ ; (\1 \+\+|\+\+ \1|\1 \-\-|\-\- \1) \) { \w+ \[ \1 \] = (?:\w+ :: )*\w+ \( \w+ \[ \1 \] \) ; }]]></pattern>
    <message>
        <id>useStlAlgorithm</id>
        <severity>style</severity>
        <summary>Considering using std::transform instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><![CDATA[for \( (?:(?:\w+|<|>|::) )*(?:\w+|>)(?: &|\*)* (\w+) = \w+ ; \1 < \w+ ; (\1 \+\+|\+\+ \1|\1 \-\-|\-\- \1) \) { \w+ \[ \1 \] = (?:\w+ :: )*\w+ \( \w+ \[ \1 \] , \w+ \[ \1 \] \) ; }]]></pattern>
    <message>
        <id>useStlAlgorithm</id>
        <severity>style</severity>
        <summary>Considering using std::transform instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><![CDATA[for \( (?:(?:\w+|<|>|::) )*(?:\w+|>)(?: &|\*)* (\w+) : (?:[^()]*(\([^()]*(?-1)*[^()]*\)))*[^)]*\) { (?:(?<idx1>\w+) \+\+|\+\+ (?<idx2>\w+)) ; if (\([^()]*(?-1)*[^()]*\)) { \w+ = \g{idx1}|\g{idx2} ; (?:break ; )?(?:return [^;]*; )?} }]]></pattern>
    <message>
        <id>useStlAlgorithm</id>
        <severity>style</severity>
        <summary>Considering using std::find or std::find_if instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><![CDATA[for \( (?:(?:\w+|<|>|::) )*(?:\w+|>)(?: &|\*)* (\w+) : (?:[^()]*(\([^()]*(?-1)*[^()]*\)))*[^)]*\) { if (\([^()]*(?-1)*[^()]*\)) { \w+ = (?<idx>\w) ; (?:break ; )?(?:return [^;]*; )?} (?:(\g{idx}) \+\+|\+\+ (\g{idx})) ; }]]></pattern>
    <message>
        <id>useStlAlgorithm</id>
        <severity>style</severity>
        <summary>Considering using std::find or std::find_if instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><![CDATA[for \( (?:(?:\w+|<|>|::) )*(?:\w+|>)(?: &|\*)* (\w+) : (?:[^()]*(\([^()]*(?-1)*[^()]*\)))*[^)]*\) { (?:(?<idx1>\w+) \+\+|\+\+ (?<idx2>\w+)) ; if (\([^()]*(?-1)*[^()]*\)) { return \g{idx1}|\g{idx2} ; } }]]></pattern>
    <message>
        <id>useStlAlgorithm</id>
        <severity>style</severity>
        <summary>Considering using std::find or std::find_if instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><![CDATA[for \( (?:(?:\w+|<|>|::) )*(?:\w+|>)(?: &|\*)* (\w+) : (?:[^()]*(\([^()]*(?-1)*[^()]*\)))*[^)]*\) { if (\([^()]*(?-1)*[^()]*\)) { return (?<idx>\w+) ; } (?:(\g{idx}) \+\+|\+\+ (\g{idx})) ; }]]></pattern>
    <message>
        <id>useStlAlgorithm</id>
        <severity>style</severity>
        <summary>Considering using std::find or std::find_if instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern><![CDATA[do { } while \(]]></pattern>
    <message>
        <id>EmptyDoWhileStatement</id>
        <severity>style</severity>
        <summary>Empty do-while.</summary>
    </message>
</rule>
<rule>
    <tokenlist>normal</tokenlist>
    <pattern>goto</pattern>
    <message>
        <id>GotoStatement</id>
        <severity>style</severity>
        <summary>Goto considered harmful.</summary>
    </message>
</rule>
