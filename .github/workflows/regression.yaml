on:
  push:
    branches: [develop]
  schedule:
    - cron: "0 5 * * *"

env:
  TEST: false
  DOCKERBASE: rocm-migraphx:5.1
  MIOPENTUNE: miopen-rocm51
  REPORTS_DIR: migraphx-reports
  MAIL_TO: dl.dl-migraphx-perfrun@amd.com
  MAIL_CC: igor.mirosavljevic@htecgroup.com,vidoje.gavrilovic@htecgroup.com,jovica.zlatanovic@htecgroup.com,stefan.micic@htecgroup.com
  MAIL_FROM: GH Actions
  MAIL_SUBJECT: GH Actions send email test
  MAIL_BODY: Testing GH Actions workflow
  SCRIPTS_PATH: /home/htec/jz/source/rocm-migraphx/scripts/
  TEST_RESULTS_PATH: /home/htec/jz/source/rocm-migraphx/test-results/
  REPORTS_PATH: /home/htec/igor/rocm-migraphx/reports/
  PYTHON_PATH: /home/htec/anaconda3/bin/
  DOCKER_MOUNT: /home/htec/jz:/data
  DOCKER_WORKDIR: /data/source/rocm-migraphx/scripts/

name: MIGraphX Regression test

concurrency: benchmark

jobs: 
  check_image_version:
    name: Check Image Version
    runs-on: self-hosted
    outputs:
      image: ${{ steps.check_image.outputs.image }}
    steps:
      - name: Check new image
        id: check_image
        run: |
          if [ -z "$(docker images -q rocm-migraphx:`date +%Y%m%d`)" ]; then
            echo "::set-output name=image::true"
          fi
  build_image:
    name: Build New Image
    runs-on: self-hosted
    needs: check_image_version
    if: ${{ needs.check_image_version.outputs.image == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v1
        with:
          submodules: recursive
          token: ${{ secrets.GH_SUB_TOKEN }}
      - name: Docker build
        run: |
          cd ./rocm-migraphx/dockerfiles
          docker build -t "rocm-migraphx:$(date +%Y%m%d)" --no-cache --build-arg BRANCH=$GITHUB_REF_NAME --build-arg DOCKERBASE=${{ env.DOCKERBASE }} --build-arg MIOPENTUNE=${{ env.MIOPENTUNE }} -f dockerfile-daily .
  execute_scripts:
    name: Execute scripts
    runs-on: self-hosted
    if: ${{ always() }}
    needs: build_image
    steps:
# Docker runs the performance script inside `rocm-migraphx` docker.
# Attached volume provides access to the compiled version of `saved-modules` adn MRPC datasets. (Currently inside `/home/htec/jz` dir, but that should be changed)
# `workdir` parameter sets root context for execution of run_perf_mev.sh script. That's not necessary, but removing that parameter requires changes how the script imports the MRPC data
      - name: Execute perf script
        run: >
          docker run -e TZ=America/Chicago
          -e TARGET=gpu
          --device=/dev/dri
          --device=/dev/kfd
          --network=host
          --group-add=video 
          -v ${{ env.DOCKER_MOUNT }}
          --workdir ${{ env.DOCKER_WORKDIR }}
          rocm-migraphx:$(date +%Y%m%d) /bin/bash run_perf_mev.sh
      
      - name: Delete old images/containers
        if: ${{ github.event_name == 'schedule' }}
        run: |
          docker container prune -f
          docker rmi -f $(docker images --filter=reference="rocm-migraphx:20*" | grep -v $(date +%Y%m%d) | awk 'NR>1 {print $3}')
      
      - name: Execute report script
        if: ${{ github.event_name == 'schedule' }}
        run: |
            ${{ env.PYTHON_PATH }}python3 ${{ env.SCRIPTS_PATH }}report.py \
            -t '${{ env.TEST_RESULTS_PATH }}' \
            -r '${{ env.REPORTS_PATH }}'
            rm -rf $GITHUB_WORKSPACE/${{ env.REPORTS_DIR }}/
            git clone https://${{ secrets.GH_SUB_TOKEN }}@github.com/migraphx-benchmark/migraphx-reports.git $GITHUB_WORKSPACE/${{ env.REPORTS_DIR }}
            cd $GITHUB_WORKSPACE/${{ env.REPORTS_DIR }}/
            cp -r /home/htec/igor/rocm-migraphx/reports/* $GITHUB_WORKSPACE/${{ env.REPORTS_DIR }}/
            git add .
            git config --local user.email github-actions
            git config --local user.name github-actions@github.com
            git commit -m "Push report" -a
            git push
          
      - name: Execute comment script
        id: auto_comment
        if: ${{ github.event_name != 'schedule' }}
        run: |
            ${{ env.PYTHON_PATH }}python3 ${{ env.SCRIPTS_PATH }}comment.py -t '${{ env.TEST_RESULTS_PATH }}' -r '${{ env.SCRIPTS_PATH }}'
            body="$(cat ${{ env.SCRIPTS_PATH }}temp.md)"
            body="${body//'%'/'%25'}"
            body="${body//$'\n'/'%0A'}"
            body="${body//$'\r'/'%0D'}"
            echo "::set-output name=body::$body"

      - name: Create comment
        if: ${{ github.event_name != 'schedule' }} 
        uses: peter-evans/create-or-update-comment@v2.0.0
        with:
          token: ${{ secrets.GH_SUB_TOKEN }}
          issue-number: 1
          body: ${{ steps.auto_comment.outputs.body}}

      - name: Get latest report
        id: last_report
        if: ${{ github.event_name == 'schedule' }}
        run: |
          cd ${{ env.REPORTS_PATH }}
          latest="$(readlink -f $(ls -tp | grep -v /$ | head -1))"
          echo "::set-output name=latest::$latest"

      - name: Send mail
        if: ${{ github.event_name == 'schedule' }}
        uses: dawidd6/action-send-mail@v3
        with:
          # Required mail server address:
          server_address: smtp.gmail.com
          # Required mail server port:
          server_port: 465
          # Optional (recommended): mail server username:
          username: ${{secrets.MAIL_USERNAME}}
          # Optional (recommended) mail server password:
          password: ${{secrets.MAIL_PASSWORD}}
          # Required mail subject:
          subject: ${{ env.MAIL_SUBJECT }}
          # Required recipients' addresses:
          to: ${{ env.MAIL_TO }}
          # Required sender full name (address can be skipped):
          from: ${{ env.MAIL_FROM }}
          # Optional whether this connection use TLS (default is true if server_port is 465)
          secure: true
          # Optional plain body:
          body: ${{ env.MAIL_BODY }}
          # Optional HTML body read from file:
          #html_body: file://README.html
          # Optional carbon copy recipients:
          cc: ${{ env.MAIL_CC }}
          # Optional blind carbon copy recipients:
          #bcc: r2d2@example.com,hansolo@example.com
          # Optional recipient of the email response:
          #reply_to: luke@example.com
          # Optional Message ID this message is replying to:
          #in_reply_to: <random-luke@example.com>
          # Optional unsigned/invalid certificates allowance:
          ignore_cert: true
          # Optional converting Markdown to HTML (set content_type to text/html too):
          #convert_markdown: true
          # Optional attachments:
          attachments: ${{ steps.last_report.outputs.latest}}
          # Optional priority: 'high', 'normal' (default) or 'low'
          priority: normal