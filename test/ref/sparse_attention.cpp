/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2025 Advanced Micro Devices, Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
#include "migraphx/module.hpp"
#include <migraphx/instruction.hpp>
#include <migraphx/literal.hpp>
#include <migraphx/make_op.hpp>
#include <migraphx/program.hpp>
#include <migraphx/register_target.hpp>
#include <migraphx/verify.hpp>
#include <migraphx/stringutils.hpp>

#include <test.hpp>

TEST_CASE(sparse_attention_token_generation)
{
    using namespace migraphx;
    migraphx::program p;
    auto* mm = p.get_main_module();

    const size_t batch_size                = 1;
    const size_t sequence_length           = 1;
    const size_t num_heads                 = 4;
    const size_t kv_num_heads              = 2;
    const size_t head_size                 = 8;
    const size_t max_cache_sequence_length = 16;
    const size_t sparse_block_size         = 4;
    const size_t num_layouts               = 4;
    const size_t max_blocks                = 4;
    const size_t max_nnz_blocks            = 10;
    const size_t total_sequence_length     = 16;
    const float scale                      = 1.0;
    const bool do_rotary                   = false;
    const bool rotary_interleaved          = false;

    shape qkv_shape{shape::float_type,
                    {batch_size, num_heads + 2 * kv_num_heads, sequence_length, head_size}};
    shape past_key_shape(shape::float_type,
                         {batch_size, kv_num_heads, max_cache_sequence_length, head_size});
    shape past_value_shape(shape::float_type,
                           {batch_size, kv_num_heads, max_cache_sequence_length, head_size});
    shape block_row_indices_shape(shape::int32_type, {num_layouts, max_blocks + 1});
    shape block_col_indices_shape(shape::int32_type, {num_layouts, max_nnz_blocks});
    shape total_sequence_len_shape(shape::int32_type, {1});
    shape key_total_sequence_lens_shape(shape::int32_type, {batch_size});

    std::vector<float> qkv_val{
        -0.03329f, 1.16675f,  -0.50649f, 0.12510f,  1.53476f,  -0.21014f, 0.10418f,  -0.34930f,
        0.75385f,  -0.20811f, 0.40406f,  2.26649f,  -0.74282f, 1.37404f,  1.14579f,  0.38196f,
        -0.44749f, -1.03810f, -2.33227f, -2.34319f, 0.02348f,  0.42810f,  -0.42638f, 0.10718f,
        0.48419f,  -0.96930f, -0.74856f, -0.29378f, 0.43973f,  1.82342f,  0.51128f,  1.51880f,
        1.60275f,  -2.29640f, -0.57038f, -0.48087f, -0.66250f, 1.96522f,  0.49518f,  1.04485f,
        -2.05651f, 0.45852f,  0.61937f,  -0.13846f, 0.01193f,  -0.28241f, 0.02750f,  -0.53546f,
        0.66108f,  0.19508f,  -0.44328f, -0.01588f, 0.23904f,  -1.30077f, 0.10052f,  -1.27191f,
        0.28916f,  2.17363f,  0.20315f,  -0.52204f, -0.55325f, -1.40188f, -0.82835f, -0.68602f};

    std::vector<float> past_key_val{
        0.76385f,  0.16589f,  -0.44249f, 2.87575f,  -0.08891f, -0.50259f, 0.38893f,  -0.95843f,
        0.93818f,  -1.84188f, 0.86566f,  -1.42383f, 2.37577f,  0.32822f,  -0.70855f, 1.27896f,
        0.69130f,  -0.12172f, -0.70066f, 1.23278f,  1.45378f,  -0.13908f, -0.84191f, 0.93713f,
        -1.60074f, -0.25489f, -0.85850f, 0.41723f,  -0.23319f, -0.02028f, -1.08938f, 0.05685f,
        0.87953f,  0.35425f,  -0.64364f, 0.75432f,  1.27093f,  0.10528f,  0.12159f,  -0.53918f,
        0.42191f,  0.00287f,  0.48949f,  -0.97898f, -0.46446f, -0.46296f, -0.39218f, -0.89881f,
        -0.63716f, 1.22591f,  -0.12277f, 1.50592f,  0.13477f,  -0.29951f, 0.89537f,  -0.70056f,
        -0.92031f, -0.37414f, -0.47729f, 1.38291f,  -0.40654f, 1.35620f,  -0.93808f, -0.61874f,
        -1.75391f, 0.74084f,  -1.12135f, 0.02336f,  -1.01463f, -0.76252f, 0.57324f,  2.43859f,
        0.42272f,  -0.98665f, -0.59967f, -0.81058f, 0.27267f,  0.94463f,  0.28715f,  1.29446f,
        -0.82678f, -0.33689f, -0.17825f, 1.23543f,  0.62783f,  0.10045f,  0.95923f,  -0.21368f,
        0.65439f,  -1.01701f, 0.20711f,  1.09200f,  -0.05349f, 0.35872f,  -0.23862f, 0.64003f,
        0.99530f,  0.00762f,  2.20042f,  -0.52028f, -1.13380f, 0.16808f,  -0.11888f, -0.42789f,
        1.59955f,  -0.71159f, 0.67671f,  -0.40985f, -0.00057f, 2.17165f,  -0.22338f, -0.59890f,
        -0.50430f, 1.37838f,  -1.16726f, -0.71343f, -0.18745f, 0.95503f,  0.30581f,  -1.36015f,
        -0.27401f, 1.84979f,  1.10632f,  -0.25408f, 0.83684f,  0.14570f,  0.07039f,  0.47457f,
        -0.20638f, 0.20420f,  0.70196f,  2.13317f,  -0.70185f, 0.21318f,  -1.08773f, 0.02084f,
        -1.45512f, 0.98927f,  0.89684f,  -0.36210f, 0.02677f,  1.16851f,  -0.12186f, 0.31704f,
        1.65360f,  -0.82799f, -1.09955f, -1.04954f, -1.73744f, -1.20443f, -2.79329f, 0.30787f,
        0.54455f,  -1.33252f, -0.30251f, 0.24008f,  2.00492f,  -1.73048f, 0.92799f,  -0.56775f,
        1.25751f,  0.27436f,  0.76621f,  -0.57721f, -1.08109f, 0.67550f,  -0.40030f, -0.60653f,
        -1.89459f, -1.11652f, -0.81427f, -1.43430f, 0.19945f,  0.88157f,  -0.57114f, -0.60026f,
        -0.51944f, -1.27501f, -0.23303f, -0.96548f, 0.39814f,  -1.28721f, 0.69327f,  0.46423f,
        -0.18173f, 0.44690f,  -0.85166f, 0.23460f,  0.02631f,  -0.09945f, -0.91935f, -1.41658f,
        -0.45733f, 0.32043f,  0.08780f,  0.61976f,  1.32688f,  0.55391f,  -0.38564f, 0.63408f,
        0.54804f,  -0.16741f, -0.49355f, -0.19196f, -1.98001f, 0.59593f,  -0.90306f, -0.81852f,
        0.06709f,  0.09997f,  0.00319f,  0.23375f,  0.51767f,  1.45616f,  -1.29752f, 1.68701f,
        0.05529f,  0.00466f,  -2.83786f, -0.23337f, -0.39945f, -0.79932f, 0.20436f,  1.07591f,
        0.99903f,  0.16540f,  1.94998f,  -0.58538f, -0.55157f, 0.65130f,  -0.02183f, 1.65474f,
        0.45864f,  0.37899f,  0.01364f,  0.51625f,  0.43740f,  0.06678f,  1.12735f,  -0.18184f,
        0.33223f,  0.22244f,  1.59270f,  -0.24772f, -1.57917f, -0.73295f, 0.83161f,  0.54219f,
        -0.46545f, -0.62854f, 0.89545f,  -0.44489f, 1.73863f,  -0.70637f, -0.15865f, 1.47569f};

    std::vector<float> past_value_val{
        3.51827f,  0.17044f,  -0.54399f, 1.66759f,  -0.09451f, -1.98674f, 0.09971f,  -0.06976f,
        -2.44890f, -0.00540f, -0.08205f, -0.71392f, -1.36729f, 0.95732f,  0.25542f,  1.87007f,
        0.31369f,  1.18265f,  0.38700f,  1.66296f,  0.59392f,  -0.91786f, -0.60457f, 0.22542f,
        -0.61538f, 0.87161f,  -0.40992f, -0.62723f, -0.83298f, 0.54662f,  -0.90864f, -1.40580f,
        -1.41908f, 0.07712f,  -1.15486f, 1.14059f,  1.83738f,  -0.99904f, -1.82905f, 0.08421f,
        0.32739f,  -0.43219f, -0.50271f, 1.48132f,  -0.28586f, -0.58438f, -0.10836f, 1.21794f,
        0.72767f,  1.25814f,  0.40609f,  -1.17752f, -0.40359f, -1.61168f, -1.71160f, -3.35542f,
        -0.44499f, 1.84137f,  0.56488f,  -0.74056f, -1.83948f, -0.39137f, 0.91220f,  1.70281f,
        1.52037f,  0.13442f,  -0.95315f, 0.44645f,  0.27345f,  0.35522f,  0.11271f,  -0.98679f,
        -0.04066f, 0.16398f,  -0.16782f, 0.50444f,  -0.18525f, -0.32975f, 1.44748f,  -0.47093f,
        -0.32312f, 0.09587f,  0.18454f,  -2.03755f, -0.78669f, -0.52518f, 0.65142f,  -0.03312f,
        0.15623f,  -0.29538f, 0.37195f,  0.96804f,  -1.39667f, 1.31413f,  -1.12619f, -0.89370f,
        0.04390f,  0.91847f,  0.33345f,  -0.41038f, -1.68900f, 0.26064f,  1.01668f,  0.60009f,
        2.06636f,  1.00074f,  0.58291f,  0.25153f,  0.33245f,  -0.17361f, 0.34339f,  1.17431f,
        1.19287f,  -0.81114f, 0.03131f,  -1.87341f, -1.12230f, 0.84082f,  1.00635f,  0.05051f,
        -0.69670f, 1.57332f,  -1.57973f, -1.88399f, 0.93476f,  -0.35466f, -0.39725f, 1.57442f,
        0.29155f,  0.29632f,  1.77290f,  0.61604f,  1.05230f,  -0.39919f, -1.68702f, 0.50293f,
        0.27108f,  1.08310f,  -0.01435f, 1.44720f,  -0.05727f, 1.07322f,  1.66356f,  -0.74269f,
        0.33795f,  -0.47729f, -0.67558f, -2.13081f, -0.17721f, -0.33928f, -1.15167f, -1.46648f,
        2.12634f,  -0.48589f, 0.08483f,  -1.29051f, 0.37948f,  2.16645f,  -0.32016f, 2.56183f,
        0.31167f,  -0.02995f, -1.92315f, 0.19336f,  0.90484f,  -0.26553f, 0.39862f,  -1.06318f,
        -1.05971f, 0.38424f,  0.59913f,  0.18560f,  -1.04411f, -0.45747f, 1.15776f,  -0.37921f,
        -1.56293f, 0.97964f,  1.89682f,  1.33685f,  0.92364f,  0.57161f,  1.30631f,  0.70533f,
        -1.44685f, 1.07021f,  -0.34614f, -0.70411f, 1.40477f,  0.93634f,  1.05304f,  -0.15739f,
        0.30893f,  0.83276f,  -0.50801f, -0.70749f, 0.49576f,  0.67996f,  -0.73131f, -0.23620f,
        -0.24573f, 0.64957f,  -0.21404f, -0.48317f, 1.11645f,  0.19945f,  -0.68076f, -0.14517f,
        1.42660f,  0.47421f,  1.40327f,  -0.86718f, -0.33979f, -2.38294f, 0.52184f,  0.15419f,
        -0.58230f, 3.45063f,  -0.07067f, 0.76321f,  -0.09428f, -0.25247f, 1.05917f,  1.48212f,
        0.21344f,  0.22970f,  -0.28166f, 0.24400f,  -0.13917f, -0.03468f, 1.23776f,  0.45723f,
        -0.54074f, -0.52076f, -0.81906f, -1.09086f, -0.58955f, 0.46920f,  -0.00467f, -0.24455f,
        0.38190f,  -0.73470f, 0.11403f,  1.56294f,  -0.31808f, -1.34281f, 0.47457f,  -0.25326f,
        0.08485f,  -1.12897f, -1.04603f, -1.27035f, 1.51314f,  -1.94031f, -0.74954f, 1.14497f};

    // layout 2 - dense
    // layout 3 - sparse, but with no zero blocks on used row(row 3)
    // clang-format off
    std::vector<int> bri_val{/*layout 1*/ 0, 1, 3, 6, 9,
                             /*layout 2*/ 0, 1, 3, 6, 10,
                             /*layout 3*/ 0, 1, 3, 5, 9,
                             /*layout 4*/ 0, 1, 3, 5, 8};

    std::vector<int> bci_val{/*layout 1*/ 0, 0, 1, 0, 1, 2, 0, 2,  3, -1,
                             /*layout 2*/ 0, 0, 1, 0, 1, 2, 0, 1,  2,  3,
                             /*layout 3*/ 0, 0, 1, 1, 2, 0, 1, 2,  3, -1,
                             /*layout 4*/ 0, 0, 1, 1, 2, 1, 2, 3, -1, -1};
    // clang-format on

    std::vector<int> tsl_val(total_sequence_len_shape.elements(), total_sequence_length);

    std::vector<int> ktsl_val(key_total_sequence_lens_shape.elements(), total_sequence_length);

    auto qkv        = mm->add_literal(literal{qkv_shape, qkv_val});
    auto k          = mm->add_literal(literal{});
    auto v          = mm->add_literal(literal{});
    auto past_key   = mm->add_literal(literal{past_key_shape, past_key_val});
    auto past_value = mm->add_literal(literal{past_value_shape, past_value_val});
    auto bri        = mm->add_literal(literal{block_row_indices_shape, bri_val});
    auto bci        = mm->add_literal(literal{block_col_indices_shape, bci_val});
    auto tsl        = mm->add_literal(literal{total_sequence_len_shape, tsl_val});
    auto ktsl       = mm->add_literal(literal{key_total_sequence_lens_shape, ktsl_val});

    auto sparse_attn = mm->add_instruction(make_op("sparse_attention",
                                                   {{"do_rotary", do_rotary},
                                                    {"rotary_interleaved", rotary_interleaved},
                                                    {"num_heads", num_heads},
                                                    {"kv_num_heads", kv_num_heads},
                                                    {"scale", scale},
                                                    {"sparse_block_size", sparse_block_size}}),
                                           qkv,
                                           k,
                                           v,
                                           past_key,
                                           past_value,
                                           bri,
                                           bci,
                                           tsl,
                                           ktsl);
    auto attn_output =
        mm->add_instruction(migraphx::make_op("get_tuple_elem", {{"index", 0}}), sparse_attn);
    auto present_key_output =
        mm->add_instruction(migraphx::make_op("get_tuple_elem", {{"index", 1}}), sparse_attn);
    auto present_val_output =
        mm->add_instruction(migraphx::make_op("get_tuple_elem", {{"index", 2}}), sparse_attn);
    mm->add_return({attn_output, present_key_output, present_val_output});

    p.compile(migraphx::make_target("ref"));
    auto results = p.eval({});

    std::vector<float> attn_result(batch_size * sequence_length * num_heads * head_size);
    results[0].visit([&](auto output) { attn_result.assign(output.begin(), output.end()); });
    std::vector<float> present_key_result(past_key_shape.elements());
    results[1].visit([&](auto output) { present_key_result.assign(output.begin(), output.end()); });
    std::vector<float> present_val_result(past_value_shape.elements());
    results[2].visit([&](auto output) { present_val_result.assign(output.begin(), output.end()); });

    std::vector<float> attn_gold{
        0.76145f,  0.20335f, 0.06977f,  -0.09397f, -0.35240f, -0.24121f, 0.19932f, 0.10970f,
        2.63507f,  0.25335f, -0.37144f, 1.15740f,  -0.18500f, -1.55893f, 0.03272f, -0.23120f,
        -0.82362f, 1.04810f, 0.33664f,  0.12792f,  -0.71474f, -0.38591f, 0.92792f, -0.01799f,
        0.98146f,  0.67085f, 1.01611f,  -0.58025f, -0.28115f, -1.77053f, 0.60018f, 0.23611f};

    std::vector<float> present_key_gold{
        0.76385f,  0.16589f,  -0.44249f, 2.87575f,  -0.08891f, -0.50259f, 0.38893f,  -0.95843f,
        0.93818f,  -1.84188f, 0.86566f,  -1.42383f, 2.37577f,  0.32822f,  -0.70855f, 1.27896f,
        0.69130f,  -0.12172f, -0.70066f, 1.23278f,  1.45378f,  -0.13908f, -0.84191f, 0.93713f,
        -1.60074f, -0.25489f, -0.85850f, 0.41723f,  -0.23319f, -0.02028f, -1.08938f, 0.05685f,
        0.87953f,  0.35425f,  -0.64364f, 0.75432f,  1.27093f,  0.10528f,  0.12159f,  -0.53918f,
        0.42191f,  0.00287f,  0.48949f,  -0.97898f, -0.46446f, -0.46296f, -0.39218f, -0.89881f,
        -0.63716f, 1.22591f,  -0.12277f, 1.50592f,  0.13477f,  -0.29951f, 0.89537f,  -0.70056f,
        -0.92031f, -0.37414f, -0.47729f, 1.38291f,  -0.40654f, 1.35620f,  -0.93808f, -0.61874f,
        -1.75391f, 0.74084f,  -1.12135f, 0.02336f,  -1.01463f, -0.76252f, 0.57324f,  2.43859f,
        0.42272f,  -0.98665f, -0.59967f, -0.81058f, 0.27267f,  0.94463f,  0.28715f,  1.29446f,
        -0.82678f, -0.33689f, -0.17825f, 1.23543f,  0.62783f,  0.10045f,  0.95923f,  -0.21368f,
        0.65439f,  -1.01701f, 0.20711f,  1.09200f,  -0.05349f, 0.35872f,  -0.23862f, 0.64003f,
        0.99530f,  0.00762f,  2.20042f,  -0.52028f, -1.13380f, 0.16808f,  -0.11888f, -0.42789f,
        1.59955f,  -0.71159f, 0.67671f,  -0.40985f, -0.00057f, 2.17165f,  -0.22338f, -0.59890f,
        -0.50430f, 1.37838f,  -1.16726f, -0.71343f, -0.18745f, 0.95503f,  0.30581f,  -1.36015f,
        1.60275f,  -2.29640f, -0.57038f, -0.48087f, -0.66250f, 1.96522f,  0.49518f,  1.04485f,
        -0.20638f, 0.20420f,  0.70196f,  2.13317f,  -0.70185f, 0.21318f,  -1.08773f, 0.02084f,
        -1.45512f, 0.98927f,  0.89684f,  -0.36210f, 0.02677f,  1.16851f,  -0.12186f, 0.31704f,
        1.65360f,  -0.82799f, -1.09955f, -1.04954f, -1.73744f, -1.20443f, -2.79329f, 0.30787f,
        0.54455f,  -1.33252f, -0.30251f, 0.24008f,  2.00492f,  -1.73048f, 0.92799f,  -0.56775f,
        1.25751f,  0.27436f,  0.76621f,  -0.57721f, -1.08109f, 0.67550f,  -0.40030f, -0.60653f,
        -1.89459f, -1.11652f, -0.81427f, -1.43430f, 0.19945f,  0.88157f,  -0.57114f, -0.60026f,
        -0.51944f, -1.27501f, -0.23303f, -0.96548f, 0.39814f,  -1.28721f, 0.69327f,  0.46423f,
        -0.18173f, 0.44690f,  -0.85166f, 0.23460f,  0.02631f,  -0.09945f, -0.91935f, -1.41658f,
        -0.45733f, 0.32043f,  0.08780f,  0.61976f,  1.32688f,  0.55391f,  -0.38564f, 0.63408f,
        0.54804f,  -0.16741f, -0.49355f, -0.19196f, -1.98001f, 0.59593f,  -0.90306f, -0.81852f,
        0.06709f,  0.09997f,  0.00319f,  0.23375f,  0.51767f,  1.45616f,  -1.29752f, 1.68701f,
        0.05529f,  0.00466f,  -2.83786f, -0.23337f, -0.39945f, -0.79932f, 0.20436f,  1.07591f,
        0.99903f,  0.16540f,  1.94998f,  -0.58538f, -0.55157f, 0.65130f,  -0.02183f, 1.65474f,
        0.45864f,  0.37899f,  0.01364f,  0.51625f,  0.43740f,  0.06678f,  1.12735f,  -0.18184f,
        0.33223f,  0.22244f,  1.59270f,  -0.24772f, -1.57917f, -0.73295f, 0.83161f,  0.54219f,
        -2.05651f, 0.45852f,  0.61937f,  -0.13846f, 0.01193f,  -0.28241f, 0.02750f,  -0.53546f};

    std::vector<float> present_val_gold{
        3.51827f,  0.17044f,  -0.54399f, 1.66759f,  -0.09451f, -1.98674f, 0.09971f,  -0.06976f,
        -2.44890f, -0.00540f, -0.08205f, -0.71392f, -1.36729f, 0.95732f,  0.25542f,  1.87007f,
        0.31369f,  1.18265f,  0.38700f,  1.66296f,  0.59392f,  -0.91786f, -0.60457f, 0.22542f,
        -0.61538f, 0.87161f,  -0.40992f, -0.62723f, -0.83298f, 0.54662f,  -0.90864f, -1.40580f,
        -1.41908f, 0.07712f,  -1.15486f, 1.14059f,  1.83738f,  -0.99904f, -1.82905f, 0.08421f,
        0.32739f,  -0.43219f, -0.50271f, 1.48132f,  -0.28586f, -0.58438f, -0.10836f, 1.21794f,
        0.72767f,  1.25814f,  0.40609f,  -1.17752f, -0.40359f, -1.61168f, -1.71160f, -3.35542f,
        -0.44499f, 1.84137f,  0.56488f,  -0.74056f, -1.83948f, -0.39137f, 0.91220f,  1.70281f,
        1.52037f,  0.13442f,  -0.95315f, 0.44645f,  0.27345f,  0.35522f,  0.11271f,  -0.98679f,
        -0.04066f, 0.16398f,  -0.16782f, 0.50444f,  -0.18525f, -0.32975f, 1.44748f,  -0.47093f,
        -0.32312f, 0.09587f,  0.18454f,  -2.03755f, -0.78669f, -0.52518f, 0.65142f,  -0.03312f,
        0.15623f,  -0.29538f, 0.37195f,  0.96804f,  -1.39667f, 1.31413f,  -1.12619f, -0.89370f,
        0.04390f,  0.91847f,  0.33345f,  -0.41038f, -1.68900f, 0.26064f,  1.01668f,  0.60009f,
        2.06636f,  1.00074f,  0.58291f,  0.25153f,  0.33245f,  -0.17361f, 0.34339f,  1.17431f,
        1.19287f,  -0.81114f, 0.03131f,  -1.87341f, -1.12230f, 0.84082f,  1.00635f,  0.05051f,
        0.66108f,  0.19508f,  -0.44328f, -0.01588f, 0.23904f,  -1.30077f, 0.10052f,  -1.27191f,
        0.29155f,  0.29632f,  1.77290f,  0.61604f,  1.05230f,  -0.39919f, -1.68702f, 0.50293f,
        0.27108f,  1.08310f,  -0.01435f, 1.44720f,  -0.05727f, 1.07322f,  1.66356f,  -0.74269f,
        0.33795f,  -0.47729f, -0.67558f, -2.13081f, -0.17721f, -0.33928f, -1.15167f, -1.46648f,
        2.12634f,  -0.48589f, 0.08483f,  -1.29051f, 0.37948f,  2.16645f,  -0.32016f, 2.56183f,
        0.31167f,  -0.02995f, -1.92315f, 0.19336f,  0.90484f,  -0.26553f, 0.39862f,  -1.06318f,
        -1.05971f, 0.38424f,  0.59913f,  0.18560f,  -1.04411f, -0.45747f, 1.15776f,  -0.37921f,
        -1.56293f, 0.97964f,  1.89682f,  1.33685f,  0.92364f,  0.57161f,  1.30631f,  0.70533f,
        -1.44685f, 1.07021f,  -0.34614f, -0.70411f, 1.40477f,  0.93634f,  1.05304f,  -0.15739f,
        0.30893f,  0.83276f,  -0.50801f, -0.70749f, 0.49576f,  0.67996f,  -0.73131f, -0.23620f,
        -0.24573f, 0.64957f,  -0.21404f, -0.48317f, 1.11645f,  0.19945f,  -0.68076f, -0.14517f,
        1.42660f,  0.47421f,  1.40327f,  -0.86718f, -0.33979f, -2.38294f, 0.52184f,  0.15419f,
        -0.58230f, 3.45063f,  -0.07067f, 0.76321f,  -0.09428f, -0.25247f, 1.05917f,  1.48212f,
        0.21344f,  0.22970f,  -0.28166f, 0.24400f,  -0.13917f, -0.03468f, 1.23776f,  0.45723f,
        -0.54074f, -0.52076f, -0.81906f, -1.09086f, -0.58955f, 0.46920f,  -0.00467f, -0.24455f,
        0.38190f,  -0.73470f, 0.11403f,  1.56294f,  -0.31808f, -1.34281f, 0.47457f,  -0.25326f,
        0.28916f,  2.17363f,  0.20315f,  -0.52204f, -0.55325f, -1.40188f, -0.82835f, -0.68602f};

    EXPECT(migraphx::verify::verify_rms_range(attn_result, attn_gold));
    EXPECT(migraphx::verify::verify_rms_range(present_key_result, present_key_gold));
    EXPECT(migraphx::verify::verify_rms_range(present_val_result, present_val_gold));
}

TEST_CASE(sparse_attention_prompt_batched)
{
    using namespace migraphx;
    migraphx::program p;
    auto* mm = p.get_main_module();

    const size_t batch_size                = 2;
    const size_t sequence_length           = 8;
    const size_t num_heads                 = 2;
    const size_t kv_num_heads              = 1;
    const size_t head_size                 = 8;
    const size_t max_cache_sequence_length = 8;
    const size_t sparse_block_size         = 2;
    const size_t num_layouts               = 2;
    const size_t max_blocks                = 4;
    const size_t max_nnz_blocks            = 9;
    const size_t total_sequence_length     = 8;
    const float scale                      = 0.0f;
    const bool do_rotary                   = false;
    const bool rotary_interleaved          = false;

    shape qkv_shape{shape::float_type,
                    {batch_size, num_heads + 2 * kv_num_heads, sequence_length, head_size}};
    shape past_key_shape(shape::float_type,
                         {batch_size, kv_num_heads, max_cache_sequence_length, head_size});
    shape past_value_shape(shape::float_type,
                           {batch_size, kv_num_heads, max_cache_sequence_length, head_size});
    shape block_row_indices_shape(shape::int32_type, {num_layouts, max_blocks + 1});
    shape block_col_indices_shape(shape::int32_type, {num_layouts, max_nnz_blocks});
    shape total_sequence_len_shape(shape::int32_type, {1});
    shape key_total_sequence_lens_shape(shape::int32_type, {batch_size});

    std::vector<float> qkv_val{
        -0.93980f, -0.56904f, 0.20331f,  -1.41928f, -1.09457f, -0.53707f, -0.68914f, -0.41155f,
        0.80260f,  0.35958f,  -0.69639f, -1.91410f, -1.38965f, 2.27374f,  -0.04516f, 0.35319f,
        -0.61498f, 0.40979f,  -0.40415f, 0.59753f,  1.16909f,  -0.23210f, -0.19860f, -0.86851f,
        -0.50236f, -0.08776f, 0.46228f,  -0.66422f, 1.82184f,  1.64956f,  1.27632f,  0.68488f,
        0.17505f,  0.39545f,  1.38615f,  0.15104f,  -0.71156f, 0.95690f,  -0.21982f, -0.57013f,
        0.52454f,  1.85764f,  -1.40613f, 1.46315f,  -1.10611f, -0.30053f, -0.69327f, 1.55522f,
        1.83271f,  0.09422f,  -0.22639f, 0.21585f,  0.72777f,  -2.11848f, 1.06590f,  0.02478f,
        -1.18231f, 2.17459f,  -0.62727f, 0.46470f,  -0.69232f, -0.23594f, -0.01796f, -0.13627f,
        -0.44562f, 1.04400f,  -0.34187f, -1.17107f, 0.15619f,  1.13841f,  -1.32931f, -0.11879f,
        0.26327f,  -0.64157f, -1.63825f, -0.17526f, 1.39031f,  -1.89553f, -0.07208f, 1.80404f,
        0.81534f,  1.49251f,  -0.78926f, 0.10192f,  -0.27030f, 0.24046f,  0.00237f,  -0.88901f,
        -1.15994f, 1.74694f,  0.97408f,  1.25767f,  0.98774f,  -0.93377f, 0.26434f,  1.86607f,
        -0.22933f, 0.64968f,  1.64762f,  1.06006f,  -0.62456f, 0.20184f,  0.39816f,  -0.16802f,
        -0.59155f, 0.11692f,  -0.46939f, 0.36794f,  1.39974f,  -1.17083f, 0.87157f,  0.51052f,
        -1.09554f, 0.96194f,  -0.55107f, 1.76800f,  1.78965f,  -1.01516f, -1.15276f, -3.64668f,
        0.56630f,  -0.15660f, -0.17827f, 0.07307f,  0.12900f,  -0.84592f, 0.01718f,  1.31154f,
        1.21713f,  0.92272f,  -0.08833f, -1.27039f, 0.70842f,  0.61974f,  -0.07645f, 0.67751f,
        -0.26002f, 2.62878f,  0.06887f,  0.43451f,  -0.49337f, -0.54108f, 0.35678f,  0.38898f,
        1.12670f,  0.37379f,  0.29047f,  -0.69255f, 0.61798f,  1.16398f,  3.07217f,  -1.86115f,
        0.27784f,  1.33958f,  -0.36193f, -0.13833f, -0.03033f, 2.38090f,  -0.72384f, -1.43251f,
        0.92001f,  -0.56404f, -0.86253f, 1.38733f,  0.14663f,  0.63178f,  -0.28703f, 0.00889f,
        2.55983f,  2.34925f,  1.26979f,  -0.12697f, -1.07578f, 1.39636f,  0.31573f,  0.06129f,
        -0.76220f, 2.81484f,  -0.48380f, -0.71959f, -1.72843f, -1.71904f, 0.68128f,  -0.35195f,
        -0.01740f, -0.86623f, -1.16489f, -0.17636f, 1.51941f,  -0.92612f, -0.45126f, -0.37162f,
        -0.47717f, -1.30265f, 0.12719f,  0.58952f,  0.08389f,  -2.15075f, 0.92238f,  1.60766f,
        -0.81649f, -0.11865f, 3.08009f,  0.87657f,  -0.16599f, 1.26656f,  0.13653f,  -0.67546f,
        -1.28763f, -0.34340f, 0.00896f,  -2.95860f, -0.62718f, 0.47477f,  0.27644f,  -0.95767f,
        -1.15613f, 0.64466f,  1.89817f,  -0.26138f, -0.97558f, 0.86962f,  -0.13778f, 0.43704f,
        0.53007f,  0.28462f,  0.97184f,  0.46290f,  1.76926f,  0.12259f,  -1.33788f, 0.07999f,
        -0.26032f, 0.10471f,  -1.05303f, -1.94115f, -0.46773f, 0.12563f,  0.70900f,  -0.06273f,
        0.89384f,  -2.25229f, 0.47669f,  -0.01300f, -0.90104f, 0.37004f,  -0.38298f, -0.15529f,
        2.96090f,  0.28449f,  -0.76738f, 1.71303f,  -0.72743f, -0.70234f, -0.15611f, -0.50508f,
        0.63009f,  1.33299f,  -0.37638f, -0.30536f, 0.35747f,  -1.27308f, 1.80729f,  -0.27808f,
        0.66587f,  0.88501f,  0.80894f,  -0.69814f, 1.88069f,  0.12874f,  -0.54210f, -0.61115f,
        1.18607f,  0.54745f,  0.89204f,  0.80658f,  0.22773f,  -2.17648f, 1.88645f,  -1.75979f,
        0.03106f,  0.65605f,  -0.40704f, 1.08787f,  -0.40249f, -1.31417f, 0.61262f,  0.06903f,
        -0.08003f, 0.21047f,  -0.56012f, -0.38170f, 0.43331f,  -0.16033f, 0.12953f,  2.24292f,
        0.77840f,  0.54004f,  0.40105f,  1.78050f,  0.04641f,  0.96207f,  0.65656f,  -0.57630f,
        -0.64107f, -0.96421f, -0.60728f, -0.98175f, 0.43975f,  -0.52018f, -1.42343f, 1.92142f,
        0.98493f,  2.25735f,  0.70615f,  -0.36767f, -0.57907f, 1.04877f,  -0.41330f, 0.65193f,
        0.68093f,  -0.09094f, -0.85253f, 0.99488f,  -1.56052f, -1.64143f, 0.53944f,  0.94131f,
        -0.46658f, 1.11001f,  1.30927f,  1.57263f,  0.21515f,  -0.54658f, 0.88214f,  2.68300f,
        -1.14665f, -0.94624f, 0.86545f,  0.43260f,  -0.40522f, -0.24876f, 0.93777f,  -0.47110f,
        0.12914f,  0.49148f,  0.12952f,  -2.26598f, 0.60560f,  1.31040f,  -0.77217f, -0.88365f,
        -0.56938f, 0.36904f,  0.62756f,  -0.31306f, 0.34328f,  0.71163f,  -1.08260f, 1.70300f,
        -0.46387f, -1.44456f, 0.66426f,  0.60244f,  1.66788f,  -0.05278f, -0.28333f, -0.37962f,
        -0.92208f, 1.43848f,  -0.33344f, -0.23769f, -1.50677f, 1.01164f,  -2.21712f, 0.51552f,
        -1.11427f, 0.00638f,  -0.08043f, 1.76604f,  1.99640f,  -0.04116f, -0.22119f, -1.43812f,
        -0.85787f, 0.48006f,  0.30282f,  1.14086f,  -0.20686f, 1.79190f,  -0.90391f, 1.53701f,
        -0.28958f, 0.89223f,  1.37187f,  -1.58837f, 1.27463f,  1.13858f,  0.81716f,  0.88278f,
        1.62381f,  -0.80069f, 0.59240f,  -1.07259f, -0.45200f, -0.13693f, 0.04193f,  2.56099f,
        -0.92293f, -0.14494f, 0.41720f,  1.07738f,  -0.42805f, 0.73425f,  -0.92024f, 0.61411f,
        -0.85429f, 1.39599f,  1.04822f,  -0.10943f, 0.15635f,  -0.15359f, 0.37304f,  1.19091f,
        -0.62326f, 0.31957f,  0.39996f,  -0.01460f, 0.98925f,  0.09562f,  -0.22813f, -0.61202f,
        -0.35774f, -1.05775f, -0.25409f, 0.41527f,  -1.43725f, 0.61602f,  0.54694f,  -0.41647f,
        -1.12205f, 2.04128f,  0.60251f,  -0.59179f, 1.46916f,  0.54385f,  0.66948f,  -0.94800f,
        -0.18778f, 0.06865f,  -0.60383f, 0.04914f,  2.14214f,  0.19329f,  -0.82948f, 0.51568f,
        0.18328f,  0.70403f,  -0.74084f, -0.52614f, 0.34768f,  0.63229f,  1.40803f,  1.11497f,
        -0.32942f, 0.18223f,  0.99152f,  -0.35166f, -1.25909f, -0.44686f, -0.07368f, -1.72297f,
        -0.11521f, -0.00936f, 0.11854f,  2.75826f,  1.71516f,  -0.32771f, 0.34118f,  -1.48262f,
        -1.48907f, -0.32284f, -0.41489f, 1.25204f,  -1.15294f, -0.74279f, -0.43475f, -1.58066f,
        -1.19595f, -0.52258f, 1.21243f,  -0.36873f, 1.76957f,  0.41071f,  -0.12521f, -0.94964f,
        -0.62157f, -0.34495f, -0.42287f, -0.61585f, -0.28848f, -1.18934f, 0.78285f,  -0.10385f,
        -1.02588f, 1.58360f,  0.38757f,  0.48773f,  -0.22308f, -0.60687f, 0.80870f,  1.33592f};

    std::vector<float> past_key_val{
        -1.49725f, -1.00960f, 0.21030f,  -0.91107f, 0.21324f,  -1.26136f, 0.08339f,  0.97467f,
        -2.17160f, -0.82744f, -0.64560f, 1.34794f,  1.36710f,  -2.11776f, -2.23017f, 0.87521f,
        0.37659f,  0.21934f,  0.93580f,  -0.58711f, -0.28026f, 1.39822f,  1.09749f,  0.71838f,
        -0.96673f, -0.24286f, 0.05850f,  0.27973f,  0.25442f,  0.32480f,  0.90288f,  -0.58733f,
        0.65143f,  -0.74642f, 0.18568f,  -0.79230f, 1.52974f,  1.23205f,  1.85612f,  -0.21456f,
        1.45327f,  -0.48154f, -1.77827f, -0.71772f, 0.49083f,  0.08470f,  1.11457f,  0.88895f,
        -1.26723f, 1.84394f,  0.76953f,  0.80181f,  0.24528f,  -1.07260f, 0.50565f,  0.29590f,
        -1.26986f, -0.15232f, 0.19841f,  -1.13419f, -1.34661f, 1.65772f,  0.65236f,  -0.21854f,
        0.66823f,  -1.63849f, 0.03215f,  -1.14788f, 1.15316f,  0.95840f,  0.36052f,  -0.31156f,
        -0.06762f, 0.17517f,  -0.22655f, 1.58996f,  0.23484f,  -0.73760f, 0.45400f,  -0.72623f,
        -0.11339f, 1.02383f,  0.58841f,  0.61440f,  0.39509f,  -0.23625f, -0.46835f, 2.13537f,
        0.64271f,  -0.46888f, -0.20979f, -0.08249f, 0.75341f,  -2.34646f, 0.41986f,  -0.01572f,
        -1.24020f, -0.06335f, -1.69240f, -1.35686f, 1.23109f,  -0.05240f, -0.44316f, 0.58169f,
        -0.40709f, 2.20537f,  -1.21421f, -0.33294f, -1.13384f, -1.00158f, -1.07995f, 0.36200f,
        -0.55244f, -1.58638f, 1.27194f,  -0.10193f, 0.46786f,  0.11349f,  1.48512f,  -0.02884f,
        -0.83240f, 0.54423f,  1.12923f,  -0.02928f, -0.76107f, 0.36026f,  -0.85424f, 0.85876f};

    std::vector<float> past_value_val{
        0.85774f,  -0.34591f, 1.69510f,  0.71387f,  1.39442f,  -0.02588f, 0.56322f,  0.35455f,
        -1.77294f, -0.87863f, -1.18683f, 1.32178f,  -0.32205f, -0.12818f, 0.57893f,  0.51201f,
        0.48184f,  0.84837f,  1.07527f,  0.81982f,  -0.34791f, 0.07670f,  0.23751f,  -0.04666f,
        2.35644f,  -0.39938f, -2.16267f, 0.35520f,  0.10670f,  -0.01659f, -0.12232f, 1.69671f,
        0.07078f,  -1.61198f, -0.24153f, -0.32333f, -0.28878f, -0.78962f, 0.14605f,  0.36024f,
        -1.77109f, -0.42357f, -0.64222f, 1.97061f,  -0.59783f, 0.68373f,  -1.06535f, -0.59823f,
        -0.40356f, -0.04986f, -0.05842f, 1.08351f,  -1.40773f, -2.60198f, 0.60523f,  0.92638f,
        2.88194f,  0.15891f,  0.93439f,  0.42165f,  -0.21076f, -0.87866f, -0.38757f, -0.22965f,
        0.02890f,  -1.12920f, -0.59348f, -0.60232f, -1.10587f, -0.34747f, -0.89974f, -0.54589f,
        -1.54867f, 0.25207f,  1.02303f,  -2.00424f, -1.08670f, -0.11229f, 1.93073f,  -1.08240f,
        0.46043f,  -0.32452f, -0.05402f, -0.72073f, -0.07781f, 0.63509f,  -1.80913f, 1.37712f,
        -0.79120f, 0.30525f,  -2.23491f, -0.38453f, 0.87953f,  -0.91903f, 0.64279f,  0.22424f,
        0.48086f,  0.26473f,  0.68994f,  -1.54898f, 2.42839f,  -0.07869f, -1.61715f, -0.29906f,
        1.05082f,  -0.51160f, -0.38636f, -0.55208f, 1.61354f,  -1.69337f, 0.33662f,  -0.12540f,
        -1.74056f, 1.14394f,  0.03806f,  0.36372f,  0.22500f,  0.26498f,  -2.28188f, -0.26177f,
        -0.46518f, -0.18792f, 2.14396f,  0.02881f,  0.74118f,  0.41518f,  -0.14919f, 0.52214f};

    // clang-format off
    std::vector<int> bri_val{/*layout 1*/ 0, 1, 3, 6, 9,
                             /*layout 2*/ 0, 1, 3, 5, 8};

    std::vector<int> bci_val{/*layout 1*/ 0, 0, 1, 0, 1, 2, 0, 2, 3,
                             /*layout 2*/ 0, 0, 1, 1, 2, 1, 2, 3, -1};
    // clang-format on

    std::vector<int> tsl_val(total_sequence_len_shape.elements(), total_sequence_length);

    std::vector<int> ktsl_val(key_total_sequence_lens_shape.elements(), total_sequence_length);

    auto qkv        = mm->add_literal(literal{qkv_shape, qkv_val});
    auto k          = mm->add_literal(literal{});
    auto v          = mm->add_literal(literal{});
    auto past_key   = mm->add_literal(literal{past_key_shape, past_key_val});
    auto past_value = mm->add_literal(literal{past_value_shape, past_value_val});
    auto bri        = mm->add_literal(literal{block_row_indices_shape, bri_val});
    auto bci        = mm->add_literal(literal{block_col_indices_shape, bci_val});
    auto tsl        = mm->add_literal(literal{total_sequence_len_shape, tsl_val});
    auto ktsl       = mm->add_literal(literal{key_total_sequence_lens_shape, ktsl_val});

    auto sparse_attn = mm->add_instruction(make_op("sparse_attention",
                                                   {{"do_rotary", do_rotary},
                                                    {"rotary_interleaved", rotary_interleaved},
                                                    {"num_heads", num_heads},
                                                    {"kv_num_heads", kv_num_heads},
                                                    {"scale", scale},
                                                    {"sparse_block_size", sparse_block_size}}),
                                           qkv,
                                           k,
                                           v,
                                           past_key,
                                           past_value,
                                           bri,
                                           bci,
                                           tsl,
                                           ktsl);

    auto attn_output =
        mm->add_instruction(migraphx::make_op("get_tuple_elem", {{"index", 0}}), sparse_attn);
    auto present_key_output =
        mm->add_instruction(migraphx::make_op("get_tuple_elem", {{"index", 1}}), sparse_attn);
    auto present_val_output =
        mm->add_instruction(migraphx::make_op("get_tuple_elem", {{"index", 2}}), sparse_attn);
    mm->add_return({attn_output, present_key_output, present_val_output});

    p.compile(migraphx::make_target("ref"));
    auto results = p.eval({});

    std::vector<float> attn_result(batch_size * sequence_length * num_heads * head_size);
    results[0].visit([&](auto output) { attn_result.assign(output.begin(), output.end()); });
    std::vector<float> present_key_result(past_key_shape.elements());
    results[1].visit([&](auto output) { present_key_result.assign(output.begin(), output.end()); });
    std::vector<float> present_val_result(past_value_shape.elements());
    results[2].visit([&](auto output) { present_val_result.assign(output.begin(), output.end()); });

    std::vector<float> attn_gold{
        -0.47717f, -1.30265f, 0.12719f,  0.58952f,  0.08389f,  -2.15075f, 0.92238f,  1.60766f,
        -0.47717f, -1.30265f, 0.12719f,  0.58952f,  0.08389f,  -2.15075f, 0.92238f,  1.60766f,
        -0.52612f, -1.13185f, 0.55316f,  0.63092f,  0.04785f,  -1.65779f, 0.80902f,  1.27831f,
        -0.58759f, -0.91737f, 1.08808f,  0.68292f,  0.00258f,  -1.03874f, 0.66666f,  0.86473f,
        -0.91367f, -0.47236f, 1.26719f,  -0.61078f, -0.27990f, 0.19261f,  0.36787f,  -0.25868f,
        -0.90820f, -0.46850f, 1.30764f,  -0.56343f, -0.27447f, 0.20550f,  0.36542f,  -0.25734f,
        -1.07291f, -0.39727f, 0.45073f,  -1.63161f, -0.50241f, 0.00752f,  0.34897f,  -0.19716f,
        -0.80445f, -0.20797f, 2.72952f,  0.74725f,  -0.17363f, 0.93962f,  0.20156f,  -0.45127f,
        -0.87679f, 0.03172f,  1.35057f,  -0.50802f, -0.36092f, 0.39976f,  0.00284f,  0.05797f,
        -0.82218f, 0.14160f,  0.88128f,  -1.24001f, -0.19298f, 0.52914f,  -0.23922f, -0.23813f,
        -0.50961f, -0.04632f, 1.50684f,  0.02079f,  -0.02955f, 0.57981f,  0.12556f,  -0.20591f,
        -0.53787f, 0.01791f,  0.46008f,  -1.37459f, 0.21286f,  0.35971f,  -0.31132f, -0.37220f,
        0.01522f,  -0.79217f, 0.66947f,  -0.03317f, -0.05494f, -0.05130f, 0.03689f,  0.15375f,
        -0.51434f, -0.09147f, 1.18049f,  -0.50167f, -0.46612f, 0.59189f,  -0.30444f, 0.06873f,
        0.32624f,  -1.40603f, 1.14564f,  0.19617f,  -0.59243f, 0.54480f,  -0.15980f, -0.26459f,
        0.89540f,  -0.27955f, 0.02256f,  -0.01257f, -0.14751f, 0.01449f,  -0.28655f, -0.20901f,
        -0.18778f, 0.06865f,  -0.60383f, 0.04914f,  2.14214f,  0.19329f,  -0.82948f, 0.51568f,
        -0.18778f, 0.06865f,  -0.60383f, 0.04914f,  2.14214f,  0.19329f,  -0.82948f, 0.51568f,
        0.13940f,  0.62889f,  -0.72463f, -0.45810f, 0.55989f,  0.58037f,  1.14342f,  1.04410f,
        -0.07270f, 0.26571f,  -0.64632f, -0.12927f, 1.58561f,  0.32944f,  -0.13555f, 0.70154f,
        -0.04060f, 0.45820f,  -0.06228f, -0.41862f, -0.14762f, 0.18492f,  0.67973f,  -0.02278f,
        -0.07287f, 0.34743f,  -0.29087f, -0.27189f, 0.64535f,  0.22039f,  0.23418f,  0.23835f,
        -0.14892f, 0.15569f,  0.04161f,  0.82048f,  0.87712f,  -0.09537f, 0.07616f,  -0.68126f,
        0.07441f,  0.54188f,  -0.48528f, -0.23223f, 0.43324f,  0.41195f,  0.97292f,  0.58137f,
        -0.40239f, 0.14873f,  0.15831f,  0.18500f,  -0.21609f, -0.21209f, 0.01246f,  -0.86812f,
        -0.65933f, -0.04358f, 0.26489f,  1.08641f,  -0.36590f, -0.51246f, -0.07604f, -1.60562f,
        -0.48134f, -0.01858f, -0.04127f, 0.64744f,  1.11291f,  -0.00603f, -0.10544f, -0.52096f,
        -0.81275f, -0.25726f, 0.64005f,  0.77187f,  0.97289f,  -0.07136f, -0.02524f, -1.28891f,
        -0.56526f, -0.00401f, -0.32432f, 0.05807f,  0.78751f,  -0.01874f, -0.02558f, -0.06236f,
        -0.61021f, -0.15578f, 0.12224f,  1.42898f,  0.58898f,  -0.45797f, 0.13924f,  -1.30338f,
        -0.61341f, 0.39326f,  -0.29825f, 0.20321f,  0.36050f,  -0.08292f, 0.27107f,  0.25515f,
        -0.95311f, 0.44420f,  0.51010f,  0.53017f,  0.61154f,  -0.28835f, 0.35723f,  -0.08502f};

    std::vector<float> present_key_gold{
        1.21713f,  0.92272f,  -0.08833f, -1.27039f, 0.70842f,  0.61974f,  -0.07645f, 0.67751f,
        -0.26002f, 2.62878f,  0.06887f,  0.43451f,  -0.49337f, -0.54108f, 0.35678f,  0.38898f,
        1.12670f,  0.37379f,  0.29047f,  -0.69255f, 0.61798f,  1.16398f,  3.07217f,  -1.86115f,
        0.27784f,  1.33958f,  -0.36193f, -0.13833f, -0.03033f, 2.38090f,  -0.72384f, -1.43251f,
        0.92001f,  -0.56404f, -0.86253f, 1.38733f,  0.14663f,  0.63178f,  -0.28703f, 0.00889f,
        2.55983f,  2.34925f,  1.26979f,  -0.12697f, -1.07578f, 1.39636f,  0.31573f,  0.06129f,
        -0.76220f, 2.81484f,  -0.48380f, -0.71959f, -1.72843f, -1.71904f, 0.68128f,  -0.35195f,
        -0.01740f, -0.86623f, -1.16489f, -0.17636f, 1.51941f,  -0.92612f, -0.45126f, -0.37162f,
        -0.85787f, 0.48006f,  0.30282f,  1.14086f,  -0.20686f, 1.79190f,  -0.90391f, 1.53701f,
        -0.28958f, 0.89223f,  1.37187f,  -1.58837f, 1.27463f,  1.13858f,  0.81716f,  0.88278f,
        1.62381f,  -0.80069f, 0.59240f,  -1.07259f, -0.45200f, -0.13693f, 0.04193f,  2.56099f,
        -0.92293f, -0.14494f, 0.41720f,  1.07738f,  -0.42805f, 0.73425f,  -0.92024f, 0.61411f,
        -0.85429f, 1.39599f,  1.04822f,  -0.10943f, 0.15635f,  -0.15359f, 0.37304f,  1.19091f,
        -0.62326f, 0.31957f,  0.39996f,  -0.01460f, 0.98925f,  0.09562f,  -0.22813f, -0.61202f,
        -0.35774f, -1.05775f, -0.25409f, 0.41527f,  -1.43725f, 0.61602f,  0.54694f,  -0.41647f,
        -1.12205f, 2.04128f,  0.60251f,  -0.59179f, 1.46916f,  0.54385f,  0.66948f,  -0.94800f};

    std::vector<float> present_val_gold{
        -0.47717f, -1.30265f, 0.12719f,  0.58952f,  0.08389f,  -2.15075f, 0.92238f,  1.60766f,
        -0.81649f, -0.11865f, 3.08009f,  0.87657f,  -0.16599f, 1.26656f,  0.13653f,  -0.67546f,
        -1.28763f, -0.34340f, 0.00896f,  -2.95860f, -0.62718f, 0.47477f,  0.27644f,  -0.95767f,
        -1.15613f, 0.64466f,  1.89817f,  -0.26138f, -0.97558f, 0.86962f,  -0.13778f, 0.43704f,
        0.53007f,  0.28462f,  0.97184f,  0.46290f,  1.76926f,  0.12259f,  -1.33788f, 0.07999f,
        -0.26032f, 0.10471f,  -1.05303f, -1.94115f, -0.46773f, 0.12563f,  0.70900f,  -0.06273f,
        0.89384f,  -2.25229f, 0.47669f,  -0.01300f, -0.90104f, 0.37004f,  -0.38298f, -0.15529f,
        2.96090f,  0.28449f,  -0.76738f, 1.71303f,  -0.72743f, -0.70234f, -0.15611f, -0.50508f,
        -0.18778f, 0.06865f,  -0.60383f, 0.04914f,  2.14214f,  0.19329f,  -0.82948f, 0.51568f,
        0.18328f,  0.70403f,  -0.74084f, -0.52614f, 0.34768f,  0.63229f,  1.40803f,  1.11497f,
        -0.32942f, 0.18223f,  0.99152f,  -0.35166f, -1.25909f, -0.44686f, -0.07368f, -1.72297f,
        -0.11521f, -0.00936f, 0.11854f,  2.75826f,  1.71516f,  -0.32771f, 0.34118f,  -1.48262f,
        -1.48907f, -0.32284f, -0.41489f, 1.25204f,  -1.15294f, -0.74279f, -0.43475f, -1.58066f,
        -1.19595f, -0.52258f, 1.21243f,  -0.36873f, 1.76957f,  0.41071f,  -0.12521f, -0.94964f,
        -0.62157f, -0.34495f, -0.42287f, -0.61585f, -0.28848f, -1.18934f, 0.78285f,  -0.10385f,
        -1.02588f, 1.58360f,  0.38757f,  0.48773f,  -0.22308f, -0.60687f, 0.80870f,  1.33592f};

    EXPECT(migraphx::verify::verify_rms_range(attn_result, attn_gold));
    EXPECT(migraphx::verify::verify_rms_range(present_key_result, present_key_gold));
    EXPECT(migraphx::verify::verify_rms_range(present_val_result, present_val_gold));
}

TEST_CASE(sparse_attention_rotary_prompt)
{
    using namespace migraphx;
    migraphx::program p;
    auto* mm                               = p.get_main_module();
    const size_t batch_size                = 1;
    const size_t sequence_length           = 8;
    const size_t num_heads                 = 4;
    const size_t kv_num_heads              = 2;
    const size_t head_size                 = 16;
    const size_t max_cache_sequence_length = 8;
    const size_t sparse_block_size         = 2;
    const size_t num_layouts               = 2;
    const size_t max_blocks                = 4;
    const size_t max_nnz_blocks            = 9;
    const size_t total_sequence_length     = 8;
    const size_t max_rotary_seq_length     = max_cache_sequence_length;
    const size_t rotary_dim                = head_size / 2;
    const float scale                      = 1.0;
    const bool do_rotary                   = true;
    const bool rotary_interleaved          = false;

    shape qkv_shape{shape::float_type,
                    {batch_size, num_heads + 2 * kv_num_heads, sequence_length, head_size}};
    shape past_key_shape(shape::float_type,
                         {batch_size, kv_num_heads, max_cache_sequence_length, head_size});
    shape past_value_shape(shape::float_type,
                           {batch_size, kv_num_heads, max_cache_sequence_length, head_size});
    shape block_row_indices_shape(shape::int32_type, {num_layouts, max_blocks + 1});
    shape block_col_indices_shape(shape::int32_type, {num_layouts, max_nnz_blocks});
    shape total_sequence_len_shape(shape::int32_type, {1});
    shape key_total_sequence_lens_shape(shape::int32_type, {batch_size});
    shape cos_cache_shape(shape::float_type, {max_rotary_seq_length, rotary_dim});
    shape sin_cache_shape(shape::float_type, {max_rotary_seq_length, rotary_dim});

    std::vector<float> qkv_val{
        0.41749f,  -0.69577f, -1.70273f, -0.79187f, 0.07310f,  -0.27880f, -0.75174f, -0.72621f,
        -2.06164f, -1.44138f, -0.01891f, -0.05486f, -0.50047f, 0.35353f,  -0.76615f, -1.74248f,
        0.59954f,  -1.00662f, 1.02043f,  -0.07006f, -1.96865f, -0.42948f, 1.38265f,  1.39979f,
        1.61774f,  0.76564f,  -0.06511f, 0.51657f,  -0.78820f, -0.53020f, 1.00847f,  0.75522f,
        1.10552f,  0.33774f,  -1.25448f, -0.74513f, 0.32448f,  0.18892f,  -0.80532f, -0.47895f,
        -0.15562f, 0.23953f,  1.14514f,  -0.72504f, 0.60569f,  -0.01937f, 1.17494f,  0.44646f,
        0.17420f,  -1.29149f, 0.09795f,  1.30044f,  0.65743f,  -0.43525f, 1.21967f,  -0.26364f,
        -1.17287f, 1.08942f,  -0.20404f, -0.67642f, -1.04814f, -0.30387f, -0.34929f, -0.67358f,
        -0.45570f, 1.01702f,  -0.20984f, -0.66244f, -1.03716f, 1.67139f,  0.22007f,  0.94488f,
        -0.15520f, 0.00094f,  0.93557f,  -1.05383f, 0.36045f,  0.05115f,  -0.19947f, 1.57586f,
        0.00395f,  0.20170f,  -1.59494f, -2.09666f, 1.28563f,  0.10925f,  -1.95444f, -0.10990f,
        -1.39617f, 0.96968f,  0.43793f,  1.49594f,  0.69040f,  -0.45398f, -0.43307f, 0.13872f,
        -1.23702f, 0.27749f,  -1.54765f, -0.33909f, 0.95985f,  -0.80969f, -0.06333f, -0.35975f,
        -1.03807f, 0.95710f,  -0.72967f, 0.73937f,  -0.01144f, 0.52790f,  0.81002f,  -0.27235f,
        1.68369f,  -1.10408f, -1.12985f, 0.08155f,  -1.80029f, -1.07238f, -0.50818f, 0.48642f,
        1.65785f,  0.34942f,  -0.29293f, -0.02263f, -0.28906f, 0.21972f,  -0.31756f, -0.61890f,
        -0.97612f, 0.70052f,  1.17989f,  1.03988f,  0.28753f,  0.44653f,  0.58795f,  -0.75481f,
        -0.86908f, -0.86280f, 0.46151f,  -0.40664f, 0.93974f,  -0.59152f, 0.62067f,  -1.16862f,
        0.19509f,  -2.08621f, -1.25910f, -0.69394f, -0.46405f, 1.65313f,  -0.62303f, 0.57686f,
        0.12457f,  -0.50076f, 0.52905f,  -0.21097f, 0.13185f,  -0.06517f, -0.81022f, -0.15991f,
        -0.85608f, -0.66973f, 0.82188f,  0.84750f,  1.11381f,  -0.27893f, 0.96663f,  0.17090f,
        -0.58623f, 0.08810f,  -0.64246f, 1.13702f,  0.78309f,  0.92382f,  -0.37715f, 0.37516f,
        0.56550f,  -0.14689f, -0.78602f, 1.58871f,  -1.83865f, -0.05113f, -0.00113f, -0.20537f,
        -0.25702f, -0.48554f, -0.42965f, -0.80981f, -0.77238f, -0.23455f, -1.04290f, 1.03438f,
        -2.45761f, 0.44027f,  1.38838f,  -1.69399f, -0.26094f, 1.95926f,  0.15914f,  0.56232f,
        1.48083f,  0.08590f,  -0.19955f, 0.75460f,  -0.52121f, -1.55349f, -0.34823f, -0.26756f,
        -1.55488f, 0.92425f,  -0.71535f, 0.61587f,  -0.45286f, -0.92762f, -0.14223f, -1.34620f,
        1.03421f,  0.22707f,  -0.90337f, 0.42504f,  1.18391f,  0.13978f,  -0.16003f, -0.27895f,
        -0.62004f, -0.68513f, 0.15930f,  0.81287f,  0.70400f,  0.62487f,  0.92692f,  -1.02183f,
        0.67300f,  0.54589f,  0.81747f,  -1.05813f, -0.44010f, -3.08890f, 0.98540f,  0.35170f,
        -0.17988f, -0.37412f, 0.25646f,  -0.60839f, 0.13135f,  -0.06886f, 0.55302f,  -0.49637f,
        -0.41079f, 0.71376f,  -0.92411f, -0.04047f, -0.49496f, -0.16855f, -0.23395f, 1.22807f,
        0.98338f,  -0.72929f, -1.31395f, 1.29489f,  0.32306f,  -0.69334f, 0.08734f,  -0.15889f,
        1.89157f,  0.64903f,  0.08721f,  1.88299f,  0.90821f,  0.57134f,  0.29974f,  -0.02099f,
        -1.47984f, -1.19396f, -0.86907f, -0.46785f, -1.51203f, -0.48414f, -0.28719f, -0.35233f,
        -1.87752f, 1.27135f,  0.65182f,  -0.97655f, 0.51972f,  -0.56604f, -0.78326f, -0.22718f,
        0.03281f,  0.60940f,  -0.27093f, 1.08492f,  -2.64958f, 0.47716f,  -1.31534f, -1.52301f,
        1.54800f,  -0.89364f, -1.19203f, -1.02952f, -0.89654f, 0.19871f,  0.22578f,  -0.24013f,
        0.74516f,  -0.76311f, -0.70077f, -0.05940f, 2.51484f,  0.45830f,  -0.58173f, 0.88659f,
        -0.75417f, -0.97556f, 1.05278f,  0.12707f,  0.86963f,  -0.41560f, -1.37358f, 0.73604f,
        0.34192f,  0.80609f,  1.53944f,  0.40806f,  0.14858f,  0.28071f,  0.10681f,  -0.88577f,
        1.25632f,  -0.91592f, -1.26772f, 1.14000f,  2.31817f,  1.38137f,  -0.50686f, -0.02952f,
        -0.39148f, 0.32838f,  -0.36859f, -1.35995f, 1.32267f,  -1.54589f, -1.57510f, -0.66400f,
        -0.19672f, -1.07867f, 0.70195f,  -2.03537f, -0.45462f, -0.64457f, 0.31647f,  1.20802f,
        -0.42087f, 0.68382f,  2.00249f,  1.45079f,  -0.95763f, -1.11372f, 0.87328f,  -0.39358f,
        1.41147f,  -1.37817f, -0.47008f, -0.61774f, -0.05532f, 0.95466f,  -1.10584f, 0.17766f,
        -0.73075f, -0.69812f, -0.68570f, -0.07292f, 0.63213f,  1.15353f,  -0.40322f, -0.05030f,
        -0.83515f, -0.06614f, 1.02871f,  0.31555f,  0.13493f,  -1.07473f, -1.43802f, 0.74787f,
        -0.17787f, 2.72647f,  1.12792f,  -0.87049f, 2.23661f,  -0.72028f, -1.94251f, -0.82372f,
        -0.39990f, -0.83586f, -0.15177f, -1.16006f, -1.00450f, 0.46886f,  1.12177f,  2.36713f,
        -0.85803f, 1.14115f,  -0.54052f, -0.33579f, 0.80441f,  -0.03780f, 0.10341f,  0.08724f,
        0.32319f,  0.20989f,  -0.11073f, 0.25509f,  -0.29188f, -0.68462f, 0.27836f,  -0.16048f,
        -0.58644f, -0.75119f, -0.71220f, 0.36131f,  -2.72436f, -0.05491f, 0.15442f,  -0.42460f,
        -0.45834f, -0.73080f, 0.64778f,  0.76119f,  -2.56361f, 0.04359f,  0.71025f,  2.14647f,
        1.51538f,  0.01322f,  2.17842f,  -0.20094f, 2.44536f,  0.01128f,  -0.94017f, 2.85214f,
        0.61998f,  1.25180f,  -0.71116f, -0.37180f, -1.22676f, 0.45919f,  0.23963f,  0.86249f,
        -0.58306f, 0.27836f,  -0.20477f, -1.56387f, -0.45388f, 0.40267f,  1.77693f,  0.41270f,
        -2.19566f, 0.46689f,  -1.00889f, 1.18128f,  -1.69895f, 0.94235f,  -0.48070f, 0.88864f,
        1.25445f,  -0.85912f, 0.63483f,  2.48495f,  1.16718f,  0.94282f,  1.01831f,  0.97040f,
        -0.48674f, -0.98615f, -0.53975f, -0.33098f, 0.80657f,  1.15605f,  0.09327f,  -1.08562f,
        -1.64618f, -0.29966f, 0.21517f,  -2.44469f, -1.25757f, 0.51321f,  0.61697f,  0.31420f,
        -0.84412f, -0.40086f, -0.28057f, -0.24301f, -1.28083f, -0.43024f, -0.65606f, -0.14499f,
        -0.70121f, 0.70340f,  1.35571f,  -0.25670f, 0.44737f,  -1.85772f, -1.01866f, 0.57725f,
        -2.49752f, 0.42235f,  -0.23843f, -1.39177f, -0.76879f, 0.41183f,  2.10108f,  0.28865f,
        0.06077f,  -1.14342f, 0.34651f,  0.67033f,  -0.08636f, -0.84150f, 0.55234f,  -0.52409f,
        -0.84508f, 1.20556f,  -0.98627f, 0.02287f,  2.32880f,  -1.82350f, -0.65655f, 1.44936f,
        0.10410f,  2.05022f,  1.08761f,  1.57381f,  -0.01312f, -0.66371f, -1.02632f, 0.24346f,
        -1.47868f, 1.05582f,  0.38794f,  -0.88618f, -0.48330f, -1.93097f, 0.38556f,  0.45613f,
        -1.53924f, -1.21630f, 0.97219f,  0.68307f,  0.36223f,  -1.26150f, -0.27909f, -1.29269f,
        0.81657f,  -0.05342f, -1.31958f, -0.60319f, -1.04079f, 0.39469f,  -0.75666f, 1.50323f,
        0.25399f,  -0.10152f, -0.76702f, 1.83365f,  0.57462f,  -0.77335f, -1.35593f, -0.46823f,
        -0.04678f, -0.66350f, -0.24358f, -1.57921f, -0.69181f, -0.36496f, -0.01369f, -0.70503f,
        -1.71507f, 1.58063f,  -0.58568f, -1.55290f, -0.58359f, 1.35833f,  0.54550f,  -0.70589f,
        -0.24310f, -1.23408f, 0.42297f,  -0.51576f, 1.30628f,  -0.81409f, -0.35845f, 0.89670f,
        1.01546f,  0.39702f,  -1.26967f, -0.36245f, 1.29258f,  -0.49741f, -0.25744f, 0.92564f,
        0.59873f,  0.85128f,  -0.86577f, 1.25455f,  0.36780f,  0.70003f,  1.60151f,  -0.67805f,
        0.25288f,  -1.44379f, 0.59452f,  -0.74957f, 0.92938f,  0.93066f,  1.91045f,  0.58974f,
        -0.33494f, 0.52111f,  0.73124f,  -0.27959f, 0.81104f,  0.25312f,  -1.38699f, 0.20307f,
        0.76345f,  0.14203f,  0.90887f,  -0.83386f, -0.21649f, -0.13751f, 2.50241f,  0.38624f,
        -0.67405f, -2.28033f, 1.00245f,  2.74601f,  0.78501f,  2.08665f,  0.72543f,  0.57949f,
        -2.17947f, -0.52484f, -0.23829f, -1.05610f, 0.67673f,  -0.81046f, 1.36806f,  0.27357f,
        -0.68868f, 0.17381f,  -1.02706f, 1.17405f,  1.05738f,  -0.74259f, 0.57364f,  0.67129f,
        1.16308f,  -0.78270f, -2.66280f, 0.29430f,  -1.55534f, 0.02705f,  -0.49464f, 1.54097f,
        0.58723f,  0.08179f,  0.39286f,  -0.74650f, -0.38050f, -0.98030f, -0.29283f, -0.65102f,
        0.32762f,  0.84588f,  -0.42554f, -0.15737f, -0.85467f, 0.05529f,  0.69491f,  -1.04209f,
        -0.85984f, -1.32812f, -0.29532f, 0.66120f,  0.11061f,  0.84870f,  0.86388f,  -1.53822f,
        0.44723f,  0.13878f,  -0.17476f, -0.41955f, -1.01415f, -1.36983f, 0.41508f,  -1.88003f,
        -1.13967f, -1.00110f, -0.31072f, -0.78613f, 0.69637f,  -0.52052f, 1.20858f,  -0.24648f,
        1.31078f,  -1.65722f, 0.52834f,  1.24568f,  0.21253f,  -0.40617f, -0.10599f, -0.49272f,
        -0.12628f, 0.37853f,  -0.03980f, 0.58942f,  -1.50853f, 0.32210f,  0.40937f,  -0.49893f,
        0.37507f,  0.19290f,  -1.85422f, -0.03451f, 1.00867f,  0.74706f,  1.14846f,  0.29571f,
        0.77227f,  -0.32998f, 0.14887f,  0.55427f,  -0.71247f, 1.00684f,  -1.00142f, 0.19765f,
        -1.54164f, 0.75906f,  -3.29353f, 0.62726f,  -0.96910f, 1.45244f,  0.37286f,  0.70223f,
        0.13735f,  1.50773f,  0.91042f,  0.19532f,  -0.16148f, -1.98474f, -0.99344f, 0.45995f,
        -2.43026f, -0.08176f, -1.10964f, 0.18464f,  -1.20368f, -1.53090f, -0.47588f, 0.36687f,
        -0.30770f, 2.05622f,  0.80959f,  0.24895f,  -0.55335f, 2.20205f,  -0.59102f, 0.61142f,
        1.54316f,  -0.70976f, 0.40827f,  0.09174f,  -0.81059f, -0.94260f, 0.83612f,  1.54785f,
        0.52762f,  0.29894f,  0.51916f,  0.18861f,  -0.48849f, 0.37812f,  -0.55108f, 1.16715f,
        0.18136f,  -2.05249f, -0.52255f, -3.17783f, -1.23747f, 0.96977f,  0.94546f,  0.53913f,
        -0.87105f, -0.23456f, 0.94457f,  0.33633f,  1.67793f,  -0.64343f, 1.64205f,  -0.27973f,
        -0.28263f, 0.59008f,  0.46478f,  -0.67101f, -0.97408f, 1.09617f,  -1.49934f, 1.65995f,
        0.48849f,  2.09345f,  1.12164f,  0.00400f,  0.41253f,  -1.82862f, 0.02542f,  0.15923f,
        -0.02319f, -1.10920f, 0.33385f,  0.44133f,  0.52444f,  0.17839f,  0.35989f,  1.74398f,
        3.12485f,  0.32066f,  1.83530f,  0.05643f,  -1.48623f, -2.86640f, -0.98590f, 2.43114f,
        -0.35453f, 1.19489f,  1.21466f,  0.43728f,  1.17409f,  1.10532f,  -0.54684f, -0.27415f,
        2.10486f,  0.42502f,  0.31442f,  1.09029f,  -1.39990f, 0.34544f,  -0.04665f, 1.93631f,
        -1.80739f, -0.72702f, 0.26711f,  -0.49996f, -0.08280f, 1.45220f,  -1.87458f, 2.56975f,
        -0.35613f, -0.82097f, -0.73138f, 0.64083f,  -0.82572f, 0.29276f,  -1.20876f, 0.17214f,
        -0.98109f, -0.93785f, 0.23218f,  0.74644f,  -0.55791f, 0.76360f,  -2.14018f, 0.41112f,
        -1.00239f, 0.71319f,  0.23396f,  1.44287f,  0.08250f,  2.22372f,  -0.53487f, 2.49612f,
        -1.27615f, -0.19306f, -0.08782f, 1.84034f,  0.32768f,  0.56849f,  0.04441f,  -0.65827f,
        -0.23335f, -0.23385f, -0.99781f, 0.02744f,  0.27255f,  -0.16298f, 0.16596f,  -0.43781f,
        0.45376f,  1.61600f,  0.43510f,  -0.15598f, 0.02663f,  0.20136f,  0.16456f,  2.32006f,
        -0.17321f, -0.29193f, 0.91427f,  1.58508f,  -0.46040f, -1.24638f, -0.67820f, -1.15898f,
        0.17969f,  1.22766f,  2.75006f,  0.42565f,  -0.70687f, 0.32029f,  1.39965f,  0.56489f,
        0.71663f,  0.96956f,  0.11987f,  0.13721f,  -1.87023f, -0.23010f, 0.06482f,  0.04463f,
        1.68528f,  0.76126f,  1.49722f,  -0.38899f, 0.55481f,  1.01654f,  1.39907f,  0.52457f,
        -1.95718f, 0.11925f,  -0.93854f, -0.97164f, 0.36083f,  0.15714f,  -1.08132f, 0.18311f,
        0.04688f,  0.84368f,  -0.93179f, -0.51981f, -0.10838f, -0.21285f, -1.50430f, 0.11392f,
        1.62670f,  -1.49010f, 0.52821f,  -0.38828f, 0.48409f,  -0.39124f, 0.59059f,  -0.09530f,
        -0.25620f, -1.30062f, 0.56251f,  -0.36103f, 0.99661f,  1.14148f,  1.92076f,  -0.42200f,
        -0.98999f, 2.53498f,  -0.86633f, 0.25785f,  -1.04939f, 1.24230f,  0.19481f,  -0.23041f,
        0.23570f,  -1.02525f, 1.16260f,  -1.04002f, 0.22364f,  0.28499f,  -0.34476f, -0.67831f,
        -0.55750f, -0.91398f, 1.37583f,  0.64503f,  -2.02422f, -1.52848f, -0.27042f, 0.41021f,
        -0.43892f, 0.75682f,  0.18781f,  0.92758f,  0.50460f,  0.73314f,  0.03367f,  -0.27875f,
        -0.63667f, 0.18394f,  1.42434f,  2.00770f,  -0.88286f, -0.55983f, -1.12401f, 0.34193f,
        -2.51687f, -1.04707f, -0.63970f, -0.70438f, 0.59782f,  0.74183f,  0.31749f,  -0.28442f,
        -1.95803f, -1.79381f, 0.46461f,  -0.17142f, 0.41181f,  0.27836f,  -0.02363f, 0.93865f};

    std::vector<float> past_key_val{
        -0.05643f, -0.25437f, 1.09194f,  0.66179f,  -1.41830f, -0.28402f, -1.02756f, -0.69040f,
        -0.06123f, -0.36954f, -0.17680f, -0.36415f, 0.53567f,  1.25761f,  -0.69420f, 0.35286f,
        1.52961f,  -0.36589f, 2.40811f,  0.58808f,  -1.23546f, 2.68701f,  1.22354f,  0.99787f,
        -0.53892f, -0.48962f, -1.43395f, 0.52776f,  -1.76564f, -0.36932f, 1.13275f,  1.36115f,
        -0.77171f, -0.26875f, 0.06235f,  0.42429f,  -0.65334f, 0.94606f,  -0.21229f, 1.46620f,
        -0.60364f, -1.01834f, -1.07683f, -1.82212f, -1.22012f, -0.63580f, -0.08960f, 0.91387f,
        0.91717f,  1.66496f,  1.46281f,  0.07420f,  2.47913f,  0.19480f,  0.63933f,  1.82374f,
        0.16336f,  -1.32601f, 0.09285f,  -1.31287f, 2.13120f,  1.30341f,  -2.32178f, -0.06885f,
        0.25751f,  -2.45523f, -0.80937f, -1.15474f, 1.10567f,  -0.37011f, -1.64635f, 1.37914f,
        0.47257f,  -0.86281f, -1.88036f, -0.92173f, -1.24854f, -1.38376f, -0.93261f, -0.58745f,
        -1.56790f, -0.15471f, -1.25385f, -0.19776f, 2.33524f,  1.06455f,  0.25268f,  -0.88985f,
        -0.95169f, -1.07500f, -1.45951f, 0.14030f,  1.72943f,  0.71604f,  -1.20740f, 0.37191f,
        0.07843f,  -1.30294f, 0.03478f,  0.29940f,  -0.50090f, 2.24988f,  -0.51351f, 0.93431f,
        -0.83150f, -0.99841f, -0.10975f, 1.13315f,  -0.61313f, -0.11261f, 1.47706f,  0.79912f,
        -1.46731f, -0.21769f, 0.29057f,  0.51383f,  1.00579f,  0.09081f,  -0.72750f, -1.15860f,
        -1.12350f, -1.70738f, -0.69632f, -0.02184f, 0.89724f,  0.86009f,  1.82169f,  -0.33695f,
        0.72196f,  0.08689f,  1.47954f,  1.27656f,  -0.08631f, -1.00629f, 1.27031f,  -1.45220f,
        -0.23537f, 0.19544f,  -1.98628f, 1.68440f,  0.78323f,  0.26485f,  -0.27928f, 0.59655f,
        -0.69351f, -1.24831f, -0.11370f, -0.62689f, 0.99089f,  -0.42699f, 0.85232f,  0.40193f,
        -0.22174f, 0.86239f,  0.10035f,  -0.39021f, 0.68374f,  -0.45021f, 1.51216f,  0.31246f,
        0.11240f,  -1.59382f, 0.37232f,  0.67881f,  -0.39063f, 0.35071f,  -1.40674f, -1.82314f,
        -0.02877f, 0.27516f,  0.64039f,  0.95257f,  0.02649f,  -0.57250f, -0.16655f, -0.91367f,
        -1.30436f, 0.48577f,  -0.99560f, 0.90290f,  -1.51804f, -0.46178f, -0.67887f, -0.88940f,
        0.00905f,  0.78291f,  0.37717f,  -0.26164f, -0.88439f, 1.06432f,  0.43759f,  0.13293f,
        3.00755f,  -1.53423f, 0.66403f,  -0.11467f, 0.29341f,  0.01201f,  0.60076f,  -2.08621f,
        -0.90716f, -0.15028f, 1.23260f,  -0.42841f, -1.36325f, 0.12962f,  -0.48286f, 0.45730f,
        1.25012f,  -0.85489f, 0.17942f,  0.17518f,  -0.42412f, 2.64311f,  -0.34886f, -1.32618f,
        0.55929f,  0.47565f,  -0.13814f, -0.03734f, -0.37291f, -0.64283f, -1.04899f, -2.47637f,
        -0.64977f, -1.34252f, -0.27643f, -0.18802f, 0.67923f,  1.82819f,  -1.57138f, 0.14056f,
        1.45649f,  1.48892f,  -1.84123f, -0.71705f, -1.03872f, 0.47998f,  0.71731f,  -0.60670f,
        1.54235f,  0.47441f,  1.33143f,  0.01191f,  -0.21870f, 0.58935f,  0.84548f,  -0.30609f,
        0.61793f,  1.03254f,  -0.99251f, 0.48765f,  -0.45111f, 0.69947f,  -0.29603f, -1.54460f};

    std::vector<float> past_value_val{
        -0.37816f, 0.87090f,  -1.61344f, 0.13956f,  -0.81901f, 0.76515f,  -0.74807f, 1.18886f,
        1.55316f,  -0.35434f, -0.22263f, 2.01963f,  1.06368f,  0.97873f,  -0.67280f, -0.97780f,
        -0.79668f, -0.94981f, -0.72909f, -1.23772f, -0.38673f, -0.61837f, 0.24365f,  -1.43748f,
        -1.98358f, 1.40291f,  1.96175f,  0.77239f,  0.41223f,  0.54000f,  1.03043f,  -0.58672f,
        0.70837f,  -0.79111f, 0.10434f,  -1.43873f, -0.32655f, -1.21723f, 0.62297f,  -0.10607f,
        0.58546f,  1.97164f,  -2.72736f, -1.16572f, 0.11934f,  0.32576f,  1.06428f,  0.51803f,
        1.29591f,  -0.90840f, 0.57482f,  0.58669f,  0.76860f,  1.56615f,  -1.29221f, -0.24830f,
        -1.34919f, 0.26145f,  -2.11064f, -0.55426f, -1.87595f, 0.51956f,  -1.04707f, -1.44273f,
        -0.82581f, 1.02583f,  -1.25430f, -0.65379f, 0.26559f,  -1.33316f, 0.43707f,  0.39585f,
        0.63977f,  0.21369f,  0.49965f,  -0.96060f, 0.03493f,  1.56499f,  1.27274f,  0.61715f,
        -1.04710f, -0.84692f, 0.18481f,  -1.42208f, 1.14199f,  -0.20852f, 0.39647f,  -1.24761f,
        -0.18717f, -0.17571f, 0.76121f,  -1.88167f, 0.40099f,  -0.03056f, 0.47303f,  -0.35798f,
        0.52986f,  -0.59438f, -0.94197f, -0.45928f, 0.16449f,  1.04783f,  -0.85757f, -0.67229f,
        1.52259f,  1.53206f,  0.37257f,  -0.26417f, -0.19144f, -0.97798f, -0.91555f, 0.50868f,
        -1.26085f, 0.12297f,  2.29392f,  0.64503f,  1.44165f,  -0.00140f, 0.17604f,  -0.81643f,
        -1.00196f, -0.99553f, -0.95028f, -1.22433f, -1.39953f, 0.37397f,  -0.75481f, -0.17637f,
        1.08667f,  0.49987f,  1.41515f,  1.05684f,  -0.02164f, -0.88987f, 0.20248f,  2.16427f,
        0.84386f,  -0.11995f, 1.04965f,  0.41909f,  0.62178f,  -1.20399f, -0.30954f, 0.71238f,
        1.40520f,  -0.38207f, -1.13830f, -1.25437f, -0.40717f, 0.94245f,  -0.81250f, -0.44553f,
        -1.15459f, -0.96925f, -1.38157f, 1.56041f,  0.55011f,  -0.73364f, 2.29053f,  -0.52958f,
        0.91542f,  -1.18315f, 0.02060f,  1.00066f,  0.47626f,  0.55459f,  2.59757f,  -0.75680f,
        -1.05702f, -0.32843f, 0.19740f,  -0.20814f, -0.30235f, -0.36762f, -1.05995f, 0.57249f,
        0.46331f,  -1.04581f, -0.62298f, 1.45177f,  -0.21224f, 0.14414f,  -1.17731f, -0.76680f,
        0.63143f,  -0.67714f, 0.04326f,  -1.79111f, -1.00011f, 0.23198f,  -0.05199f, 0.60670f,
        1.32941f,  0.10433f,  0.45532f,  1.97910f,  -1.39362f, 0.08859f,  0.95843f,  -1.57667f,
        -0.08870f, -0.31184f, -0.05464f, 1.83374f,  -0.29242f, 0.74258f,  0.79529f,  0.90898f,
        0.42249f,  0.25482f,  -2.08790f, -0.41848f, -2.44310f, 0.03042f,  -1.20251f, 0.60407f,
        0.72421f,  0.08477f,  -1.05931f, 1.09366f,  0.01723f,  0.53796f,  -0.50292f, -0.57149f,
        0.39956f,  0.84184f,  0.21837f,  -1.21860f, -0.27069f, -1.61038f, 0.89750f,  0.64826f,
        0.36308f,  -1.79247f, 0.10420f,  0.01838f,  2.25940f,  1.35820f,  -0.65249f, -1.20616f,
        1.80214f,  0.65966f,  0.25352f,  -0.67376f, 0.82791f,  -0.26045f, -1.26632f, 1.01926f,
        0.92815f,  1.26777f,  0.27517f,  -0.32401f, -0.82499f, -0.06869f, 0.84896f,  -0.26999f};

    // clang-format off
    std::vector<int> bri_val{/*layout 1*/ 0, 1, 3, 6, 9,
                             /*layout 2*/ 0, 1, 3, 5, 8};

    std::vector<int> bci_val{/*layout 1*/ 0, 0, 1, 0, 1, 2, 0, 2, 3,
                             /*layout 2*/ 0, 0, 1, 1, 2, 1, 2, 3, -1};
    // clang-format on

    std::vector<int> tsl_val(total_sequence_len_shape.elements(), total_sequence_length);

    std::vector<int> ktsl_val(key_total_sequence_lens_shape.elements(), total_sequence_length);

    std::vector<float> cos_cache_val{
        0.60305f,  0.94544f,  0.59646f,  -0.94253f, -0.92642f, 0.19489f,  -0.97555f, -0.99972f,
        -0.35706f, -0.77041f, -0.87666f, 0.63573f,  -0.13506f, 0.51438f,  0.44535f,  -0.99741f,
        0.80078f,  0.27214f,  0.75584f,  0.82948f,  0.45954f,  -0.68932f, -0.76928f, 0.81090f,
        0.75784f,  0.88164f,  -0.93231f, 0.04034f,  0.57829f,  0.90856f,  0.55415f,  -0.96171f,
        0.14195f,  0.61549f,  0.45128f,  0.91793f,  0.17327f,  0.99181f,  0.99467f,  -0.99735f,
        0.99103f,  0.67559f,  0.98632f,  -0.58485f, 0.21572f,  -0.53796f, -0.78902f, 0.17645f,
        0.97012f,  -0.39310f, 0.33858f,  0.82521f,  -0.35662f, 0.39955f,  0.24059f,  0.32539f,
        0.82187f,  0.89318f,  -0.54623f, 0.05817f,  0.80386f,  -0.63893f, -0.19885f, -0.96778f};

    std::vector<float> sin_cache_val{
        -0.79771f, -0.32581f, -0.80264f, 0.33412f,  0.37650f,  -0.98082f, -0.21977f, 0.02385f,
        -0.93408f, 0.63755f,  -0.48110f, -0.77191f, -0.99084f, -0.85756f, 0.89536f,  0.07192f,
        0.59896f,  -0.96226f, 0.65475f,  -0.55853f, 0.88816f,  0.72445f,  -0.63891f, -0.58519f,
        0.65244f,  0.47192f,  -0.36167f, -0.99919f, -0.81583f, 0.41776f,  0.83242f,  0.27406f,
        -0.98987f, -0.78815f, -0.89238f, -0.39675f, 0.98487f,  -0.12775f, 0.10315f,  0.07274f,
        -0.13363f, 0.73728f,  -0.16483f, 0.81114f,  0.97646f,  -0.84297f, 0.61436f,  -0.98431f,
        -0.24262f, -0.91950f, -0.94094f, 0.56482f,  0.93425f,  0.91671f,  -0.97063f, 0.94558f,
        -0.56968f, -0.44970f, 0.83764f,  0.99831f,  0.59482f,  0.76926f,  0.98003f,  0.25181f};

    auto qkv        = mm->add_literal(literal{qkv_shape, qkv_val});
    auto k          = mm->add_literal(literal{});
    auto v          = mm->add_literal(literal{});
    auto past_key   = mm->add_literal(literal{past_key_shape, past_key_val});
    auto past_value = mm->add_literal(literal{past_value_shape, past_value_val});
    auto bri        = mm->add_literal(literal{block_row_indices_shape, bri_val});
    auto bci        = mm->add_literal(literal{block_col_indices_shape, bci_val});
    auto tsl        = mm->add_literal(literal{total_sequence_len_shape, tsl_val});
    auto ktsl       = mm->add_literal(literal{key_total_sequence_lens_shape, ktsl_val});
    auto cos_cache  = mm->add_literal(literal{cos_cache_shape, cos_cache_val});
    auto sin_cache  = mm->add_literal(literal{sin_cache_shape, sin_cache_val});

    auto sparse_attn = mm->add_instruction(make_op("sparse_attention",
                                                   {{"do_rotary", do_rotary},
                                                    {"rotary_interleaved", rotary_interleaved},
                                                    {"num_heads", num_heads},
                                                    {"kv_num_heads", kv_num_heads},
                                                    {"scale", scale},
                                                    {"sparse_block_size", sparse_block_size}}),
                                           qkv,
                                           k,
                                           v,
                                           past_key,
                                           past_value,
                                           bri,
                                           bci,
                                           tsl,
                                           ktsl,
                                           cos_cache,
                                           sin_cache);
    auto attn_output =
        mm->add_instruction(migraphx::make_op("get_tuple_elem", {{"index", 0}}), sparse_attn);
    auto present_key_output =
        mm->add_instruction(migraphx::make_op("get_tuple_elem", {{"index", 1}}), sparse_attn);
    auto present_val_output =
        mm->add_instruction(migraphx::make_op("get_tuple_elem", {{"index", 2}}), sparse_attn);
    mm->add_return({attn_output, present_key_output, present_val_output});

    p.compile(migraphx::make_target("ref"));
    auto results = p.eval({});

    std::vector<float> attn_result(batch_size * sequence_length * num_heads * head_size);
    results[0].visit([&](auto output) { attn_result.assign(output.begin(), output.end()); });
    std::vector<float> present_key_result(past_key_shape.elements());
    results[1].visit([&](auto output) { present_key_result.assign(output.begin(), output.end()); });
    std::vector<float> present_val_result(past_value_shape.elements());
    results[2].visit([&](auto output) { present_val_result.assign(output.begin(), output.end()); });

    std::vector<float> attn_gold{
        1.54316f,  -0.70976f, 0.40827f,  0.09174f,  -0.81059f, -0.94260f, 0.83612f,  1.54785f,
        0.52762f,  0.29894f,  0.51916f,  0.18861f,  -0.48849f, 0.37812f,  -0.55108f, 1.16715f,
        1.54316f,  -0.70976f, 0.40827f,  0.09174f,  -0.81059f, -0.94260f, 0.83612f,  1.54785f,
        0.52762f,  0.29894f,  0.51916f,  0.18861f,  -0.48849f, 0.37812f,  -0.55108f, 1.16715f,
        0.45376f,  1.61600f,  0.43510f,  -0.15598f, 0.02663f,  0.20136f,  0.16456f,  2.32006f,
        -0.17321f, -0.29193f, 0.91427f,  1.58508f,  -0.46040f, -1.24638f, -0.67820f, -1.15898f,
        0.45376f,  1.61600f,  0.43510f,  -0.15598f, 0.02663f,  0.20136f,  0.16456f,  2.32006f,
        -0.17321f, -0.29193f, 0.91427f,  1.58508f,  -0.46040f, -1.24638f, -0.67820f, -1.15898f,
        0.49646f,  -1.74180f, -0.30717f, -2.42130f, -1.13870f, 0.52728f,  0.92016f,  0.77253f,
        -0.54741f, -0.11112f, 0.84614f,  0.30215f,  1.17665f,  -0.40706f, 1.13459f,  0.05506f,
        0.81421f,  -1.42850f, -0.08999f, -1.65842f, -1.03909f, 0.08107f,  0.89465f,  1.00789f,
        -0.22107f, 0.01336f,  0.74688f,  0.26768f,  0.67116f,  -0.16870f, 0.62288f,  0.39265f,
        0.20328f,  1.26109f,  2.55082f,  0.37559f,  -0.64374f, 0.31005f,  1.29335f,  0.71595f,
        0.64005f,  0.86099f,  0.18825f,  0.26182f,  -1.74889f, -0.31757f, 0.00087f,  -0.05896f,
        0.40066f,  1.54076f,  0.88362f,  -0.04329f, -0.11548f, 0.22440f,  0.40386f,  1.98000f,
        -0.00081f, -0.04752f, 0.76036f,  1.30456f,  -0.73355f, -1.04948f, -0.53424f, -0.92579f,
        0.45038f,  -1.73269f, -0.31572f, -2.46823f, -1.14595f, 0.58275f,  0.88018f,  0.76417f,
        -0.56244f, -0.08501f, 0.86110f,  0.30041f,  1.21471f,  -0.45636f, 1.16722f,  0.02249f,
        -0.22687f, 0.31222f,  0.36284f,  -0.92588f, -1.00050f, 1.07425f,  -1.23733f, 1.54402f,
        0.34864f,  1.84584f,  1.10077f,  0.03903f,  0.53893f,  -1.69691f, 0.18941f,  0.11842f,
        0.51457f,  1.57370f,  0.48797f,  -0.16740f, 0.05262f,  0.24166f,  0.22577f,  2.23104f,
        -0.26124f, -0.27140f, 0.82258f,  1.45849f,  -0.42004f, -1.17685f, -0.69800f, -1.09246f,
        1.14518f,  1.13609f,  1.03155f,  -0.28677f, 0.32314f,  0.65905f,  0.85774f,  1.31189f,
        -1.17477f, -0.06100f, -0.12603f, 0.14953f,  0.00060f,  -0.45832f, -0.90449f, -0.40540f,
        0.67480f,  -1.11660f, 0.13209f,  -0.77678f, -0.60582f, -0.01990f, 0.62454f,  1.32027f,
        0.78164f,  0.24983f,  0.99831f,  0.18725f,  -0.08315f, -0.83361f, -0.01503f, 1.02400f,
        -0.01127f, -1.15767f, 0.28934f,  0.25239f,  0.43131f,  0.21881f,  0.39044f,  1.68106f,
        2.91414f,  0.29205f,  1.78768f,  0.07111f,  -1.32030f, -2.74774f, -0.84852f, 2.28852f,
        1.67166f,  0.76548f,  1.50837f,  -0.38167f, 0.54343f,  1.01022f,  1.39894f,  0.52499f,
        -1.93299f, 0.12683f,  -0.92893f, -0.96157f, 0.34075f,  0.15359f,  -1.07096f, 0.18181f,
        1.02495f,  1.21956f,  0.92772f,  -0.26405f, 0.27161f,  0.57945f,  0.73714f,  1.48729f,
        -1.00064f, -0.10122f, 0.05492f,  0.39924f,  -0.07951f, -0.59541f, -0.86517f, -0.53651f,
        -0.35346f, 1.18777f,  1.21192f,  0.43724f,  1.17198f,  1.10243f,  -0.54405f, -0.26789f,
        2.10787f,  0.42474f,  0.31909f,  1.08708f,  -1.40007f, 0.33558f,  -0.04952f, 1.93774f,
        -0.35445f, 1.19424f,  1.21425f,  0.43693f,  1.17328f,  1.10514f,  -0.54697f, -0.27314f,
        2.10455f,  0.42553f,  0.31498f,  1.08974f,  -1.39934f, 0.34412f,  -0.04681f, 1.93584f,
        1.45753f,  0.78949f,  1.19209f,  -0.39580f, 0.46555f,  0.85482f,  1.04008f,  0.53005f,
        -1.49856f, -0.06337f, -0.71793f, -0.82395f, 0.34306f,  0.05699f,  -0.87758f, 0.10981f,
        0.59812f,  -0.38817f, 0.96918f,  -0.37377f, 0.79927f,  1.08273f,  1.68175f,  -0.00438f,
        -1.40777f, 1.46166f,  -0.89413f, -0.28446f, -0.42513f, 0.76065f,  -0.36505f, -0.04825f,
        -0.27567f, -1.73917f, -0.33369f, -2.53185f, -0.95786f, 1.07317f,  0.29342f,  1.01507f,
        -0.71817f, -0.36271f, 0.56836f,  0.40349f,  1.07663f,  -0.44827f, 0.96565f,  -0.15268f,
        -0.47555f, 0.66275f,  0.74799f,  -0.17832f, 0.03095f,  1.12294f,  -1.11750f, 0.96909f,
        1.10440f,  1.05721f,  0.59924f,  0.52028f,  -0.50023f, -0.72224f, -0.15800f, 0.92906f,
        -0.22240f, -1.13231f, 0.65655f,  -0.32450f, 0.89799f,  1.08258f,  1.85146f,  -0.33544f,
        -0.88881f, 2.39594f,  -0.78434f, 0.26882f,  -1.07364f, 1.12490f,  0.17608f,  -0.22869f,
        0.35889f,  0.81219f,  -0.45382f, -0.49944f, 0.02009f,  0.02431f,  -0.94437f, 0.18500f,
        0.92916f,  -1.18027f, 0.25750f,  -0.49003f, 0.43945f,  -0.29698f, 0.26653f,  -0.03827f,
        -0.28099f, 0.99202f,  1.11431f,  0.28689f,  1.00469f,  1.03188f,  -0.45741f, -0.16264f,
        1.91704f,  0.38947f,  0.33801f,  1.03000f,  -1.24724f, 0.31504f,  -0.00988f, 1.81891f,
        -0.68421f, 0.58408f,  0.83334f,  0.03831f,  0.44221f,  1.16799f,  -1.07024f, 0.73259f,
        1.15644f,  0.46532f,  0.22877f,  0.80433f,  -0.88923f, 0.00111f,  -0.30755f, 1.24124f,
        0.44678f,  1.58732f,  0.43641f,  -0.15801f, 0.03614f,  0.21058f,  0.18178f,  2.29306f,
        -0.18122f, -0.26421f, 0.89682f,  1.57202f,  -0.46624f, -1.22197f, -0.66962f, -1.14982f,
        -0.38474f, 0.43136f,  0.27465f,  0.68405f,  0.55193f,  0.76309f,  0.24733f,  -0.31137f,
        -0.67499f, 0.42175f,  1.13881f,  1.72985f,  -0.94756f, -0.37982f, -0.92499f, 0.27425f,
        -0.68904f, -0.60243f, 0.37730f,  0.24720f,  -0.27677f, 0.70732f,  -1.35847f, 1.02006f,
        -0.21811f, 0.22740f,  0.06533f,  0.98952f,  -0.38265f, 1.18713f,  -0.60159f, 1.60999f,
        -0.49035f, 0.15534f,  0.45921f,  -0.14077f, -0.34022f, 0.94339f,  -1.09193f, 1.33848f,
        0.84873f,  1.17043f,  0.79127f,  0.25892f,  -0.19735f, -1.24602f, -0.26317f, 0.76307f,
        -0.10274f, 0.15175f,  0.41167f,  -0.29492f, 0.47450f,  0.63679f,  0.89867f,  0.92087f,
        -0.66601f, 0.73620f,  0.14588f,  0.86915f,  -0.65054f, -0.08882f, -0.25469f, -0.56894f,
        -0.43986f, 0.75583f,  0.18746f,  0.92670f,  0.50467f,  0.73316f,  0.03392f,  -0.27875f,
        -0.63733f, 0.18312f,  1.42373f,  2.00651f,  -0.88225f, -0.55932f, -1.12340f, 0.34218f};

    std::vector<float> present_key_gold{
        -0.63748f, -0.68824f, -0.58495f, -0.63945f, -0.79679f, -1.95254f, -0.68312f, 0.48937f,
        -0.55810f, 1.51231f,  -0.86640f, 0.20242f,  -2.18995f, 0.46998f,  0.51911f,  -1.46145f,
        -1.41838f, -2.25265f, -0.76683f, 0.31645f,  -0.47710f, -1.99733f, -0.80229f, -0.27563f,
        0.43075f,  0.49369f,  -0.86334f, -1.77821f, 0.07827f,  -0.42408f, -0.74722f, -0.43744f,
        -1.72168f, -0.38241f, 1.59882f,  0.22969f,  1.09085f,  0.58364f,  -0.26874f, -0.16856f,
        -0.26806f, 1.15586f,  -0.36086f, -0.88185f, -0.15656f, -1.18596f, 0.76039f,  1.97544f,
        0.22300f,  0.22361f,  0.62700f,  -1.50396f, -0.23210f, -0.55017f, -0.73999f, 0.64352f,
        0.13026f,  -0.63288f, 0.50450f,  -1.89586f, -0.86886f, -0.65466f, -1.13629f, 0.54971f,
        -0.48410f, 0.00022f,  0.11315f,  -1.63008f, -1.38764f, 1.24320f,  0.57957f,  0.63879f,
        1.66320f,  -2.00533f, 0.71353f,  0.14268f,  -0.34842f, -0.98095f, -0.30027f, -0.94568f,
        1.08636f,  -0.35941f, -1.39500f, -0.80564f, -0.08031f, 0.85769f,  -0.78078f, -0.50409f,
        0.45766f,  0.86783f,  -0.64466f, -1.02772f, 1.34149f,  0.04272f,  -1.42179f, -1.03076f,
        0.16406f,  1.04671f,  0.88935f,  -0.46064f, -1.08915f, 0.13981f,  -0.88662f, -0.00013f,
        -0.38628f, 1.12271f,  -0.31183f, -0.65409f, 0.57903f,  0.95428f,  -2.18803f, 0.62373f,
        0.24346f,  -0.89861f, -1.33614f, -2.78987f, -0.64096f, -1.51732f, -1.20853f, -0.51972f,
        -0.98890f, -2.10061f, 0.21374f,  -0.67273f, 0.50226f,  -1.43902f, 2.30819f,  -0.46356f,
        -1.86368f, -0.43957f, -0.96649f, 0.60313f,  -1.02504f, -0.88631f, -1.20854f, -0.28950f,
        1.32327f,  0.33532f,  -0.42134f, -1.45944f, -0.72479f, 0.65019f,  -0.86028f, -0.66458f,
        0.13323f,  0.55086f,  2.52338f,  -0.38914f, -0.16696f, -0.82676f, 0.04189f,  -1.49016f,
        -1.29609f, -0.56202f, 0.93668f,  -0.70174f, 1.59248f,  -0.52744f, -0.57329f, 0.76017f,
        0.77736f,  -1.04779f, -0.12828f, 0.23877f,  -0.49100f, -0.65296f, 0.01736f,  -1.74518f,
        -0.49231f, -1.17539f, -0.50183f, 0.63635f,  -0.70825f, -0.54498f, -1.10855f, -0.63752f,
        1.08249f,  0.59479f,  0.05055f,  -0.80241f, -0.01836f, -1.02711f, -0.77603f, 1.87560f,
        -0.57191f, -0.81712f, 0.35289f,  0.38750f,  1.23008f,  -1.04519f, 1.01525f,  -0.27820f,
        0.06107f,  -0.72166f, 0.20291f,  1.37730f,  1.52254f,  -0.36170f, -0.14765f, 0.52770f,
        -1.31544f, 1.53911f,  -0.48944f, 0.04683f,  -0.05207f, 0.37135f,  0.39626f,  0.46176f,
        0.47490f,  0.37361f,  -1.80432f, -0.42941f, 0.91329f,  0.44685f,  -0.29093f, 0.24673f,
        0.71523f,  -0.08071f, 0.45246f,  -0.35216f, 0.83123f,  -1.17139f, 1.49572f,  -0.25620f,
        -1.46225f, 1.08796f,  -0.25847f, 0.40730f,  0.49647f,  2.39976f,  -0.87455f, -0.20642f,
        0.50729f,  -1.29064f, 3.40726f,  0.51547f,  -0.84779f, 0.53845f,  -0.60092f, 0.81367f,
        -2.17264f, 0.85166f,  -0.07203f, -0.23779f, -0.63845f, -0.71581f, 0.67384f,  -0.50901f,
        1.13158f,  1.87334f,  -1.37170f, 0.19881f,  -1.16079f, -2.58463f, -0.34885f, -0.49933f};

    std::vector<float> present_val_gold{
        1.54316f,  -0.70976f, 0.40827f,  0.09174f,  -0.81059f, -0.94260f, 0.83612f,  1.54785f,
        0.52762f,  0.29894f,  0.51916f,  0.18861f,  -0.48849f, 0.37812f,  -0.55108f, 1.16715f,
        0.18136f,  -2.05249f, -0.52255f, -3.17783f, -1.23747f, 0.96977f,  0.94546f,  0.53913f,
        -0.87105f, -0.23456f, 0.94457f,  0.33633f,  1.67793f,  -0.64343f, 1.64205f,  -0.27973f,
        -0.28263f, 0.59008f,  0.46478f,  -0.67101f, -0.97408f, 1.09617f,  -1.49934f, 1.65995f,
        0.48849f,  2.09345f,  1.12164f,  0.00400f,  0.41253f,  -1.82862f, 0.02542f,  0.15923f,
        -0.02319f, -1.10920f, 0.33385f,  0.44133f,  0.52444f,  0.17839f,  0.35989f,  1.74398f,
        3.12485f,  0.32066f,  1.83530f,  0.05643f,  -1.48623f, -2.86640f, -0.98590f, 2.43114f,
        -0.35453f, 1.19489f,  1.21466f,  0.43728f,  1.17409f,  1.10532f,  -0.54684f, -0.27415f,
        2.10486f,  0.42502f,  0.31442f,  1.09029f,  -1.39990f, 0.34544f,  -0.04665f, 1.93631f,
        -1.80739f, -0.72702f, 0.26711f,  -0.49996f, -0.08280f, 1.45220f,  -1.87458f, 2.56975f,
        -0.35613f, -0.82097f, -0.73138f, 0.64083f,  -0.82572f, 0.29276f,  -1.20876f, 0.17214f,
        -0.98109f, -0.93785f, 0.23218f,  0.74644f,  -0.55791f, 0.76360f,  -2.14018f, 0.41112f,
        -1.00239f, 0.71319f,  0.23396f,  1.44287f,  0.08250f,  2.22372f,  -0.53487f, 2.49612f,
        -1.27615f, -0.19306f, -0.08782f, 1.84034f,  0.32768f,  0.56849f,  0.04441f,  -0.65827f,
        -0.23335f, -0.23385f, -0.99781f, 0.02744f,  0.27255f,  -0.16298f, 0.16596f,  -0.43781f,
        0.45376f,  1.61600f,  0.43510f,  -0.15598f, 0.02663f,  0.20136f,  0.16456f,  2.32006f,
        -0.17321f, -0.29193f, 0.91427f,  1.58508f,  -0.46040f, -1.24638f, -0.67820f, -1.15898f,
        0.17969f,  1.22766f,  2.75006f,  0.42565f,  -0.70687f, 0.32029f,  1.39965f,  0.56489f,
        0.71663f,  0.96956f,  0.11987f,  0.13721f,  -1.87023f, -0.23010f, 0.06482f,  0.04463f,
        1.68528f,  0.76126f,  1.49722f,  -0.38899f, 0.55481f,  1.01654f,  1.39907f,  0.52457f,
        -1.95718f, 0.11925f,  -0.93854f, -0.97164f, 0.36083f,  0.15714f,  -1.08132f, 0.18311f,
        0.04688f,  0.84368f,  -0.93179f, -0.51981f, -0.10838f, -0.21285f, -1.50430f, 0.11392f,
        1.62670f,  -1.49010f, 0.52821f,  -0.38828f, 0.48409f,  -0.39124f, 0.59059f,  -0.09530f,
        -0.25620f, -1.30062f, 0.56251f,  -0.36103f, 0.99661f,  1.14148f,  1.92076f,  -0.42200f,
        -0.98999f, 2.53498f,  -0.86633f, 0.25785f,  -1.04939f, 1.24230f,  0.19481f,  -0.23041f,
        0.23570f,  -1.02525f, 1.16260f,  -1.04002f, 0.22364f,  0.28499f,  -0.34476f, -0.67831f,
        -0.55750f, -0.91398f, 1.37583f,  0.64503f,  -2.02422f, -1.52848f, -0.27042f, 0.41021f,
        -0.43892f, 0.75682f,  0.18781f,  0.92758f,  0.50460f,  0.73314f,  0.03367f,  -0.27875f,
        -0.63667f, 0.18394f,  1.42434f,  2.00770f,  -0.88286f, -0.55983f, -1.12401f, 0.34193f,
        -2.51687f, -1.04707f, -0.63970f, -0.70438f, 0.59782f,  0.74183f,  0.31749f,  -0.28442f,
        -1.95803f, -1.79381f, 0.46461f,  -0.17142f, 0.41181f,  0.27836f,  -0.02363f, 0.93865f};

    EXPECT(migraphx::verify::verify_rms_range(attn_result, attn_gold));
    EXPECT(migraphx::verify::verify_rms_range(present_key_result, present_key_gold));
    EXPECT(migraphx::verify::verify_rms_range(present_val_result, present_val_gold));
}

TEST_CASE(sparse_attention_rotary_interleaved_token_generation_batched)
{
    using namespace migraphx;
    migraphx::program p;
    auto* mm                               = p.get_main_module();
    const size_t batch_size                = 2;
    const size_t sequence_length           = 1;
    const size_t num_heads                 = 2;
    const size_t kv_num_heads              = 1;
    const size_t head_size                 = 16;
    const size_t max_cache_sequence_length = 8;
    const size_t sparse_block_size         = 2;
    const size_t num_layouts               = 2;
    const size_t max_blocks                = 4;
    const size_t max_nnz_blocks            = 9;
    const size_t total_sequence_length     = 8;
    const size_t max_rotary_seq_length     = max_cache_sequence_length;
    const size_t rotary_dim                = head_size / 2;
    const float scale                      = 1.0;
    const bool do_rotary                   = true;
    const bool rotary_interleaved          = true;

    shape qkv_shape{shape::float_type,
                    {batch_size, num_heads + 2 * kv_num_heads, sequence_length, head_size}};
    shape past_key_shape(shape::float_type,
                         {batch_size, kv_num_heads, max_cache_sequence_length, head_size});
    shape past_value_shape(shape::float_type,
                           {batch_size, kv_num_heads, max_cache_sequence_length, head_size});
    shape block_row_indices_shape(shape::int32_type, {num_layouts, max_blocks + 1});
    shape block_col_indices_shape(shape::int32_type, {num_layouts, max_nnz_blocks});
    shape total_sequence_len_shape(shape::int32_type, {1});
    shape key_total_sequence_lens_shape(shape::int32_type, {batch_size});
    shape cos_cache_shape(shape::float_type, {max_rotary_seq_length, rotary_dim});
    shape sin_cache_shape(shape::float_type, {max_rotary_seq_length, rotary_dim});

    std::vector<float> qkv_val{
        -0.65048f, -0.73475f, -1.16252f, 1.23505f,  0.30815f,  1.41725f,  -0.99702f, 1.83288f,
        0.17508f,  -0.44192f, -0.60220f, 0.57942f,  -1.13502f, -0.21030f, -0.21183f, -0.59764f,
        0.03369f,  -2.07573f, 0.26817f,  0.79531f,  0.82783f,  1.75045f,  -0.13390f, 0.55881f,
        -0.68510f, -0.22383f, -1.07129f, -0.37183f, 0.59560f,  -0.24106f, 0.72188f,  0.96579f,
        1.10218f,  0.71842f,  -0.13842f, -1.18598f, -0.97063f, 0.34577f,  -0.09583f, -0.12853f,
        -0.86645f, -0.41244f, 0.26598f,  -0.01910f, -0.14762f, -0.01239f, -0.42813f, -0.25926f,
        0.51649f,  -1.49558f, -0.64219f, -1.09694f, 0.17579f,  -0.52930f, 0.99243f,  -0.48142f,
        2.87901f,  -0.34344f, 1.67369f,  -1.01097f, 1.18906f,  0.79148f,  0.03848f,  -0.08710f,
        1.06663f,  0.53670f,  0.18055f,  0.06149f,  -1.27977f, 1.04653f,  -0.09765f, 0.66428f,
        1.37472f,  -0.90719f, 2.09439f,  -0.54025f, 0.67836f,  -0.12357f, -1.05392f, 1.01185f,
        1.20504f,  -0.34832f, 1.38105f,  -0.43522f, -0.08815f, -0.12122f, 0.66614f,  -0.24025f,
        0.78835f,  -1.20457f, -1.46959f, 1.04148f,  -0.15917f, -0.11583f, 0.32542f,  -0.82666f,
        -1.77097f, -0.02825f, 0.03732f,  0.36346f,  -1.30739f, 0.38991f,  -0.11768f, 0.23001f,
        -1.09870f, -0.80748f, 1.09745f,  0.33018f,  -0.80205f, 0.10119f,  -1.22517f, -0.54121f,
        0.50709f,  -0.39303f, -0.94137f, 0.54072f,  -0.17975f, 0.04328f,  0.37207f,  2.18807f,
        -0.53601f, -0.44769f, 2.41322f,  -1.96112f, -0.13698f, 0.57829f,  -1.85719f, 0.77514f};

    std::vector<float> past_key_val{
        0.08090f,  -1.08386f, -0.32790f, 1.13294f,  -1.65987f, -0.01370f, 0.40626f,  -1.36070f,
        1.22575f,  0.11831f,  0.13800f,  0.50543f,  -1.67981f, 0.73955f,  -0.05028f, 0.43637f,
        0.00012f,  -2.13386f, -0.58904f, -1.01882f, -0.45124f, 1.66900f,  -0.39265f, 0.47776f,
        -0.65487f, -1.29244f, 0.76325f,  -0.31125f, -0.11750f, 1.07252f,  0.43630f,  -0.21251f,
        -0.79573f, 0.74034f,  0.04122f,  0.14075f,  0.43145f,  -1.42674f, -0.69530f, 0.04709f,
        -1.29878f, -0.45133f, 0.68297f,  0.52535f,  -1.30334f, 0.77906f,  -0.45770f, 0.48423f,
        1.01092f,  -0.54571f, 0.23937f,  1.13854f,  -0.62072f, 0.25176f,  1.69612f,  -0.66909f,
        -1.19854f, -0.93498f, 0.80282f,  0.62978f,  1.06696f,  -0.81181f, -0.68928f, -1.64132f,
        -0.10923f, 0.92306f,  -0.18457f, 0.82033f,  -0.66538f, 1.27407f,  1.51385f,  1.38242f,
        1.73200f,  1.33858f,  1.13349f,  0.32439f,  0.04131f,  -0.19281f, -1.18373f, 0.61095f,
        -0.06188f, 1.58589f,  1.15037f,  -1.17052f, 0.25088f,  2.24224f,  0.47672f,  -0.82852f,
        -0.86229f, 1.40614f,  0.11862f,  -0.37716f, 1.10517f,  0.75580f,  1.93028f,  0.65444f,
        -0.27552f, 1.04926f,  -2.20608f, -0.55458f, -0.24963f, -1.05282f, 1.84703f,  -0.42666f,
        -0.08118f, 1.01601f,  -1.19138f, 0.68565f,  -0.32017f, 1.05998f,  0.32963f,  -0.29866f,
        -1.02618f, -2.21108f, 0.20618f,  1.10059f,  -1.08336f, 0.13149f,  1.18234f,  -0.91573f,
        0.91869f,  -0.29451f, 0.20421f,  0.96053f,  -0.46315f, -1.94643f, 0.45612f,  1.37503f,
        -1.76853f, 0.90351f,  0.91172f,  -1.13565f, -0.88497f, 2.46550f,  1.37994f,  1.15810f,
        0.05610f,  -0.27331f, -0.99149f, 0.84335f,  -0.99313f, -0.66252f, 0.64570f,  -0.07956f,
        0.69157f,  -0.95706f, -0.23418f, 1.39518f,  0.41498f,  0.33289f,  -0.47896f, 0.93803f,
        0.83497f,  -0.95007f, -0.19317f, -0.61800f, 0.21834f,  0.79118f,  -0.51992f, -0.83293f,
        -0.16961f, -0.64724f, 0.85783f,  0.19753f,  0.36159f,  -0.43583f, -0.18189f, -0.71276f,
        -1.07046f, 0.33756f,  -0.78382f, 0.40977f,  -0.66117f, 0.12810f,  -1.03895f, -1.00073f,
        0.71388f,  -0.36993f, -0.47839f, -0.32431f, -1.31904f, -0.65767f, 0.14844f,  0.31816f,
        -1.39508f, 0.20828f,  -1.24038f, -1.18967f, -1.33366f, -2.64444f, -0.03273f, -0.10441f,
        -0.15429f, -1.37179f, -0.25940f, -1.87915f, 1.76535f,  -0.19594f, 0.48813f,  -1.12490f,
        0.44678f,  -0.84470f, 1.40724f,  -0.70553f, -2.11373f, -0.06739f, -1.26297f, 0.32643f,
        -1.27610f, -0.69076f, -0.36361f, -0.13744f, 0.00622f,  -0.45645f, 0.88817f,  -1.00806f,
        0.22990f,  -1.34932f, -0.98612f, 0.67652f,  -2.16260f, -0.67970f, 0.02264f,  0.44075f,
        0.97765f,  0.44642f,  -1.34633f, -0.58688f, 2.40035f,  -0.91809f, 0.41854f,  -0.51831f,
        -0.61607f, 2.51720f,  -0.84669f, -0.47575f, -0.38668f, -0.15088f, 0.70503f,  0.45425f,
        -0.89982f, -1.61171f, -1.62061f, -1.08442f, 0.12052f,  0.59309f,  -0.77574f, 0.20308f,
        -0.19736f, 0.63943f,  -0.56491f, 0.85181f,  -0.69506f, 1.15081f,  0.39257f,  -2.08032f};

    std::vector<float> past_value_val{
        -0.10088f, 0.78753f,  1.97724f,  2.07925f,  -1.02487f, 0.23945f,  -1.55912f, -1.16599f,
        0.36135f,  0.87958f,  0.52257f,  1.55026f,  0.69547f,  -0.57976f, -1.68040f, -1.90790f,
        1.09237f,  -0.89941f, -0.03416f, 1.54059f,  -0.39991f, 0.85789f,  -1.39218f, -0.01983f,
        -0.08376f, -1.99399f, 0.97046f,  0.39731f,  0.21999f,  -0.11468f, 0.51011f,  2.05661f,
        -0.10722f, -0.68123f, -0.67073f, -1.74082f, 0.62143f,  -0.73798f, -2.51631f, -0.84586f,
        0.44569f,  -1.51927f, -1.42310f, 0.60662f,  1.10603f,  -0.51815f, -0.72867f, -1.17042f,
        0.36692f,  -0.83104f, -1.72852f, -0.38299f, 0.30544f,  -1.93173f, 0.57795f,  0.96761f,
        -0.70380f, -0.11038f, -2.81209f, 0.64092f,  2.04842f,  -0.69937f, 1.22883f,  -1.14631f,
        -0.37591f, -0.08230f, -1.96903f, 0.05767f,  -0.44134f, 1.10301f,  -0.08938f, -0.45918f,
        -0.24003f, -0.44184f, -0.91254f, 0.45809f,  -0.96402f, 1.22741f,  0.02343f,  0.31422f,
        -0.20741f, -0.14628f, 1.64987f,  -0.42262f, 1.15580f,  0.12734f,  0.59888f,  0.25941f,
        0.16249f,  0.52158f,  -1.63197f, 1.53708f,  1.31306f,  0.14677f,  -0.89057f, 0.16163f,
        0.92808f,  -0.80464f, -0.70597f, 0.01079f,  -0.28845f, -1.24028f, 0.19563f,  1.10861f,
        1.00060f,  1.50570f,  -0.21148f, 1.34338f,  0.81479f,  -0.00348f, 1.31352f,  -0.63466f,
        0.04667f,  -0.22701f, -0.03506f, -0.79658f, -2.16047f, -1.02253f, 0.57111f,  1.91417f,
        -0.17594f, -0.56795f, -0.18630f, 0.86411f,  1.50584f,  -0.00495f, 0.99896f,  -1.21421f,
        1.58661f,  1.26031f,  -1.52057f, -2.87785f, -0.27888f, 0.30249f,  1.94279f,  2.42107f,
        0.32294f,  0.10813f,  1.61242f,  -0.15930f, 2.20500f,  -0.40252f, 1.60369f,  -0.24928f,
        1.37825f,  2.19318f,  -0.70585f, 1.45679f,  -1.91495f, 1.27488f,  -0.44772f, -0.55414f,
        -1.07159f, 0.48080f,  -0.89078f, -0.85553f, -0.42704f, -0.94198f, -0.00237f, 1.16888f,
        1.42120f,  -0.35898f, 0.51472f,  -1.19382f, 0.36368f,  1.21300f,  -0.66628f, -0.73322f,
        -0.74744f, 0.82710f,  0.35938f,  -0.25659f, 0.66126f,  -2.10200f, 0.82188f,  0.37698f,
        1.88388f,  1.00998f,  -1.51421f, -1.09037f, 0.27281f,  1.77015f,  0.38541f,  -1.05019f,
        0.73029f,  1.29951f,  1.17055f,  0.54339f,  -0.81615f, 2.06630f,  0.54002f,  -0.34756f,
        -0.00682f, -0.42461f, 0.15291f,  -0.93197f, -0.89160f, 0.15926f,  -0.03880f, 0.40347f,
        -1.18503f, 0.43677f,  -0.16082f, -0.75555f, -0.85424f, 1.14682f,  0.42500f,  0.68005f,
        0.49718f,  -0.55828f, 0.20114f,  -2.78612f, -0.43619f, 1.32083f,  -1.57114f, -0.06953f,
        -0.94491f, 0.94638f,  -0.62216f, 1.23716f,  -1.18148f, -0.92344f, 0.34786f,  0.91360f,
        1.72191f,  -1.22920f, -1.73245f, 0.80414f,  0.70055f,  1.06258f,  0.50512f,  -1.83356f,
        -0.75729f, 0.88006f,  -0.48926f, 0.47902f,  -0.86526f, 0.06634f,  -1.33917f, -0.51240f,
        -0.90462f, 0.53258f,  -1.33577f, -1.28095f, 0.94697f,  0.10626f,  -2.50212f, 0.13242f,
        1.87076f,  0.20880f,  0.26053f,  -1.58112f, -0.06503f, 0.92132f,  0.73888f,  0.88165f};

    // clang-format off
    std::vector<int> bri_val{/*layout 1*/ 0, 1, 3, 6, 9,
                             /*layout 2*/ 0, 1, 3, 5, 8};

    std::vector<int> bci_val{/*layout 1*/ 0, 0, 1, 0, 1, 2, 0, 2, 3,
                             /*layout 2*/ 0, 0, 1, 1, 2, 1, 2, 3, -1};
    // clang-format on

    std::vector<int> tsl_val(total_sequence_len_shape.elements(), total_sequence_length);

    std::vector<int> ktsl_val(key_total_sequence_lens_shape.elements(), total_sequence_length);

    std::vector<float> cos_cache_val{
        0.15911f,  -0.05395f, -0.59862f, 0.98028f,  -0.55443f, -0.81122f, -0.47045f, 0.91331f,
        -0.84324f, 0.98846f,  -0.71105f, -0.79251f, -0.57709f, -0.82186f, -0.07956f, 0.78094f,
        -0.65349f, 0.99776f,  0.91546f,  -0.05603f, -0.37510f, 0.05328f,  -0.90493f, -0.50526f,
        -0.67425f, 0.99716f,  -0.51956f, 0.52490f,  -0.45744f, 0.85886f,  0.87088f,  0.20695f,
        0.10653f,  -0.79970f, 0.00293f,  -0.81702f, 0.38169f,  0.86232f,  0.99098f,  -0.75832f,
        0.14130f,  -0.97297f, 0.44135f,  0.97386f,  -0.08836f, -0.99652f, -0.29374f, 0.67556f,
        -0.24402f, 0.51681f,  0.01236f,  -0.04189f, 0.89800f,  -0.76051f, -0.50112f, -0.96679f,
        -0.76057f, -0.74721f, -0.56633f, 0.05373f,  0.51381f,  0.76501f,  0.19223f,  -0.36373f};

    std::vector<float> sin_cache_val{
        -0.98726f, 0.99854f,  0.80103f,  0.19763f,  0.83223f,  -0.58474f, -0.88243f, 0.40727f,
        -0.53754f, -0.15150f, 0.70314f,  -0.60985f, 0.81668f,  0.56969f,  -0.99683f, 0.62461f,
        -0.75693f, -0.06687f, 0.40241f,  0.99843f,  -0.92699f, -0.99858f, 0.42557f,  -0.86297f,
        -0.73850f, -0.07530f, -0.85444f, 0.85116f,  0.88924f,  0.51221f,  -0.49150f, -0.97835f,
        -0.99431f, -0.60041f, -1.00000f, 0.57661f,  0.92429f,  0.50637f,  0.13403f,  0.65189f,
        -0.98997f, -0.23095f, 0.89734f,  -0.22716f, 0.99609f,  0.08341f,  0.95588f,  -0.73730f,
        -0.96977f, 0.85610f,  -0.99992f, -0.99912f, 0.44000f,  -0.64933f, -0.86538f, 0.25557f,
        0.64926f,  0.66459f,  0.82418f,  -0.99856f, 0.85790f,  -0.64402f, -0.98135f, 0.93151f};

    auto qkv        = mm->add_literal(literal{qkv_shape, qkv_val});
    auto k          = mm->add_literal(literal{});
    auto v          = mm->add_literal(literal{});
    auto past_key   = mm->add_literal(literal{past_key_shape, past_key_val});
    auto past_value = mm->add_literal(literal{past_value_shape, past_value_val});
    auto bri        = mm->add_literal(literal{block_row_indices_shape, bri_val});
    auto bci        = mm->add_literal(literal{block_col_indices_shape, bci_val});
    auto tsl        = mm->add_literal(literal{total_sequence_len_shape, tsl_val});
    auto ktsl       = mm->add_literal(literal{key_total_sequence_lens_shape, ktsl_val});
    auto cos_cache  = mm->add_literal(literal{cos_cache_shape, cos_cache_val});
    auto sin_cache  = mm->add_literal(literal{sin_cache_shape, sin_cache_val});

    auto sparse_attn = mm->add_instruction(make_op("sparse_attention",
                                                   {{"do_rotary", do_rotary},
                                                    {"rotary_interleaved", rotary_interleaved},
                                                    {"num_heads", num_heads},
                                                    {"kv_num_heads", kv_num_heads},
                                                    {"scale", scale},
                                                    {"sparse_block_size", sparse_block_size}}),
                                           qkv,
                                           k,
                                           v,
                                           past_key,
                                           past_value,
                                           bri,
                                           bci,
                                           tsl,
                                           ktsl,
                                           cos_cache,
                                           sin_cache);
    auto attn_output =
        mm->add_instruction(migraphx::make_op("get_tuple_elem", {{"index", 0}}), sparse_attn);
    auto present_key_output =
        mm->add_instruction(migraphx::make_op("get_tuple_elem", {{"index", 1}}), sparse_attn);
    auto present_val_output =
        mm->add_instruction(migraphx::make_op("get_tuple_elem", {{"index", 2}}), sparse_attn);
    mm->add_return({attn_output, present_key_output, present_val_output});

    p.compile(migraphx::make_target("ref"));
    auto results = p.eval({});

    std::vector<float> attn_result(batch_size * sequence_length * num_heads * head_size);
    results[0].visit([&](auto output) { attn_result.assign(output.begin(), output.end()); });
    std::vector<float> present_key_result(past_key_shape.elements());
    results[1].visit([&](auto output) { present_key_result.assign(output.begin(), output.end()); });
    std::vector<float> present_val_result(past_value_shape.elements());
    results[2].visit([&](auto output) { present_val_result.assign(output.begin(), output.end()); });

    std::vector<float> attn_gold{
        0.87719f,  -0.76625f, -0.69476f, 0.04467f,  -0.29315f, -1.13361f, 0.15757f,  1.02717f,
        0.94555f,  1.40714f,  -0.21971f, 1.31282f,  0.76177f,  0.02454f,  1.22829f,  -0.59145f,
        0.74166f,  -0.74126f, -0.93156f, -0.03847f, -0.23115f, -1.09990f, 0.19752f,  0.93908f,
        0.69799f,  1.13357f,  -0.56750f, 1.18094f,  0.79095f,  0.02933f,  1.17434f,  -0.60708f,
        0.21995f,  -0.32801f, -0.15078f, -0.52348f, -0.74750f, 0.23928f,  0.01599f,  0.58884f,
        -1.04447f, 0.30487f,  0.24509f,  -0.90110f, -0.70960f, 0.88043f,  -0.06430f, 0.67812f,
        0.56757f,  -0.59222f, 0.09765f,  -2.57941f, -0.37094f, 1.30392f,  -1.45113f, -0.16375f,
        -0.93296f, 0.93986f,  -0.60438f, 1.18228f,  -1.15262f, -0.87287f, 0.25734f,  0.83399f};

    std::vector<float> present_key_gold{
        0.08090f,  -1.08386f, -0.32790f, 1.13294f,  -1.65987f, -0.01370f, 0.40626f,  -1.36070f,
        1.22575f,  0.11831f,  0.13800f,  0.50543f,  -1.67981f, 0.73955f,  -0.05028f, 0.43637f,
        0.00012f,  -2.13386f, -0.58904f, -1.01882f, -0.45124f, 1.66900f,  -0.39265f, 0.47776f,
        -0.65487f, -1.29244f, 0.76325f,  -0.31125f, -0.11750f, 1.07252f,  0.43630f,  -0.21251f,
        -0.79573f, 0.74034f,  0.04122f,  0.14075f,  0.43145f,  -1.42674f, -0.69530f, 0.04709f,
        -1.29878f, -0.45133f, 0.68297f,  0.52535f,  -1.30334f, 0.77906f,  -0.45770f, 0.48423f,
        1.01092f,  -0.54571f, 0.23937f,  1.13854f,  -0.62072f, 0.25176f,  1.69612f,  -0.66909f,
        -1.19854f, -0.93498f, 0.80282f,  0.62978f,  1.06696f,  -0.81181f, -0.68928f, -1.64132f,
        -0.10923f, 0.92306f,  -0.18457f, 0.82033f,  -0.66538f, 1.27407f,  1.51385f,  1.38242f,
        1.73200f,  1.33858f,  1.13349f,  0.32439f,  0.04131f,  -0.19281f, -1.18373f, 0.61095f,
        -0.06188f, 1.58589f,  1.15037f,  -1.17052f, 0.25088f,  2.24224f,  0.47672f,  -0.82852f,
        -0.86229f, 1.40614f,  0.11862f,  -0.37716f, 1.10517f,  0.75580f,  1.93028f,  0.65444f,
        -0.27552f, 1.04926f,  -2.20608f, -0.55458f, -0.24963f, -1.05282f, 1.84703f,  -0.42666f,
        -0.08118f, 1.01601f,  -1.19138f, 0.68565f,  -0.32017f, 1.05998f,  0.32963f,  -0.29866f,
        -1.30472f, 0.16920f,  0.89162f,  0.79419f,  0.26472f,  -0.99579f, -0.13349f, 0.08878f,
        -0.09135f, -0.95525f, 0.19118f,  -0.18591f, -0.04054f, 0.14248f,  0.39722f,  -0.30450f,
        -1.76853f, 0.90351f,  0.91172f,  -1.13565f, -0.88497f, 2.46550f,  1.37994f,  1.15810f,
        0.05610f,  -0.27331f, -0.99149f, 0.84335f,  -0.99313f, -0.66252f, 0.64570f,  -0.07956f,
        0.69157f,  -0.95706f, -0.23418f, 1.39518f,  0.41498f,  0.33289f,  -0.47896f, 0.93803f,
        0.83497f,  -0.95007f, -0.19317f, -0.61800f, 0.21834f,  0.79118f,  -0.51992f, -0.83293f,
        -0.16961f, -0.64724f, 0.85783f,  0.19753f,  0.36159f,  -0.43583f, -0.18189f, -0.71276f,
        -1.07046f, 0.33756f,  -0.78382f, 0.40977f,  -0.66117f, 0.12810f,  -1.03895f, -1.00073f,
        0.71388f,  -0.36993f, -0.47839f, -0.32431f, -1.31904f, -0.65767f, 0.14844f,  0.31816f,
        -1.39508f, 0.20828f,  -1.24038f, -1.18967f, -1.33366f, -2.64444f, -0.03273f, -0.10441f,
        -0.15429f, -1.37179f, -0.25940f, -1.87915f, 1.76535f,  -0.19594f, 0.48813f,  -1.12490f,
        0.44678f,  -0.84470f, 1.40724f,  -0.70553f, -2.11373f, -0.06739f, -1.26297f, 0.32643f,
        -1.27610f, -0.69076f, -0.36361f, -0.13744f, 0.00622f,  -0.45645f, 0.88817f,  -1.00806f,
        0.22990f,  -1.34932f, -0.98612f, 0.67652f,  -2.16260f, -0.67970f, 0.02264f,  0.44075f,
        0.97765f,  0.44642f,  -1.34633f, -0.58688f, 2.40035f,  -0.91809f, 0.41854f,  -0.51831f,
        -0.61607f, 2.51720f,  -0.84669f, -0.47575f, -0.38668f, -0.15088f, 0.70503f,  0.45425f,
        1.36528f,  -1.12834f, -0.26943f, -0.24678f, 0.41906f,  -1.29834f, 0.22335f,  0.12987f,
        0.12822f,  -1.35747f, 1.05220f,  -0.45419f, -0.05488f, 0.80654f,  0.94977f,  -0.94440f};

    std::vector<float> present_val_gold{
        -0.10088f, 0.78753f,  1.97724f,  2.07925f,  -1.02487f, 0.23945f,  -1.55912f, -1.16599f,
        0.36135f,  0.87958f,  0.52257f,  1.55026f,  0.69547f,  -0.57976f, -1.68040f, -1.90790f,
        1.09237f,  -0.89941f, -0.03416f, 1.54059f,  -0.39991f, 0.85789f,  -1.39218f, -0.01983f,
        -0.08376f, -1.99399f, 0.97046f,  0.39731f,  0.21999f,  -0.11468f, 0.51011f,  2.05661f,
        -0.10722f, -0.68123f, -0.67073f, -1.74082f, 0.62143f,  -0.73798f, -2.51631f, -0.84586f,
        0.44569f,  -1.51927f, -1.42310f, 0.60662f,  1.10603f,  -0.51815f, -0.72867f, -1.17042f,
        0.36692f,  -0.83104f, -1.72852f, -0.38299f, 0.30544f,  -1.93173f, 0.57795f,  0.96761f,
        -0.70380f, -0.11038f, -2.81209f, 0.64092f,  2.04842f,  -0.69937f, 1.22883f,  -1.14631f,
        -0.37591f, -0.08230f, -1.96903f, 0.05767f,  -0.44134f, 1.10301f,  -0.08938f, -0.45918f,
        -0.24003f, -0.44184f, -0.91254f, 0.45809f,  -0.96402f, 1.22741f,  0.02343f,  0.31422f,
        -0.20741f, -0.14628f, 1.64987f,  -0.42262f, 1.15580f,  0.12734f,  0.59888f,  0.25941f,
        0.16249f,  0.52158f,  -1.63197f, 1.53708f,  1.31306f,  0.14677f,  -0.89057f, 0.16163f,
        0.92808f,  -0.80464f, -0.70597f, 0.01079f,  -0.28845f, -1.24028f, 0.19563f,  1.10861f,
        1.00060f,  1.50570f,  -0.21148f, 1.34338f,  0.81479f,  -0.00348f, 1.31352f,  -0.63466f,
        0.51649f,  -1.49558f, -0.64219f, -1.09694f, 0.17579f,  -0.52930f, 0.99243f,  -0.48142f,
        2.87901f,  -0.34344f, 1.67369f,  -1.01097f, 1.18906f,  0.79148f,  0.03848f,  -0.08710f,
        1.58661f,  1.26031f,  -1.52057f, -2.87785f, -0.27888f, 0.30249f,  1.94279f,  2.42107f,
        0.32294f,  0.10813f,  1.61242f,  -0.15930f, 2.20500f,  -0.40252f, 1.60369f,  -0.24928f,
        1.37825f,  2.19318f,  -0.70585f, 1.45679f,  -1.91495f, 1.27488f,  -0.44772f, -0.55414f,
        -1.07159f, 0.48080f,  -0.89078f, -0.85553f, -0.42704f, -0.94198f, -0.00237f, 1.16888f,
        1.42120f,  -0.35898f, 0.51472f,  -1.19382f, 0.36368f,  1.21300f,  -0.66628f, -0.73322f,
        -0.74744f, 0.82710f,  0.35938f,  -0.25659f, 0.66126f,  -2.10200f, 0.82188f,  0.37698f,
        1.88388f,  1.00998f,  -1.51421f, -1.09037f, 0.27281f,  1.77015f,  0.38541f,  -1.05019f,
        0.73029f,  1.29951f,  1.17055f,  0.54339f,  -0.81615f, 2.06630f,  0.54002f,  -0.34756f,
        -0.00682f, -0.42461f, 0.15291f,  -0.93197f, -0.89160f, 0.15926f,  -0.03880f, 0.40347f,
        -1.18503f, 0.43677f,  -0.16082f, -0.75555f, -0.85424f, 1.14682f,  0.42500f,  0.68005f,
        0.49718f,  -0.55828f, 0.20114f,  -2.78612f, -0.43619f, 1.32083f,  -1.57114f, -0.06953f,
        -0.94491f, 0.94638f,  -0.62216f, 1.23716f,  -1.18148f, -0.92344f, 0.34786f,  0.91360f,
        1.72191f,  -1.22920f, -1.73245f, 0.80414f,  0.70055f,  1.06258f,  0.50512f,  -1.83356f,
        -0.75729f, 0.88006f,  -0.48926f, 0.47902f,  -0.86526f, 0.06634f,  -1.33917f, -0.51240f,
        0.50709f,  -0.39303f, -0.94137f, 0.54072f,  -0.17975f, 0.04328f,  0.37207f,  2.18807f,
        -0.53601f, -0.44769f, 2.41322f,  -1.96112f, -0.13698f, 0.57829f,  -1.85719f, 0.77514f};

    EXPECT(migraphx::verify::verify_rms_range(attn_result, attn_gold));
    EXPECT(migraphx::verify::verify_rms_range(present_key_result, present_key_gold));
    EXPECT(migraphx::verify::verify_rms_range(present_val_result, present_val_gold));
}
