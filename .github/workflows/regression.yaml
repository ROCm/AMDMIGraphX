on:
  push:
    branches: [develop]
env:
  TEST: false
  DOCKERBASE: rocm-migraphx:5.1
  MIOPENTUNE: miopen-rocm51
  REPORTS_DIR: migraphx-reports

name: MIGraphX Regression test

jobs: 
#   check_image_version:
#     name: Check Image Version
#     runs-on: ubuntu-latest
#     outputs:
#       image: ${{ steps.check_image.outputs.image }}
#     steps:
#       - name: Check new image
#         id: check_image
#         run: |
#           if [[ "$(docker images -q rocm-migraphx:`date +%Y%m%d` 2> /dev/null)" != "" ]]; then
#             echo "::set-output name=image::true"
#           fi
#   build_image:
#     name: Build New Image
#     runs-on: self-hosted
#     needs: check_image_version
#     if: ${{ needs.check_image.outputs.image == 'true' }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v1
#         with:
#           submodules: recursive
#           token: ${{ secrets.GH_SUB_TOKEN }}
#       - name: Docker build
#         run: |
#           cd ./rocm-migraphx/dockerfiles
#           docker build -t "rocm-migraphx:$(date +%Y%m%d)" --no-cache --build-arg BRANCH=$GITHUB_REF_NAME --build-arg DOCKERBASE=${{ env.DOCKERBASE }} --build-arg MIOPENTUNE=${{ env.MIOPENTUNE }} -f dockerfile-daily .
  execute_scripts:
    name: Execute scripts
    runs-on: self-hosted
    if: ${{ always() }}
#     needs: build_image
    steps:
# Docker runs the performance script inside `rocm-migraphx` docker.
# Attached volume provides access to the compiled version of `saved-modules` adn MRPC datasets. (Currently inside `/home/htec/jz` dir, but that should be changed)
# `workdir` parameter sets root context for execution of run_perf_mev.sh script. That's not necessary, but removing that parameter requires changes how the script imports the MRPC data
      # - name: Execute perf script
      #   run: >
      #     docker run -e TZ=America/Chicago
      #     -e TARGET=gpu
      #     --device=/dev/dri
      #     --device=/dev/kfd
      #     --network=host
      #     --group-add=video 
      #     -v /home/htec/jz:/data
      #     --workdir /data/source/rocm-migraphx/scripts/
      #     rocm-migraphx:5.1 /bin/bash run_perf_mev.sh
      - name: Execute report script
        run: >
            python3 /home/htec/jz/source/rocm-migraphx/scripts/report.py 
            -t "/home/htec/jz/source/rocm-migraphx/test-results/" 
            -r "/home/htec/igor/rocm-migraphx/reports/"

      - name: Checkout reports repo
        run: |
          rm -rf $GITHUB_WORKSPACE/${{ env.REPORTS_DIR }}/
          git clone https://${{ secrets.GH_SUB_TOKEN }}@github.com/migraphx-benchmark/migraphx-reports.git $GITHUB_WORKSPACE/${{ env.REPORTS_DIR }}
          
      - name: Push report
        run: |
          cd $GITHUB_WORKSPACE/${{ env.REPORTS_DIR }}/
          cp -r /home/htec/igor/rocm-migraphx/reports/* $GITHUB_WORKSPACE/${{ env.REPORTS_DIR }}/
          git add .
          git config --local user.email github-actions
          git config --local user.name github-actions@github.com
          git commit -m "Push report" -a
          git push

      - name: Run comment script
        run: |
            python3 /home/htec/jz/source/rocm-migraphx/scripts/comment.py -t "/home/htec/jz/source/rocm-migraphx/test-results/" | tee /home/htec/jz/source/rocm-migraphx/scripts/comment.txt
      - name: Get comment from file
        id: auto_comment
        run: |
          body="$(cat /home/htec/jz/source/rocm-migraphx/scripts/comment.txt)"
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo "::set-output name=body::$body"

      - name: Create or Update Comment
        # You may pin to the exact commit or the version.
        # uses: peter-evans/create-or-update-comment@c9fcb64660bc90ec1cc535646af190c992007c32
        uses: peter-evans/create-or-update-comment@v2.0.0
        with:
          # GITHUB_TOKEN or a repo scoped PAT.
          token: ${{ secrets.GH_SUB_TOKEN }}
          # The full name of the repository in which to create or update a comment.
          #repository: # optional
          # The number of the issue or pull request in which to create a comment.
          issue-number: 1
          # The id of the comment to update.
          #comment-id: # optional
          # The comment body.
          body: ${{ steps.auto_comment.outputs.body}}
          # The mode when updating a comment, "replace" or "append".
          #edit-mode: # optional
          # Deprecated in favour of `reactions`
          #reaction-type: # optional
          # A comma separated list of reactions to add to the comment.
          #reactions: # optional
